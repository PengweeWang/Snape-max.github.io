<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>FastAPI项目开发与部署</title>
      <link href="/2025/02/16/FastAPI%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E4%B8%8E%E9%83%A8%E7%BD%B2/"/>
      <url>/2025/02/16/FastAPI%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E4%B8%8E%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="FastAPI-项目开发与部署笔记"><a href="#FastAPI-项目开发与部署笔记" class="headerlink" title="FastAPI 项目开发与部署笔记"></a><strong>FastAPI 项目开发与部署笔记</strong></h1><p>本笔记总结了如何使用 FastAPI 构建一个模块化、可扩展的 API 系统，并通过 Docker 和 Docker Compose 实现高效的开发和部署流程。</p><hr><h2 id="1-项目结构设计"><a href="#1-项目结构设计" class="headerlink" title="1. 项目结构设计"></a><strong>1. 项目结构设计</strong></h2><p>为了构建一个清晰、易维护的项目，项目采用以下结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">project/</span><br><span class="line">├── main.py          # 主入口文件</span><br><span class="line">├── routers/         # 路由模块</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── xiaohongshu/ # 小红书 API 文件夹</span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   └── image.py # 小红书图片解析 API</span><br><span class="line">│   └── other_api/   # 其他功能 API 文件夹（未来扩展）</span><br><span class="line">│       ├── __init__.py</span><br><span class="line">│       └── example.py</span><br><span class="line">├── utils/           # 工具模块</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   └── parser.py    # 解析工具函数</span><br><span class="line">└── models/          # 数据模型（如果需要）</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    └── example.py</span><br></pre></td></tr></table></figure><p><strong>特点</strong>:</p><ul><li>每个功能模块独立封装在 <code>routers</code> 文件夹下的子文件夹中。</li><li>动态加载路由，支持灵活扩展。</li></ul><hr><h2 id="2-FastAPI-核心功能实现"><a href="#2-FastAPI-核心功能实现" class="headerlink" title="2. FastAPI 核心功能实现"></a><strong>2. FastAPI 核心功能实现</strong></h2><h3 id="1-路由定义"><a href="#1-路由定义" class="headerlink" title="(1) 路由定义"></a><strong>(1) 路由定义</strong></h3><p>使用 <code>APIRouter</code> 定义模块化路由。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> APIRouter</span><br><span class="line"></span><br><span class="line">router = APIRouter(prefix=<span class="string">&quot;/image&quot;</span>, tags=[<span class="string">&quot;Image Parsing&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">@router.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">parse_image</span>(<span class="params">url: <span class="built_in">str</span></span>):</span><br><span class="line">    result = HongshuParser(url)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="2-自动化文档"><a href="#2-自动化文档" class="headerlink" title="(2) 自动化文档"></a><strong>(2) 自动化文档</strong></h3><p>FastAPI 自动生成交互式文档页面：</p><ul><li>Swagger UI: <code>/docs</code></li><li>ReDoc: <code>/redoc</code></li></ul><p>可以通过以下方式定制文档页面：</p><ul><li>修改标题：自定义 HTML 模板。</li><li>添加品牌化元素：如 Logo 和样式。</li></ul><hr><h2 id="3-Docker-部署"><a href="#3-Docker-部署" class="headerlink" title="3. Docker 部署"></a><strong>3. Docker 部署</strong></h2><h3 id="1-Dockerfile"><a href="#1-Dockerfile" class="headerlink" title="(1) Dockerfile"></a><strong>(1) Dockerfile</strong></h3><p><code>Dockerfile</code> 示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># syntax=docker/dockerfile:1.4</span></span><br><span class="line"><span class="keyword">FROM</span> --platform=$BUILDPLATFORM python:<span class="number">3.11</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">ENV</span> PYTHONDONTWRITEBYTECODE <span class="number">1</span></span><br><span class="line"><span class="keyword">ENV</span> PYTHONUNBUFFERED <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> requirements.txt /app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> --mount=<span class="built_in">type</span>=cache,target=/root/.cache/pip \</span></span><br><span class="line"><span class="language-bash">    pip install --no-cache-dir -r requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">4725</span>/tcp</span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;gunicorn&quot;</span>, <span class="string">&quot;-w&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;-k&quot;</span>, <span class="string">&quot;uvicorn.workers.UvicornWorker&quot;</span>, <span class="string">&quot;--bind&quot;</span>, <span class="string">&quot;0.0.0.0:4725&quot;</span>, <span class="string">&quot;app:app&quot;</span>]</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-Docker-Compose"><a href="#2-Docker-Compose" class="headerlink" title="(2) Docker Compose"></a><strong>(2) Docker Compose</strong></h3><p>通过 <code>docker-compose.yml</code> 简化多容器管理：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.9&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;4725:4725&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.:/app</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&gt;</span></span><br><span class="line">      <span class="string">gunicorn</span> <span class="string">-w</span> <span class="number">4</span> <span class="string">-k</span> <span class="string">uvicorn.workers.UvicornWorker</span> <span class="string">--bind</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:4725</span> <span class="string">app:app</span></span><br></pre></td></tr></table></figure><p><strong>优点</strong>:</p><ul><li>使用 <code>volumes</code> 挂载本地代码，实时同步代码更改。</li><li>支持多服务管理（如数据库、缓存等）。</li></ul><hr><h2 id="4-更新代码后的重新运行"><a href="#4-更新代码后的重新运行" class="headerlink" title="4. 更新代码后的重新运行"></a><strong>4. 更新代码后的重新运行</strong></h2><h3 id="1-手动更新"><a href="#1-手动更新" class="headerlink" title="(1) 手动更新"></a><strong>(1) 手动更新</strong></h3><ol><li>停止并删除旧容器：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop &lt;docker 容器 ID | docker 容器名&gt;</span><br><span class="line">docker <span class="built_in">rm</span> &lt;docker 容器 ID | docker 容器名&gt;</span><br></pre></td></tr></table></figure></li><li>重新构建镜像并运行：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t &lt;docker 容器名&gt; .</span><br><span class="line">docker run -d -p 4725:4725 --name &lt;docker 容器名&gt; &lt;docker 镜像名&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-使用-Docker-Compose"><a href="#2-使用-Docker-Compose" class="headerlink" title="(2) 使用 Docker Compose"></a><strong>(2) 使用 Docker Compose</strong></h3><ol><li>重新构建并启动：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up --build -d <span class="comment"># -d 表示后台运行</span></span><br></pre></td></tr></table></figure></li><li>如果挂载了本地代码，只需保存代码更改即可自动生效。</li></ol><hr><h2 id="5-项目拓展"><a href="#5-项目拓展" class="headerlink" title="5. 项目拓展"></a><strong>5. 项目拓展</strong></h2><h3 id="1-添加新功能"><a href="#1-添加新功能" class="headerlink" title="(1) 添加新功能"></a><strong>(1) 添加新功能</strong></h3><p>新增功能非常简单，只需在 <code>routers</code> 文件夹下创建新的子文件夹，并按照以下步骤操作：</p><ol><li>创建模块文件夹。</li><li>定义路由。</li><li>初始化模块。</li><li>测试新功能。</li></ol><h3 id="2-集成外部工具"><a href="#2-集成外部工具" class="headerlink" title="(2) 集成外部工具"></a><strong>(2) 集成外部工具</strong></h3><p>通过依赖注入的方式集成外部工具或服务（如数据库、缓存等）。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_db</span>():</span><br><span class="line">    db = <span class="string">&quot;Database Connection&quot;</span></span><br><span class="line">    <span class="keyword">return</span> db</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/example-with-db&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">example_with_db</span>(<span class="params">db=Depends(<span class="params">get_db</span>)</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;db&quot;</span>: db&#125;</span><br></pre></td></tr></table></figure><h2 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a><strong>项目代码</strong></h2><p>项目代码已上传至 <a href="https://github.com/Snape-max/api">Qiumo api</a>, 部署置 <a href="https://api.qiumo.fun/">Qiumo.fun</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Time Machine</title>
      <link href="/2025/02/03/Time%20Machine/"/>
      <url>/2025/02/03/Time%20Machine/</url>
      
        <content type="html"><![CDATA[<p><img src="/./assets/OIP-C.jpg" alt="machine"></p><blockquote><p>Everyone want to go back, but time waits for no one.</p></blockquote><br><p>Staring at stars</p><p>Watching the moon</p><p>Hoping that one they’ll lead me to you</p><p>Wait every night</p><p>Cause if a star falls</p><p>I’ll wish to go back to the times that I loved</p><p>Why do the stars shine so bright in the sky</p><p>If most of the people are sleeping at night</p><p>Why do we only have one chance at life</p><p>I wish I could go back in time</p><br><hr><br><p>Pictures remind me of the things I forget</p><p>But also of all of the things that I’ve lost</p><p>Can’t get them back they won’t fall from above</p><p>So I try to forget all the times that I loved</p><p>Why do we remember beautiful lies</p><p>We end up regretting them most of our lives</p><p>Why do we only have one chance to try </p><p>I wish I could go back in time </p><p>Each time I fall asleep</p><p>I always see you there in my dreams</p><p>It’s like going back in a time mechine</p><p>I know when I wake up your time with me will end</p><p>So don’t let me fall asleep</p><p>I don’t wanna meet you there in my dreams</p><p>I know that we’ll never build a time machine</p><p>It’s time for me to try and wake up again</p><p>I fall asleep</p><p>But honestly</p><p>I wanna see you in my dreams</p><p>I’m trying to wake up again</p>]]></content>
      
      
      <categories>
          
          <category> Music </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>千与千寻——只存在于梦中的童话故事</title>
      <link href="/2025/02/02/%E5%8D%83%E4%B8%8E%E5%8D%83%E5%AF%BB/"/>
      <url>/2025/02/02/%E5%8D%83%E4%B8%8E%E5%8D%83%E5%AF%BB/</url>
      
        <content type="html"><![CDATA[<p><img src="/./assets/qyqx.jpg" alt="千与千寻"></p><p>标准的 <code>HE</code> 故事，故事情节很精彩，主旨也很丰富。但是童话终究是童话。</p><p>比较深刻的一部分是关于无脸男。看电影前刚讨论过关于有的男生结婚前很好，但是结婚后会变坏；有的男生结婚前很坏，但是结婚后会变好。虽然变好变坏难以界定，但是仔细分析来说其变化无非出于内因和外因。无脸男只是一个容器，外界装入什么，就表现出什么。大浴场贪婪，其也就变得贪婪。钱婆婆和千寻善良，在她们的影响下他也不再贪婪。</p><p>这样来说，我们就很需要有非常强大的内心，和刚毅的坚守。像千寻一样，不被外界的贪婪干扰，再具体一点，就是保存本真。</p><p>是的，本真。忘记了自己的名字就忘记了自己是谁，忘记了自己的本真就会被别人控制，困扰。汤婆婆是这样来控制他人的。因此要记得自己的本心。</p><p>但是，世事无常，人生魔幻缤纷，能够保存自己本心的人少之又少，大抵到最后都拜倒在诱惑或者屈膝于生存。这样想来就有一种绝望感。</p><p>不过，宫崎骏像是给出了自己的答案，友情和爱情，千寻拯救无脸男，琥珀川和千寻相互救赎，最后事情都被解决，我们都有美好的未来。</p><p>然而，这仔细想来更让人有点失落，知己难以遇到，真爱更是如此，如果孤身一人看这部电影，初看很温馨，但是回过味来便很让人哭泣。带入千寻，或许当初掉进琥珀川的时候可能就被淹死了，闯进神明世界的时候就独自消失了，进到汤屋的时候就被变成了猪或者煤球。一切的一切都像是巧合，都只是童话。</p><p>这样去想又像是个消极主义者了，是我是消极主义者，还是世界影响着我让我变成了消极主义者？我是我，还是世界造就了我？</p><p>或许应该乐观点，自信点，宏大点。如果不能被理解，可以去理解他人；如果不能被救赎，去努力救赎他人。成为一个理想主义者，观察者和记录者。</p><hr><br><br><p>电影中的名字也挺有特色，汤婆婆喜欢钱却却姓汤，钱婆婆不痴迷钱却姓钱，无脸男有脸却无心；千寻千寻，寻找的既是自己，也是自己爱的人。每个人的名字都很有意义，我要取个什么名字？</p><br><br><br><hr><p>思考真的可以产生热量，刚刚还非常冷的手和胸膛，现在也火热了起来。</p>]]></content>
      
      
      <categories>
          
          <category> 影评 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>空山新雨后</title>
      <link href="/2025/01/20/%E7%A9%BA%E5%B1%B1%E6%96%B0%E9%9B%A8%E5%90%8E/"/>
      <url>/2025/01/20/%E7%A9%BA%E5%B1%B1%E6%96%B0%E9%9B%A8%E5%90%8E/</url>
      
        <content type="html"><![CDATA[<p><img src="/./assets/image.png" alt="image"></p><h1 id="空山新雨后"><a href="#空山新雨后" class="headerlink" title="空山新雨后"></a>空山新雨后</h1><blockquote><p>空山新雨后，天气晚来秋</p><p>明月松间照，清泉石上流</p></blockquote><p>山峰轻摆尾</p><p>卷下落花随流水</p><p>路过擦拭曾经 用你柔情 换我的眼泪</p><p>当爱恨都败退</p><p>没谢幕的人啊</p><p>井中月 举杯砸碎 佐一场宿醉</p><p>抽签的玫瑰</p><p>作熏香还(hai)能余味</p><p>猜测无解答案 算了满地 也是种浪费</p><p>我才终于明白</p><p>终于明白</p><p>不能被施舍的是爱</p><hr><p>取下褪漆的钗</p><p>就化作尘埃</p><p>喝多少暖身的酒</p><p>暖不了心口</p><p>待空山新雨后</p><p>放一叶小舟</p><p>载上无人问津的温柔</p><p>摆渡寻处去忘忧</p><p>抽签的玫瑰</p><p>作熏香还能余味</p><p>猜测无解答案 算了满地 也是种浪费</p><p>我才终于明白</p><p>终于明白</p><p>不能被施舍的是爱</p><p>取下褪漆的钗</p><p>就化作尘埃</p><p>喝多少暖身的酒</p><p>暖不了心口</p><p>待空山新雨后</p><p>放一叶小舟</p><p>载上无人问津的温柔</p><p>摆渡寻处去忘忧</p>]]></content>
      
      
      <categories>
          
          <category> Music </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ax650交叉编译ax-pipeline</title>
      <link href="/2024/06/19/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/"/>
      <url>/2024/06/19/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</url>
      
        <content type="html"><![CDATA[<h1 id="ax650交叉编译ax-pipeline"><a href="#ax650交叉编译ax-pipeline" class="headerlink" title="ax650交叉编译ax-pipeline"></a>ax650交叉编译ax-pipeline</h1><h2 id="编译前准备"><a href="#编译前准备" class="headerlink" title="编译前准备"></a>编译前准备</h2><ul><li><code>x86 Linux</code>系统，虚拟机或者实体机，推荐选择<code>Ubuntu 22.04</code></li><li>稳定网络环境(需要连接<code>github</code>)，若下载出现问题可参考<a href="#github%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E4%B8%8B%E8%BD%BD">此处</a></li><li>U盘</li><li>安装基础编译包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install build-essential libopencv-dev cmake</span><br></pre></td></tr></table></figure><h2 id="交叉编译"><a href="#交叉编译" class="headerlink" title="交叉编译"></a>交叉编译</h2><ul><li>拉取ax-pipeline源码及子模块</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recursive https://github.com/AXERA-TECH/ax-pipeline.git</span><br></pre></td></tr></table></figure><ul><li>下载sdk及设置650n_bsp_sdk版本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ax-pipeline</span><br><span class="line">./download_ax_bsp.sh ax650</span><br><span class="line">./switch_version_ax650.sh 1.45</span><br><span class="line"><span class="built_in">cd</span> ax650n_bsp_sdk</span><br><span class="line">wget https://github.com/ZHEQIUSHUI/assets/releases/download/ax650/drm.zip</span><br><span class="line"><span class="built_in">mkdir</span> third-party</span><br><span class="line">unzip drm.zip -d third-party</span><br><span class="line"><span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure><ul><li>下载opencv</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> 3rdparty</span><br><span class="line"><span class="built_in">cd</span> 3rdparty</span><br><span class="line">wget https://github.com/ZHEQIUSHUI/assets/releases/download/ax650/libopencv-4.5.5-aarch64.zip</span><br><span class="line">unzip libopencv-4.5.5-aarch64.zip</span><br></pre></td></tr></table></figure><ul><li>配置交叉编译器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://developer.arm.com/-/media/Files/downloads/gnu-a/9.2-2019.12/binrel/gcc-arm-9.2-2019.12-x86_64-aarch64-none-linux-gnu.tar.xz</span><br><span class="line">tar -xvf gcc-arm-9.2-2019.12-x86_64-aarch64-none-linux-gnu.tar.xz</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$PWD</span>/gcc-arm-9.2-2019.12-x86_64-aarch64-none-linux-gnu/bin/</span><br></pre></td></tr></table></figure><ul><li>源码编译</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ax-pipeline</span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake -DAXERA_TARGET_CHIP=AX650 -DBSP_MSP_DIR=<span class="variable">$PWD</span>/../ax650n_bsp_sdk/msp/out -DOpenCV_DIR=<span class="variable">$PWD</span>/../3rdparty/libopencv-4.5.5-aarch64/lib/cmake/opencv4 -DSIPY_BUILD=OFF -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=../toolchains/aarch64-none-linux-gnu.toolchain.cmake -DCMAKE_INSTALL_PREFIX=install ..</span><br><span class="line">make -j12</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><ul><li>获得bin文件如下所示</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">bin</span><br><span class="line">├── config</span><br><span class="line">│   ├── custom_model.json</span><br><span class="line">│   ├── dinov2.json</span><br><span class="line">│   ├── dinov2_depth.json</span><br><span class="line">│   ├── glpdepth.json</span><br><span class="line">│   ├── ppyoloe.json</span><br><span class="line">│   ├── scrfd.json</span><br><span class="line">│   ├── scrfd_recognition.json</span><br><span class="line">│   ├── yolo_nas.json</span><br><span class="line">│   ├── yolov5_seg.json</span><br><span class="line">│   ├── yolov5s.json</span><br><span class="line">│   ├── yolov5s_face.json</span><br><span class="line">│   ├── yolov5s_face_recognition.json</span><br><span class="line">│   ├── yolov6.json</span><br><span class="line">│   ├── yolov7.json</span><br><span class="line">│   ├── yolov7_face.json</span><br><span class="line">│   ├── yolov8.json</span><br><span class="line">│   ├── yolov8_pose.json</span><br><span class="line">│   └── yolox.json</span><br><span class="line">├── sample_demux_ivps_npu_hdmi_vo</span><br><span class="line">├── sample_demux_ivps_npu_rtsp</span><br><span class="line">├── sample_demux_ivps_npu_rtsp_hdmi_vo</span><br><span class="line">├── sample_multi_demux_ivps_npu_hdmi_vo</span><br><span class="line">├── sample_multi_demux_ivps_npu_multi_rtsp</span><br><span class="line">├── sample_multi_demux_ivps_npu_multi_rtsp_hdmi_vo</span><br><span class="line">├── sample_vin_ivps_npu_hdmi_vo</span><br><span class="line">└── sample_vin_ivps_npu_venc_rtsp</span><br></pre></td></tr></table></figure><h2 id="移动到开发板"><a href="#移动到开发板" class="headerlink" title="移动到开发板"></a>移动到开发板</h2><p>由于编译后文件较大，因此推荐使用U盘进行数据传输</p><ul><li><p>将编译后bin文件移动到U盘中</p></li><li><p>U盘插入板卡中</p></li><li><p>查看U盘所在分区</p></li></ul><p><img src="/./assets/image-20240619004815857.png" alt="image-20240619004815857"></p><p>如图所示，我的U盘所在分区为<code>/dev/sda1</code> (根据大小或者其他来判断)</p><ul><li>挂载到文件夹中(此处挂载到了<code>/mnt/usb</code>文件夹下)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /mnt/usb</span><br><span class="line">mount /dev/sda1 /mnt/usb</span><br></pre></td></tr></table></figure><p><em>可能会有以下提示，不影响</em></p><p><img src="/./assets/image-20240619005631945.png" alt="image-20240619005631945"></p><p>查看是否挂载</p><p><img src="/./assets/image-20240619005701612.png" alt="image-20240619005701612"></p><ul><li>移动文件到板卡中(此处创建了<code>~/data目录</code>，并将文件移动到了<code>~/data/</code>下)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/data</span><br><span class="line">cp /mnt/usb/bin ~/data -r</span><br></pre></td></tr></table></figure><ul><li>查看文件</li></ul><p><img src="/./assets/image-20240619005844205.png" alt="image-20240619005844205"></p><ul><li>运行默认示例，不传入模型参数(记得<code>kill fb_vo</code>进程)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/data/bin</span><br><span class="line">./sample_vin_ivps_npu_hdmi_vo</span><br></pre></td></tr></table></figure><ul><li>移除U盘</li></ul><p>卸载U盘</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umount /dev/sda1 /mnt/usb</span><br></pre></td></tr></table></figure><p>即可拔掉U盘</p><h2 id="github镜像加速下载"><a href="#github镜像加速下载" class="headerlink" title="github镜像加速下载"></a>github镜像加速下载</h2><ol><li><code>git</code>拉取<code>ax-pipeline</code>源码加速</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://kkgithub.com/AXERA-TECH/ax-pipeline.git</span><br><span class="line"><span class="built_in">cd</span> ax-pipeline</span><br></pre></td></tr></table></figure><p>修改<code>ax-pipeline</code>下<code>.gitmodules</code>文件， 将<code>url =</code>中所有<code>github.com</code>换为<code>kkgithub.com</code></p><p><strong>拉取子模块</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git submodule update --init</span><br><span class="line">./download_ax_bsp.sh ax650</span><br></pre></td></tr></table></figure><ol start="2"><li><code>wget</code>文件加速</li></ol><p>替换<code>wget</code>下载链接中<code>github.com</code>为<code>kkgithub.com</code></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>侧耳倾听——阅读、爱情与理想</title>
      <link href="/2023/08/25/%E4%BE%A7%E8%80%B3%E5%80%BE%E5%90%AC/"/>
      <url>/2023/08/25/%E4%BE%A7%E8%80%B3%E5%80%BE%E5%90%AC/</url>
      
        <content type="html"><![CDATA[<p><img src="/./assets/ceer.png" alt="img"></p><p>我喜欢上了你努力的样子，因此我也变得越加的努力吸引你的注意。</p><p>两个互相振奋的灵魂、一个变得更加优秀的约定、一份纯洁无暇的爱情。</p><p>就让这些种下未来的种子，在约定的时刻我们相见。</p><hr><p>想变得更加优秀，在未来的某个时间点上和她一起</p><p>便如此这般</p>]]></content>
      
      
      <categories>
          
          <category> 影评 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>萤火之森——终将别离的爱恋</title>
      <link href="/2023/08/23/%E8%90%A4%E7%81%AB%E4%B9%8B%E6%A3%AE/"/>
      <url>/2023/08/23/%E8%90%A4%E7%81%AB%E4%B9%8B%E6%A3%AE/</url>
      
        <content type="html"><![CDATA[<p><img src="/./assets/Yin.jpg" alt="img"></p><pre><code>时光终有一天会将我们分开，但是。即使如此，在那日降临之前，让我们一直在一起吧。</code></pre><p>如果我和爱的人无法触碰，无法拥抱，那么我大概是要发疯的。</p><p>然而如果触碰便意味着别离，那么失去或许是成全。</p><p>不过如同开头所说的那句话，我们终将分离，但是在我们仍未分离的时光里，快乐的生活着吧。</p><hr><p>若我是萤，面对终将分离的爱情时，我大概率是会离开的吧，不想面对，别离时的悲伤。</p><p>如果终将分离，倒不如让情还未深的时候结束，让痛苦来的更早些短暂些。</p><p>这是现在的我。</p>]]></content>
      
      
      <categories>
          
          <category> 影评 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用PyQt5开发应用程序总结</title>
      <link href="/2023/08/11/pyqt5/"/>
      <url>/2023/08/11/pyqt5/</url>
      
        <content type="html"><![CDATA[<h1 id="PyQt5-使用笔记"><a href="#PyQt5-使用笔记" class="headerlink" title="PyQt5 使用笔记"></a>PyQt5 使用笔记</h1><p>PyQt5 是一个用于创建图形用户界面(GUI)的 Python 框架，基于 Qt 库开发而来。它提供了丰富的工具和组件，使开发者能够轻松地创建各种强大的桌面应用程序。本文将介绍 PyQt5 的基本用法，并提供一些示例代码帮助你入门。</p><h2 id="安装-PyQt5"><a href="#安装-PyQt5" class="headerlink" title="安装 PyQt5"></a>安装 PyQt5</h2><p>首先，需要安装 PyQt5 模块。你可以使用 pip 命令来安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install PyQt5</span><br></pre></td></tr></table></figure><h2 id="创建一个基本的-PyQt5-窗口"><a href="#创建一个基本的-PyQt5-窗口" class="headerlink" title="创建一个基本的 PyQt5 窗口"></a>创建一个基本的 PyQt5 窗口</h2><p>在 PyQt5 中，你可以通过两种方法来创建窗口：</p><ol><li><p><strong>面向对象编程：</strong> 这种方法涉及创建一个继承自特定窗口类的新类，并在新类中重写需要的方法来配置界面和处理事件。这种方法更加面向对象，可以更好地组织和管理代码。</p></li><li><p><strong>直接编写代码：</strong> 这种方法涉及直接编写代码来创建窗口和组件，然后配置属性和信号槽等。这种方法更加直接，适用于一些简单的界面或快速原型开发。</p></li></ol><p>下面分别展示了这两种方法的示例：</p><h3 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow, QPushButton</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyWindow</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;My Window&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.button = QPushButton(<span class="string">&quot;Click me&quot;</span>, <span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.button.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">30</span>)</span><br><span class="line">        <span class="variable language_">self</span>.button.clicked.connect(<span class="variable language_">self</span>.on_button_click)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_button_click</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Button clicked&quot;</span>)</span><br><span class="line"></span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line">window = MyWindow()</span><br><span class="line">window.show()</span><br><span class="line">sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="直接编写代码"><a href="#直接编写代码" class="headerlink" title="直接编写代码"></a>直接编写代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow, QPushButton</span><br><span class="line"></span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line">window = QMainWindow()</span><br><span class="line">window.setWindowTitle(<span class="string">&quot;My Window&quot;</span>)</span><br><span class="line"></span><br><span class="line">button = QPushButton(<span class="string">&quot;Click me&quot;</span>, window)</span><br><span class="line">button.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">30</span>)</span><br><span class="line">button.clicked.connect(<span class="keyword">lambda</span>: <span class="built_in">print</span>(<span class="string">&quot;Button clicked&quot;</span>))</span><br><span class="line"></span><br><span class="line">window.show()</span><br><span class="line">sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>无论你选择哪种方法，都可以根据项目需求来灵活调整和扩展代码。如果界面较为复杂或需要更好的代码组织，建议使用面向对象编程。如果界面简单且直接，可以选择直接编写代码。</p><p>以下是一个使用面向对象编程简单的示例代码，展示了如何创建一个基本的 PyQt5 窗口：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyWindow</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;My PyQt5 Window&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setGeometry(<span class="number">100</span>, <span class="number">100</span>, <span class="number">800</span>, <span class="number">600</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    window = MyWindow()</span><br><span class="line">    window.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>在这个示例中，我们首先导入了必要的模块，然后创建了一个继承自 <code>QMainWindow</code> 的自定义窗口类 <code>MyWindow</code>。在 <code>__init__</code> 构造函数中，我们设置了窗口的标题和初始大小。最后，我们创建了一个应用对象并显示窗口。</p><h2 id="常用的-PyQt5-组件"><a href="#常用的-PyQt5-组件" class="headerlink" title="常用的 PyQt5 组件"></a>常用的 PyQt5 组件</h2><p>当使用 PyQt5 创建图形用户界面时，会涉及多种常用的组件，每个组件都有其特定的属性和用法。以下是一些常用组件的用法：</p><h3 id="QLabel（标签）"><a href="#QLabel（标签）" class="headerlink" title="QLabel（标签）"></a>QLabel（标签）</h3><p>标签用于显示文本或图像，可以用来展示信息、标题、说明等。常用属性和方法包括：</p><ul><li><code>setText(text)</code>：设置标签的文本内容。</li><li><code>text()</code>：获取标签的文本内容。</li><li><code>setPixmap(pixmap)</code>：设置标签显示的图像。</li><li><code>setAlignment(alignment)</code>：设置文本对齐方式。</li><li><code>setFont(font)</code>：设置字体。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QLabel</span><br><span class="line"></span><br><span class="line">label = QLabel(<span class="string">&quot;Hello, PyQt5&quot;</span>)</span><br><span class="line">label.setAlignment(Qt.AlignCenter)</span><br><span class="line">label.setFont(QFont(<span class="string">&quot;Arial&quot;</span>, <span class="number">12</span>, QFont.Bold))</span><br></pre></td></tr></table></figure><h3 id="QLineEdit（单行文本输入框）"><a href="#QLineEdit（单行文本输入框）" class="headerlink" title="QLineEdit（单行文本输入框）"></a>QLineEdit（单行文本输入框）</h3><p>单行文本输入框用于接收用户输入的文本，例如用户名、密码等。常用属性和方法包括：</p><ul><li><code>setText(text)</code>：设置文本框的初始文本。</li><li><code>text()</code>：获取用户输入的文本内容。</li><li><code>setPlaceholderText(text)</code>：设置提示文本。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QLineEdit</span><br><span class="line"></span><br><span class="line">line_edit = QLineEdit()</span><br><span class="line">line_edit.setPlaceholderText(<span class="string">&quot;Enter your name&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="QTextEdit（多行文本输入框）"><a href="#QTextEdit（多行文本输入框）" class="headerlink" title="QTextEdit（多行文本输入框）"></a>QTextEdit（多行文本输入框）</h3><p>多行文本输入框用于接收多行文本输入，支持富文本格式。常用属性和方法包括：</p><ul><li><code>setText(text)</code>：设置文本框的初始文本。</li><li><code>toPlainText()</code>：获取用户输入的纯文本内容。</li><li><code>insertHtml(html)</code>：插入富文本内容。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QTextEdit</span><br><span class="line"></span><br><span class="line">text_edit = QTextEdit()</span><br><span class="line">text_edit.insertHtml(<span class="string">&quot;&lt;b&gt;Hello&lt;/b&gt;, &lt;i&gt;PyQt5&lt;/i&gt;&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="QComboBox（下拉框）"><a href="#QComboBox（下拉框）" class="headerlink" title="QComboBox（下拉框）"></a>QComboBox（下拉框）</h3><p>下拉框提供了一组选项供用户选择。常用属性和方法包括：</p><ul><li><code>addItem(item)</code>：添加选项。</li><li><code>addItems(items)</code>：批量添加选项。</li><li><code>currentIndex()</code>：获取当前选中的选项索引。</li><li><code>currentText()</code>：获取当前选中的选项文本。</li><li><code>activated.connect(slot)</code>：连接选项激活的信号。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QComboBox</span><br><span class="line"></span><br><span class="line">combo_box = QComboBox()</span><br><span class="line">combo_box.addItem(<span class="string">&quot;Option 1&quot;</span>)</span><br><span class="line">combo_box.addItems([<span class="string">&quot;Option 2&quot;</span>, <span class="string">&quot;Option 3&quot;</span>])</span><br><span class="line">selected_index = combo_box.currentIndex()</span><br><span class="line">selected_text = combo_box.currentText()</span><br><span class="line">combo_box.activated.connect(on_combo_box_activated)</span><br></pre></td></tr></table></figure><h3 id="QPushButton（按钮）"><a href="#QPushButton（按钮）" class="headerlink" title="QPushButton（按钮）"></a>QPushButton（按钮）</h3><p>按钮用于触发特定操作或事件。常用属性和方法包括：</p><ul><li><code>setText(text)</code>：设置按钮显示的文本。</li><li><code>clicked.connect(slot)</code>：连接按钮点击事件的信号。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QPushButton</span><br><span class="line"></span><br><span class="line">button = QPushButton(<span class="string">&quot;Click me&quot;</span>)</span><br><span class="line">button.clicked.connect(on_button_click)</span><br></pre></td></tr></table></figure><h3 id="QCheckBox（复选框）"><a href="#QCheckBox（复选框）" class="headerlink" title="QCheckBox（复选框）"></a>QCheckBox（复选框）</h3><p>复选框用于表示一个二选一的选项。常用属性和方法包括：</p><ul><li><code>isChecked()</code>：检查复选框是否被选中。</li><li><code>text()</code>：获取复选框的文本内容。</li><li><code>toggled.connect(slot)</code>：连接复选框状态变化的信号。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QCheckBox</span><br><span class="line"></span><br><span class="line">check_box = QCheckBox(<span class="string">&quot;Check me&quot;</span>)</span><br><span class="line">checked = check_box.isChecked()</span><br><span class="line">check_box.toggled.connect(on_check_box_toggled)</span><br></pre></td></tr></table></figure><h3 id="QRadioButton（单选按钮）"><a href="#QRadioButton（单选按钮）" class="headerlink" title="QRadioButton（单选按钮）"></a>QRadioButton（单选按钮）</h3><p>单选按钮用于从多个选项中选择一个。常用属性和方法包括：</p><ul><li><code>isChecked()</code>：检查单选按钮是否被选中。</li><li><code>text()</code>：获取单选按钮的文本内容。</li><li><code>toggled.connect(slot)</code>：连接单选按钮状态变化的信号。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QRadioButton</span><br><span class="line"></span><br><span class="line">radio_button = QRadioButton(<span class="string">&quot;Option 1&quot;</span>)</span><br><span class="line">checked = radio_button.isChecked()</span><br><span class="line">radio_button.toggled.connect(on_radio_button_toggled)</span><br></pre></td></tr></table></figure><h3 id="QSlider（滑块）"><a href="#QSlider（滑块）" class="headerlink" title="QSlider（滑块）"></a>QSlider（滑块）</h3><p>滑块用于选择一个范围内的值。常用属性和方法包括：</p><ul><li><code>setRange(minimum, maximum)</code>：设置滑块的范围。</li><li><code>setValue(value)</code>：设置滑块的当前值。</li><li><code>value()</code>：获取滑块的当前值。</li><li><code>sliderMoved.connect(slot)</code>：连接滑块移动事件的信号。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QSlider</span><br><span class="line"></span><br><span class="line">slider = QSlider(Qt.Horizontal)</span><br><span class="line">slider.setRange(<span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line">slider.setValue(<span class="number">50</span>)</span><br><span class="line">slider.sliderMoved.connect(on_slider_moved)</span><br></pre></td></tr></table></figure><h3 id="QProgressBar（进度条）"><a href="#QProgressBar（进度条）" class="headerlink" title="QProgressBar（进度条）"></a>QProgressBar（进度条）</h3><p>进度条用于显示任务的进度。常用属性和方法包括：</p><ul><li><code>setRange(minimum, maximum)</code>：设置进度条的范围。</li><li><code>setValue(value)</code>：设置进度条的当前值。</li><li><code>value()</code>：获取进度条的当前值。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QProgressBar</span><br><span class="line"></span><br><span class="line">progress_bar = QProgressBar()</span><br><span class="line">progress_bar.setRange(<span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line">progress_bar.setValue(<span class="number">75</span>)</span><br></pre></td></tr></table></figure><h3 id="QSpinBox（数值输入框）"><a href="#QSpinBox（数值输入框）" class="headerlink" title="QSpinBox（数值输入框）"></a>QSpinBox（数值输入框）</h3><p>数值输入框用于输入整数值。常用属性和方法包括：</p><ul><li><code>setRange(minimum, maximum)</code>：设置数值输入框的范围。</li><li><code>setValue(value)</code>：设置数值输入框的当前值。</li><li><code>value()</code>：获取数值输入框的当前值。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QSpinBox</span><br><span class="line"></span><br><span class="line">spin_box = QSpinBox()</span><br><span class="line">spin_box.setRange(<span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line">spin_box.setValue(<span class="number">50</span>)</span><br></pre></td></tr></table></figure><h3 id="QDateTimeEdit（日期时间输入框）"><a href="#QDateTimeEdit（日期时间输入框）" class="headerlink" title="QDateTimeEdit（日期时间输入框）"></a>QDateTimeEdit（日期时间输入框）</h3><p>日期时间输入框用于输入日期和时间。常用属性和方法包括：</p><ul><li><code>setDateTime(datetime)</code>：设置日期时间输入框的日期时间。</li><li><code>dateTime()</code>：获取日期时间输入框的日期时间。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QDateTimeEdit</span><br><span class="line"></span><br><span class="line">date_time_edit = QDateTimeEdit()</span><br><span class="line">date_time_edit.setDateTime(QDateTime.currentDateTime())</span><br></pre></td></tr></table></figure><h3 id="QFileDialog（文件对话框）"><a href="#QFileDialog（文件对话框）" class="headerlink" title="QFileDialog（文件对话框）"></a>QFileDialog（文件对话框）</h3><p>文件对话框用于选择文件或目录。常用方法包括：</p><ul><li><code>getOpenFileName()</code>：打开文件选择对话框并返回选择的文件路径。</li><li><code>getSaveFileName()</code>：打开文件保存对话框并返回选择的文件路径。</li><li><code>getExistingDirectory()</code>：打开目录选择对话框并返回选择的目录路径。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QFileDialog</span><br><span class="line"></span><br><span class="line">file_path, _ = QFileDialog.getOpenFileName(<span class="literal">None</span>, <span class="string">&quot;Open File&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;All Files (*.*)&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="QMessageBox（消息框）"><a href="#QMessageBox（消息框）" class="headerlink" title="QMessageBox（消息框）"></a>QMessageBox（消息框）</h3><p>消息框用于显示提示、警告或错误信息。常用方法包括：</p><ul><li><code>information(parent, title, text)</code>：显示信息提示框。</li><li><code>warning(parent, title, text)</code>：显示警告提示框。</li><li><code>critical(parent, title, text)</code>：显示错误提示框。</li><li><code>question(parent, title, text)</code>：显示询问提示框。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QMessageBox</span><br><span class="line"></span><br><span class="line">QMessageBox.information(<span class="literal">None</span>, <span class="string">&quot;Info&quot;</span>, <span class="string">&quot;This is an information message.&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="布局管理"><a href="#布局管理" class="headerlink" title="布局管理"></a>布局管理</h2><p>在 PyQt5 中，布局管理用于自动排列和定位组件，以便适应不同窗口大小。以下是一些常用的布局类型和使用示例：</p><h3 id="QGridLayout（网格布局）"><a href="#QGridLayout（网格布局）" class="headerlink" title="QGridLayout（网格布局）"></a>QGridLayout（网格布局）</h3><p>网格布局将组件按照行和列的方式排列。常用方法包括：</p><ul><li><code>addWidget(widget, row, column, rowSpan, columnSpan)</code>：将组件添加到指定行列位置，可跨行列。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QGridLayout</span><br><span class="line"></span><br><span class="line">grid = QGridLayout()</span><br><span class="line">grid.addWidget(label, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">grid.addWidget(line_edit, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">grid.addWidget(text_edit, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="QVBoxLayout（垂直布局）"><a href="#QVBoxLayout（垂直布局）" class="headerlink" title="QVBoxLayout（垂直布局）"></a>QVBoxLayout（垂直布局）</h3><p>垂直布局将组件按垂直方向排列。常用方法包括：</p><ul><li><code>addWidget(widget)</code>：将组件按顺序添加到布局。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QVBoxLayout</span><br><span class="line"></span><br><span class="line">vbox = QVBoxLayout()</span><br><span class="line">vbox.addWidget(button1)</span><br><span class="line">vbox.addWidget(button2)</span><br></pre></td></tr></table></figure><h3 id="QHBoxLayout（水平布局）"><a href="#QHBoxLayout（水平布局）" class="headerlink" title="QHBoxLayout（水平布局）"></a>QHBoxLayout（水平布局）</h3><p>水平布局将组件按水平方向排列。常用方法包括：</p><ul><li><code>addWidget(widget)</code>：将组件按顺序添加到布局。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QHBoxLayout</span><br><span class="line"></span><br><span class="line">hbox = QHBoxLayout()</span><br><span class="line">hbox.addWidget(button1)</span><br><span class="line">hbox.addWidget(button2)</span><br></pre></td></tr></table></figure><p>这些是一些常用的 PyQt5 组件和布局，通过合理地使用它们，你可以创建出丰富多彩的图形用户界面。根据项目的需求，你可以灵活地选择合适的组件和布局方式。</p><p>布局管理使得窗口中的组件自动适应并排列，无需手动调整位置和大小。</p><h2 id="多线程与线程间通信"><a href="#多线程与线程间通信" class="headerlink" title="多线程与线程间通信"></a>多线程与线程间通信</h2><h3 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h3><p>在 PyQt5 中，可以使用 <code>QThread</code> 类来创建线程。为了创建一个自定义线程，需要继承 <code>QThread</code> 并重写其 <code>run</code> 方法，将耗时操作放在 <code>run</code> 方法中执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QThread</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span>(<span class="title class_ inherited__">QThread</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 耗时操作</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="在线程间传递信号"><a href="#在线程间传递信号" class="headerlink" title="在线程间传递信号"></a>在线程间传递信号</h3><p>在多线程应用中，线程之间的通信是常见的需求。PyQt5 提供了信号与槽机制来实现线程间的通信。可以通过自定义信号，在一个线程中发射信号，然后在另一个线程中连接该信号到槽函数来接收信号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QThread, pyqtSignal</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span>(<span class="title class_ inherited__">QThread</span>):</span><br><span class="line">    my_signal = pyqtSignal(<span class="built_in">str</span>)  <span class="comment"># 自定义信号，传递参数为 str 类型</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 耗时操作</span></span><br><span class="line">        result = <span class="string">&quot;耗时操作的结果&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.my_signal.emit(result)  <span class="comment"># 发射信号</span></span><br></pre></td></tr></table></figure><h3 id="主线程接收信号"><a href="#主线程接收信号" class="headerlink" title="主线程接收信号"></a>主线程接收信号</h3><p>主线程可以连接自定义信号的槽函数，以接收在子线程中发射的信号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.thread = MyThread()</span><br><span class="line">        <span class="variable language_">self</span>.init_ui()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_ui</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># ... 初始化界面 ...</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.thread.my_signal.connect(<span class="variable language_">self</span>.update_label)  <span class="comment"># 连接信号和槽函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_label</span>(<span class="params">self, result</span>):</span><br><span class="line">        <span class="comment"># 更新界面</span></span><br></pre></td></tr></table></figure><h3 id="安全退出子线程"><a href="#安全退出子线程" class="headerlink" title="安全退出子线程"></a>安全退出子线程</h3><p>为了确保线程的安全退出，可以在窗口关闭事件中停止子线程并等待其完成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="comment"># ... 其他代码 ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">closeEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.thread.isRunning():</span><br><span class="line">            <span class="variable language_">self</span>.thread.quit()  <span class="comment"># 停止线程</span></span><br><span class="line">            <span class="variable language_">self</span>.thread.wait()  <span class="comment"># 等待线程完成</span></span><br><span class="line">        event.accept()</span><br></pre></td></tr></table></figure><h3 id="进一步解释："><a href="#进一步解释：" class="headerlink" title="进一步解释："></a>进一步解释：</h3><ol><li><p><code>self.my_signal.emit(result)</code>：这行代码在子线程中发射了一个自定义信号 <code>my_signal</code>，并传递了参数 <code>result</code>。这个信号可以携带任意数量和类型的参数，这里我们传递了一个字符串 <code>result</code>。</p></li><li><p><code>self.thread.my_signal.connect(self.update_label)</code>：这行代码在主线程中连接了子线程发射的信号 <code>my_signal</code> 到主线程的槽函数 <code>update_label</code>。这样一旦子线程发射了信号，主线程就会调用 <code>update_label</code> 方法来处理这个信号。</p></li><li><p><code>def update_label(self, result):</code>：这是主线程中的槽函数。当子线程发射信号时，主线程会调用这个函数，并将子线程传递的参数 <code>result</code> 作为参数传递给这个函数。因此，<code>result</code> 确实代表了子线程传递的 <code>result</code>。</p></li><li><p>关于<code>def update_label(self, result):</code> 中的参数名<br>参数名只是一个标识符，它并不影响信号的传递和槽函数的调用。</p><p> 例如，你可以这样修改函数定义：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">update_label</span>(<span class="params">self, data</span>):</span><br><span class="line"><span class="comment"># 使用 data 参数进行处理</span></span><br></pre></td></tr></table></figure><p> 然后在连接信号时，也需要相应地修改：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">self</span>.thread.my_signal.connect(<span class="variable language_">self</span>.update_label)</span><br></pre></td></tr></table></figure><p> 只要信号和槽函数的参数类型匹配，无论参数名是什么，信号传递的参数都能够被成功传递给槽函数进行处理。</p></li></ol><h3 id="关于传递参数的类型"><a href="#关于传递参数的类型" class="headerlink" title="关于传递参数的类型"></a>关于传递参数的类型</h3><p>在 PyQt5 中，你可以使用自定义信号来传递多种类型的参数。除了 <code>str</code> 类型，还可以传递以下常用的参数类型：</p><ol><li><code>int</code>：整数类型。</li><li><code>float</code>：浮点数类型。</li><li><code>bool</code>：布尔类型。</li><li><code>list</code> 或 <code>tuple</code>：列表或元组类型，可以传递多个参数。</li><li><code>object</code>：Python 对象，可以传递任意类型的参数。</li></ol><p>需要注意的是，信号和槽函数的参数类型必须匹配，否则会引发错误。当然，你也可以使用 <code>pyqtSignal(object)</code> 来传递任意类型的参数，但在槽函数内部需要根据参数类型进行适当的处理。</p><p>以下是一个示例，展示了如何使用不同类型的参数传递自定义信号：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> pyqtSignal, QObject</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyObject</span>(<span class="title class_ inherited__">QObject</span>):</span><br><span class="line">    my_signal_int = pyqtSignal(<span class="built_in">int</span>)</span><br><span class="line">    my_signal_float = pyqtSignal(<span class="built_in">float</span>)</span><br><span class="line">    my_signal_bool = pyqtSignal(<span class="built_in">bool</span>)</span><br><span class="line">    my_signal_list = pyqtSignal(<span class="built_in">list</span>)</span><br><span class="line">    my_signal_object = pyqtSignal(<span class="built_in">object</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_signals</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.my_signal_int.emit(<span class="number">42</span>)</span><br><span class="line">        <span class="variable language_">self</span>.my_signal_float.emit(<span class="number">3.14</span>)</span><br><span class="line">        <span class="variable language_">self</span>.my_signal_bool.emit(<span class="literal">True</span>)</span><br><span class="line">        <span class="variable language_">self</span>.my_signal_list.emit([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">        <span class="variable language_">self</span>.my_signal_object.emit(<span class="string">&quot;Hello from signal!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_slot</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Received:&quot;</span>, data)</span><br><span class="line"></span><br><span class="line">obj = MyObject()</span><br><span class="line">obj.my_signal_int.connect(my_slot)</span><br><span class="line">obj.my_signal_float.connect(my_slot)</span><br><span class="line">obj.my_signal_bool.connect(my_slot)</span><br><span class="line">obj.my_signal_list.connect(my_slot)</span><br><span class="line">obj.my_signal_object.connect(my_slot)</span><br><span class="line"></span><br><span class="line">obj.send_signals()</span><br></pre></td></tr></table></figure><p>在上述示例中，我们定义了一个 <code>MyObject</code> 类，它包含了不同类型的自定义信号。然后，我们通过连接这些信号到同一个槽函数 <code>my_slot</code> 来展示如何传递不同类型的参数。在槽函数内部，我们可以根据参数的类型来进行相应的处理。</p><h3 id="多线程进阶"><a href="#多线程进阶" class="headerlink" title="多线程进阶"></a>多线程进阶</h3><p>当涉及多线程编程和线程间通信时，以下是一些重要的概念和技术</p><ol><li><p><strong>互斥锁和信号量</strong>：</p><p>互斥锁用于保护共享资源，以确保在任何时候只有一个线程可以访问资源。信号量用于限制同时访问资源的线程数量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QMutex, QSemaphore, QThread</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SharedResource</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.mutex = QMutex()  <span class="comment"># 创建互斥锁</span></span><br><span class="line">        <span class="variable language_">self</span>.semaphore = QSemaphore(<span class="number">3</span>)  <span class="comment"># 创建信号量，允许3个线程同时访问</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">access_resource</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.semaphore.acquire()  <span class="comment"># 获取信号量</span></span><br><span class="line">        <span class="variable language_">self</span>.mutex.lock()  <span class="comment"># 上锁</span></span><br><span class="line">        <span class="comment"># 访问和操作共享资源</span></span><br><span class="line">        <span class="variable language_">self</span>.mutex.unlock()  <span class="comment"># 解锁</span></span><br><span class="line">        <span class="variable language_">self</span>.semaphore.release()  <span class="comment"># 释放信号量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WorkerThread</span>(<span class="title class_ inherited__">QThread</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, resource</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.resource = resource</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.resource.access_resource()</span><br><span class="line"></span><br><span class="line">resource = SharedResource()</span><br><span class="line">threads = [WorkerThread(resource) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">    thread.start()</span><br></pre></td></tr></table></figure></li><li><p><strong>线程池</strong>：</p><p>线程池可以有效地管理和调度多个线程执行任务，避免频繁地创建和销毁线程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QThreadPool, QRunnable, Qt</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>(<span class="title class_ inherited__">QRunnable</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, task_id</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.task_id = task_id</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Task <span class="subst">&#123;self.task_id&#125;</span> is running in thread <span class="subst">&#123;<span class="built_in">int</span>(QThread.currentThreadId())&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">pool = QThreadPool.globalInstance()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    task = Task(i)</span><br><span class="line">    pool.start(task)</span><br></pre></td></tr></table></figure></li><li><p><strong>定时器和延迟</strong>：</p><p>使用定时器可以在一段时间后触发任务，避免阻塞线程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QTimer, pyqtSlot</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TimerExample</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.timer = QTimer()</span><br><span class="line">        <span class="variable language_">self</span>.timer.timeout.connect(<span class="variable language_">self</span>.on_timer_timeout)</span><br><span class="line">        <span class="variable language_">self</span>.timer.start(<span class="number">1000</span>)  <span class="comment"># 每秒触发一次</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @pyqtSlot()</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_timer_timeout</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Timer triggered&quot;</span>)</span><br><span class="line"></span><br><span class="line">example = TimerExample()</span><br></pre></td></tr></table></figure></li><li><p><strong>线程间通信的其他方式</strong>：</p><p>除了信号和槽函数，还可以使用队列来在线程之间传递数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QThread, pyqtSlot</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QueueExample</span>(<span class="title class_ inherited__">QThread</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.message_queue = queue.Queue()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            message = <span class="variable language_">self</span>.message_queue.get()</span><br><span class="line">            <span class="keyword">if</span> message == <span class="string">&quot;exit&quot;</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Received message: <span class="subst">&#123;message&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_message</span>(<span class="params">self, message</span>):</span><br><span class="line">        <span class="variable language_">self</span>.message_queue.put(message)</span><br><span class="line"></span><br><span class="line">example = QueueExample()</span><br><span class="line">example.start()</span><br><span class="line">example.send_message(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">example.send_message(<span class="string">&quot;World&quot;</span>)</span><br><span class="line">example.send_message(<span class="string">&quot;exit&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文介绍了如何使用 PyQt5 创建常见的 GUI 组件，包括标签、按钮、文本框、下拉框、复选框和绘图区域，以及如何使用布局管理来排列这些组件。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>应用以上方法，笔者试着写了一个简易串口调试助手 <a href="https://github.com/Snape-max/MA-SerialDebugger/">MA-SerialDebugger</a>，欢迎使用并提出改进意见。</p>]]></content>
      
      
      <categories>
          
          <category> PyQt5 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在MATLAB中使用微积分</title>
      <link href="/2022/06/05/%E5%BE%AE%E7%A7%AF%E5%88%86/"/>
      <url>/2022/06/05/%E5%BE%AE%E7%A7%AF%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h2 id="计算极限"><a href="#计算极限" class="headerlink" title="计算极限"></a>计算极限</h2><p>MATLAB提供计算极限的<code>limit</code>函数。在其最基本的形式中，<code>limit</code>函数将表达式作为参数，并在独立变量为零时找到表达式的极限。</p><p>例如，要计算函数<code>f(x)=(x^3 + 5)/(x^4 + 7)</code>的极限，因为<code>x</code>趋向于零。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">syms x</span><br><span class="line">limit((x^<span class="number">3</span> + <span class="number">5</span>)/(x^<span class="number">4</span> + <span class="number">7</span>))</span><br></pre></td></tr></table></figure><p>执行上面示例代码，得到以下结果 -</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Trial&gt;</span><span class="language-bash">&gt; syms x</span></span><br><span class="line">limit((x^3 + 5)/(x^4 + 7))</span><br><span class="line"></span><br><span class="line">ans =</span><br><span class="line"></span><br><span class="line">5/7</span><br></pre></td></tr></table></figure><p><code>limit</code>函数落在符号计算域; 需要使用<code>syms</code>函数来告诉MATLAB正在使用的符号变量。还可以计算函数的极限，因为变量趋向于除零之外的某个数字。要计算 -<br>$$<br>lim_{x\rightarrow a}(f(x))<br>$$</p><p>可使用带有参数的<code>limit</code>命令。第一个是表达式，第二个是数字 - <code>x</code>表示接近，这里它是<code>a</code>。</p><p>例如，要计算函数<code>f(x)=(x-3)/(x-1)</code>的极限，因为<code>x</code>倾向于<code>1</code>。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">limit((x - <span class="number">3</span>)/(x<span class="number">-1</span>),<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>执行上面示例代码，得到以下结果 -</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ans =</span><br><span class="line"> NaN</span><br></pre></td></tr></table></figure><h2 id="左右边界极限"><a href="#左右边界极限" class="headerlink" title="左右边界极限"></a>左右边界极限</h2><p>当函数对变量的某个特定值具有不连续性时，该点不存在极限。 换句话说，当<code>x = a</code>时，函数<code>f(x)</code>的极限具有不连续性，当<code>x</code>的值从左侧接近<code>x</code>时，<code>x</code>的值不等于<code>x</code>从右侧接近的极限值。</p><p>对于<code>x &lt;a</code>的值，左极限被定义为<code>x - &gt; a</code>的极限，从左侧即<code>x</code>接近<code>a</code>。 对于<code>x&gt; a</code>的值，右极限被定义为<code>x - &gt; a</code>的极限，从右边，即<code>x</code>接近<code>a</code>。 当左极限和右极限不相等时，极限不存在。</p><p>下面来看看一个函数 -</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f(x) = (x - 3)/|x - 3|</span><br></pre></td></tr></table></figure><p>下面将显示<br>$$<br>lim_{x\rightarrow a}f(x)<br>$$<br>不存在。MATLAB帮助我们以两种方式说明事实 -</p><ul><li>通过绘制函数图并显示不连续性。</li><li>通过计算极限并显示两者都不同。</li></ul><p>&#x3D;&#x3D;通过将字符串<code>“left”</code>和<code>“right”</code>作为最后一个参数传递给<code>limit</code>命令来计算左侧和右侧的极限。&#x3D;&#x3D;</p><p><strong>例子</strong></p><p>创建脚本文件并在其中键入以下代码 -</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = (x - <span class="number">3</span>)/<span class="built_in">abs</span>(x<span class="number">-3</span>);</span><br><span class="line">ezplot(f,[<span class="number">-1</span>,<span class="number">5</span>])</span><br><span class="line">l = limit(f,x,<span class="number">3</span>,<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line">r = limit(f,x,<span class="number">3</span>,<span class="string">&#x27;right&#x27;</span>)</span><br></pre></td></tr></table></figure><p>执行上面示例代码，得到以下结果 -</p><p><img src="/./assets/figure1.png"></p><p>显示以下输出结果 -</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Trial&gt;</span><span class="language-bash">&gt;</span> </span><br><span class="line"><span class="meta prompt_">Trial&gt;</span><span class="language-bash">&gt; f = (x - 3)/abs(x-3);</span></span><br><span class="line">ezplot(f,[-1,5])</span><br><span class="line">l = limit(f,x,3,&#x27;left&#x27;)</span><br><span class="line">r = limit(f,x,3,&#x27;right&#x27;)</span><br><span class="line"></span><br><span class="line">l =</span><br><span class="line"></span><br><span class="line">-1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r =</span><br><span class="line"></span><br><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="求导数"><a href="#求导数" class="headerlink" title="求导数"></a>求导数</h2><p>MATLAB提供用于计算符号导数的<code>diff</code>命令。 以最简单的形式，将要微分的功能传递给<code>diff</code>命令作为参数。</p><p>例如，计算函数的导数的方程式 -<br>$$<br>f(x) &#x3D; 3t^2 + 2t^{-2}<br>$$</p><p><strong>例子</strong></p><p>创建脚本文件并在其中键入以下代码 -</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">syms t</span><br><span class="line">f = <span class="number">3</span>*t^<span class="number">2</span> + <span class="number">2</span>*t^(<span class="number">-2</span>);</span><br><span class="line">diff(f)</span><br></pre></td></tr></table></figure><p>执行上面示例代码，得到以下结果 -</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Trial&gt;</span><span class="language-bash">&gt; syms t</span></span><br><span class="line">f = 3*t^2 + 2*t^(-2);</span><br><span class="line">diff(f)</span><br><span class="line"></span><br><span class="line">ans =</span><br><span class="line"></span><br><span class="line">6*t - 4/t^3</span><br></pre></td></tr></table></figure><h2 id="计算高阶导数"><a href="#计算高阶导数" class="headerlink" title="计算高阶导数"></a>计算高阶导数</h2><p>要计算函数<code>f</code>的较高导数，可使用<code>diff(f，n)</code>。</p><p>计算函数的二阶导数公式为 -<br>$$<br>y&#x3D;f(x)&#x3D;xe^{-3x}<br>$$</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f = x*<span class="built_in">exp</span>(<span class="number">-3</span>*x);</span><br><span class="line">diff(f, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>MATLAB执行上面代码将返回以下结果 -</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ans =</span><br><span class="line">9*x*exp(-3*x) - 6*exp(-3*x)</span><br></pre></td></tr></table></figure><h2 id="求解微分方程"><a href="#求解微分方程" class="headerlink" title="求解微分方程"></a>求解微分方程</h2><p>MATLAB提供了用于求解微分方程的<code>dsolve</code>命令。</p><p>找到单个方程的解的最基本的<code>dsolve</code>命令形式是 -</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dsolve(<span class="string">&#x27;eqn&#x27;</span>)</span><br></pre></td></tr></table></figure><p>其中<code>eqn</code>是用于输入方程式的文本串。</p><p>它返回一个符号解，其中包含一组任意常量，<code>MATLAB</code>标记<code>C1</code>，<code>C2</code>等等。<br>还可以为问题指定初始和边界条件，以逗号分隔的列表遵循以下公式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dsolve(&#x27;eqn&#x27;,&#x27;cond1&#x27;, &#x27;cond2&#x27;,…)</span><br></pre></td></tr></table></figure><p>为了使用<code>dsolve</code>命令，导数用<code>D</code>表示。例如，像<code>f&#39;(t)= -2 * f + cost(t)</code>这样的等式输入为 -</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;Df = -2*f + cos(t)&#x27;</span><br></pre></td></tr></table></figure><p>较高阶导数由<code>D</code>导数的顺序表示。</p><p>例如，方程<code>f&quot;(x) + 2f&#39;(x) = 5sin3x</code>应输入为 -</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;D2y + 2Dy = 5*sin(3*x)&#x27;</span><br></pre></td></tr></table></figure><p>下面来看一个一阶微分方程的简单例子：<code>y&#39;= 5y</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = dsolve(&#x27;Dy = 5*y&#x27;)</span><br></pre></td></tr></table></figure><p>MATLAB执行代码并返回以下结果 -</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s =</span><br><span class="line"> C2*exp(5*t)</span><br></pre></td></tr></table></figure><p>再来一个二阶微分方程的例子：<code>y“-y = 0，y(0)= -1，y&#39;(0)= 2</code>。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dsolve(<span class="string">&#x27;D2y - y = 0&#x27;</span>,<span class="string">&#x27;y(0) = -1&#x27;</span>,<span class="string">&#x27;Dy(0) = 2&#x27;</span>)</span><br></pre></td></tr></table></figure><p>MATLAB执行代码并返回以下结果 -</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ans =</span><br><span class="line"> exp(t)/2 - (3*exp(-t))/2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MATLAB </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB中的算数运算命令</title>
      <link href="/2022/06/05/%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/06/05/%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p><img src="/./assets/tab1.jpeg" alt="tab1"></p>]]></content>
      
      
      <categories>
          
          <category> MATLAB </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB中集合操作</title>
      <link href="/2022/06/03/%E9%9B%86%E5%90%88%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/06/03/%E9%9B%86%E5%90%88%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>函数</p><p>描述</p><p>intersect(A,B)</p><p>设置两个数组的交集；返回A和B所共有的值。返回的值按排序顺序排列。</p><p>intersect(A,B,’rows’)</p><p>将A和B的每一行作为单个实体处理，并返回A和B的公共行。返回的矩阵的行按排序顺序排列。</p><p>ismember(A,B)</p><p>返回与A大小相同的数组，包含1（true），其中A的元素在其他地方的B中找到，它返回0（false）。</p><p>ismember(A,B,’rows’)</p><p>将A和B的每一行作为单个实体处理，并返回一个包含1（true）的向量，其中矩阵A的行也是B的行；否则，它返回0（false）。</p><p>issorted(A)</p><p>如果A的元素按排序顺序返回逻辑1（true），否则返回逻辑0（false）。输入A可以是向量，也可以是N-by-1或1-by-N的字符串数组。如果A和sort（A）的输出相等，则A被认为是排序的。</p><p>issorted(A, ‘rows’)</p><p>如果二维矩阵A的行按排序顺序返回逻辑1（真），否则返回逻辑0（假）。 如果A和排序（A）的输出相等，则认为矩阵A被排序。</p><p>setdiff(A,B)</p><p>设置两个数组的差值；返回不在B中的值。返回数组中的值按排序顺序排列。</p><p>setdiff(A,B,’rows’)</p><p>将每一行A和B行作为单个实体处理，并返回一个不在B中的行。返回的矩阵的行按排序顺序排列。</p><p>“行”选项不支持单元格数组。</p><p>setxor</p><p>设置两个数组的异或</p><p>union</p><p>设置两个数组的并集</p><p>unique</p><p>数组中唯一的值</p>]]></content>
      
      
      <categories>
          
          <category> MATLAB </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB中函数详解</title>
      <link href="/2022/06/02/%E5%87%BD%E6%95%B0/"/>
      <url>/2022/06/02/%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><em>函数定义在单独的文件中，函数和函数的文件名应该是相同的。</em></p><p>函数语句的语法是：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> [out1,out2, ..., outN] = myfun(in1,in2,in3, ..., inN)</span><br></pre></td></tr></table></figure><p><code>in1,in2...</code>是输入<code>out1,out2...</code>输出</p><p>eg:<br>下述有个 mymax 函数，它需要五个数字作为参数并返回最大的数字。</p><p>建立函数文件，命名为 mymax.m 并输入下面的代码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> max = mymax(n1, n2, n3, n4, n5)</span><br><span class="line">%This <span class="keyword">function</span> calculates the maximum of the</span><br><span class="line">% five numbers given as input</span><br><span class="line">max =  n1;</span><br><span class="line"><span class="keyword">if</span>(n2 &gt; max)</span><br><span class="line">    max = n2;</span><br><span class="line">end</span><br><span class="line"><span class="keyword">if</span>(n3 &gt; max)</span><br><span class="line">   max = n3;</span><br><span class="line">end</span><br><span class="line"><span class="keyword">if</span>(n4 &gt; max)</span><br><span class="line">    max = n4;</span><br><span class="line">end</span><br><span class="line"><span class="keyword">if</span>(n5 &gt; max)</span><br><span class="line">    max = n5;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h2 id="MATLAB匿名函数"><a href="#MATLAB匿名函数" class="headerlink" title="MATLAB匿名函数"></a>MATLAB匿名函数</h2><p>一个匿名的函数就像是在传统的编程语言，在一个单一的 MATLAB 语句定义一个内联函数。</p><p>它由一个单一的 MATLAB 表达式和任意数量的输入和输出参数。</p><p>在MATLAB命令行或在一个函数或脚本可以定义一个匿名函数。</p><p>这种方式，可以创建简单的函数，而不必为他们创建一个文件。</p><p>建立一个匿名函数表达式的语法如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = @(arglist)expression</span><br></pre></td></tr></table></figure><h2 id="详细例子"><a href="#详细例子" class="headerlink" title="详细例子"></a>详细例子</h2><p>在这个例子中，我们将编写一个匿名函数 power，这将需要两个数字作为输入并返回第二个数字到第一个数字次幂。</p><p>在MATLAB中建立一个脚本文件，并输入下述代码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">power = @(x, n) x.^n;</span><br><span class="line">result1 = power(7, 3)</span><br><span class="line">result2 = power(49, 0.5)</span><br><span class="line">result3 = power(10, -10)</span><br><span class="line">result4 = power (4.5, 1.5)</span><br></pre></td></tr></table></figure><p>运行该文件时，显示结果：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">result1 =</span><br><span class="line">   343</span><br><span class="line">result2 =</span><br><span class="line">     7</span><br><span class="line">result3 =</span><br><span class="line">   1.0000e-10</span><br><span class="line">result4 =</span><br><span class="line">    9.5459</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MATLAB </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB中多项式详解</title>
      <link href="/2022/06/01/%E5%A4%9A%E9%A1%B9%E5%BC%8F/"/>
      <url>/2022/06/01/%E5%A4%9A%E9%A1%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><em><strong>MATLAB表示多项式为包含由下降幂排列的系数的行向量。</strong></em></p><h2 id="计算多项式的值"><a href="#计算多项式的值" class="headerlink" title="计算多项式的值"></a>计算多项式的值</h2><p><code>polyval()</code>函数<br><strong>eg:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p = [<span class="number">1</span> <span class="number">7</span> <span class="number">0</span> -<span class="number">5</span> <span class="number">9</span>];</span><br><span class="line">polyval(p,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p><code>polyvalm()</code>函数用于评估计算矩阵多项式<br><strong>eg:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p = [<span class="number">1</span> <span class="number">7</span> <span class="number">0</span> -<span class="number">5</span> <span class="number">9</span>]; </span><br><span class="line">X = [<span class="number">1</span> <span class="number">2</span> -<span class="number">3</span> <span class="number">4</span>; <span class="number">2</span> -<span class="number">5</span> <span class="number">6</span> <span class="number">3</span>; <span class="number">3</span> <span class="number">1</span> <span class="number">0</span> <span class="number">2</span>; <span class="number">5</span> -<span class="number">7</span> <span class="number">3</span> <span class="number">8</span>]; </span><br><span class="line">polyvalm(p, X) </span><br></pre></td></tr></table></figure><h2 id="计算多项式的根"><a href="#计算多项式的根" class="headerlink" title="计算多项式的根"></a>计算多项式的根</h2><p><code>roots</code>函数计算多项式的根。 例如，要计算多项式<code>p</code>的根，可参考以下语法 -</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p = [<span class="number">1</span> <span class="number">7</span> <span class="number">0</span>  <span class="number">-5</span> <span class="number">9</span>];</span><br><span class="line">r = roots(p)</span><br></pre></td></tr></table></figure><p><code>poly</code>函数是<code>roots</code>函数的逆，并返回到多项式系数。 例如 -</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p = [<span class="number">1</span> <span class="number">7</span> <span class="number">0</span>  <span class="number">-5</span> <span class="number">9</span>];</span><br><span class="line">r = roots(p)</span><br><span class="line">p2 = poly(r)</span><br></pre></td></tr></table></figure><p>MATLAB执行上述代码语句返回以下结果 -</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Trial&gt;</span><span class="language-bash">&gt; p = [1 7 0  -5 9];</span></span><br><span class="line">r = roots(p)</span><br><span class="line">p2 = poly(r)</span><br><span class="line"></span><br><span class="line">r =</span><br><span class="line"></span><br><span class="line">  -6.8661 + 0.0000i</span><br><span class="line">  -1.4247 + 0.0000i</span><br><span class="line">   0.6454 + 0.7095i</span><br><span class="line">   0.6454 - 0.7095i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p2 =</span><br><span class="line"></span><br><span class="line">    1.0000    7.0000    0.0000   -5.0000    9.0000</span><br></pre></td></tr></table></figure><h2 id="多项式曲线拟合"><a href="#多项式曲线拟合" class="headerlink" title="多项式曲线拟合"></a>多项式曲线拟合</h2><p><code>polyfit</code>函数用来查找一个多项式的系数，它符合最小二乘法中的一组数据。 如果<code>x</code>和<code>y</code>包含要拟合到<code>n</code>度多项式的<code>x</code>和<code>y</code>数据的两个向量，则得到通过拟合数据的多项式，参考代码 -</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p = polyfit(x,y,n)</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><p>创建脚本文件并键入以下代码 -</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]; y = [<span class="number">5.5</span> <span class="number">43.1</span> <span class="number">128</span> <span class="number">290.7</span> <span class="number">498.4</span> <span class="number">978.67</span>];  <span class="comment">%data</span></span><br><span class="line">p = polyfit(x,y,<span class="number">4</span>)   <span class="comment">%get the polynomial</span></span><br><span class="line"><span class="comment">% Compute the values of the polyfit estimate over a finer range, </span></span><br><span class="line"><span class="comment">% and plot the estimate over the real data values for comparison:</span></span><br><span class="line">x2 = <span class="number">1</span>:<span class="number">.1</span>:<span class="number">6</span>;          </span><br><span class="line">y2 = polyval(p,x2);</span><br><span class="line"><span class="built_in">plot</span>(x,y,<span class="string">&#x27;o&#x27;</span>,x2,y2)</span><br><span class="line">grid on</span><br></pre></td></tr></table></figure><p>MATLAB执行上述代码语句返回以下结果 -</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Trial&gt;</span><span class="language-bash">&gt; x = [1 2 3 4 5 6]; y = [5.5 43.1 128 290.7 498.4 978.67];  %data</span></span><br><span class="line">p = polyfit(x,y,4)   %get the polynomial</span><br><span class="line"><span class="meta prompt_">% </span><span class="language-bash">Compute the values of the polyfit estimate over a finer range,</span> </span><br><span class="line"><span class="meta prompt_">% </span><span class="language-bash">and plot the estimate over the real data values <span class="keyword">for</span> comparison:</span></span><br><span class="line">x2 = 1:.1:6;          </span><br><span class="line">y2 = polyval(p,x2);</span><br><span class="line">plot(x,y,&#x27;o&#x27;,x2,y2)</span><br><span class="line">grid on</span><br><span class="line"></span><br><span class="line">p =</span><br><span class="line"></span><br><span class="line">    4.1056  -47.9607  222.2598 -362.7453  191.1250</span><br></pre></td></tr></table></figure><p>同时还输出一个图形 -</p><p><img src="http://www.yiibai.com/uploads/images/201710/0810/631081057_19222.png"></p>]]></content>
      
      
      <categories>
          
          <category> MATLAB </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB中矩阵的使用</title>
      <link href="/2022/06/01/%E7%9F%A9%E9%98%B5/"/>
      <url>/2022/06/01/%E7%9F%A9%E9%98%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="创建矩阵"><a href="#创建矩阵" class="headerlink" title="创建矩阵"></a>创建矩阵</h2><p>在MATLAB中创建矩阵有以下规则：  </p><ul><li>矩阵元素必须在 “**[ ]**” 内；</li><li>矩阵的同行元素之间用空格（或 “**,**”）隔开；</li><li>矩阵的行与行之间用 “**;**”（或回车符）隔开；</li><li>矩阵的元素可以是数值、变量、表达式或函数；</li><li>矩阵的尺寸不必预先定义。</li></ul><h2 id="矩阵索引"><a href="#矩阵索引" class="headerlink" title="矩阵索引"></a>矩阵索引</h2><p>如果要引用 mth 行和 nth 列的一个元素，写法如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mx(m, n);</span><br></pre></td></tr></table></figure><p>索引整列</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [ 1 2 3 4 5; 2 3 4 5 6; 3 4 5 6 7; 4 5 6 7 8];</span><br><span class="line">v = a(:,4)</span><br></pre></td></tr></table></figure><p>返回</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v =</span><br><span class="line">     4</span><br><span class="line">     5</span><br><span class="line">     6</span><br><span class="line">     7</span><br></pre></td></tr></table></figure><p>矩阵赋值</p>]]></content>
      
      
      <categories>
          
          <category> MATLAB </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB入门</title>
      <link href="/2022/05/16/Matlab%20%E5%85%A5%E9%97%A8/"/>
      <url>/2022/05/16/Matlab%20%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h1><p><strong>列向量</strong> x &#x3D; [1 ; 2  ; 3 ; 4 ;  5]<br>以分号分隔每一列</p><p><strong>行向量</strong>x &#x3D; [1 2 3 4 5]或者[1,2,3,4,5]<br>以空格或者逗号分隔</p><p><strong>矩阵</strong>x &#x3D; [1 2 3;4 5 6;7 8 9]</p><h1 id="Matlab运算符"><a href="#Matlab运算符" class="headerlink" title="Matlab运算符"></a>Matlab运算符</h1><table><thead><tr><th align="center">运算符</th><th align="center">目的</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">加法运算符</td></tr><tr><td align="center">-</td><td align="center">减法运算符</td></tr><tr><td align="center">*</td><td align="center">标量和矩阵乘法</td></tr><tr><td align="center">*</td><td align="center">标量和矩阵乘法</td></tr><tr><td align="center">^</td><td align="center">标量和矩阵求幂</td></tr><tr><td align="center">.^</td><td align="center">数组求幂</td></tr><tr><td align="center">\</td><td align="center">矩阵左除</td></tr><tr><td align="center">&#x2F;</td><td align="center">矩阵右除</td></tr><tr><td align="center">.\</td><td align="center">阵列左除</td></tr><tr><td align="center">.&#x2F;</td><td align="center">阵列右除</td></tr><tr><td align="center">:</td><td align="center">向量生成；子阵列提取</td></tr><tr><td align="center">.</td><td align="center">点乘运算，搭配使用</td></tr><tr><td align="center">…</td><td align="center">续行符</td></tr><tr><td align="center">,</td><td align="center">分行符，结果不显示</td></tr><tr><td align="center">;</td><td align="center">语句结束；分行符（结果显示）</td></tr><tr><td align="center">%</td><td align="center">注释符</td></tr><tr><td align="center">_</td><td align="center">引用和转置符</td></tr><tr><td align="center">._</td><td align="center">非共轭转置</td></tr><tr><td align="center">()</td><td align="center">下标运算；参数定义</td></tr><tr><td align="center"><strong>Matlab特殊变量与常量</strong></td><td align="center"></td></tr><tr><td align="center">Name</td><td align="center">Meaning</td></tr><tr><td align="center">:—–:</td><td align="center">:—-:</td></tr><tr><td align="center">ans</td><td align="center">计算结果的变量名</td></tr><tr><td align="center">eps</td><td align="center">浮点数的相对误差</td></tr><tr><td align="center">i,j</td><td align="center">虚数单位，$i^2 &#x3D; j^2 &#x3D; -1$</td></tr><tr><td align="center">inf</td><td align="center">无穷大</td></tr><tr><td align="center">NaN</td><td align="center">不定值</td></tr><tr><td align="center">pi</td><td align="center">圆周率</td></tr><tr><td align="center"><strong>Matlab命令</strong></td><td align="center"></td></tr><tr><td align="center">命令</td><td align="center">作用</td></tr><tr><td align="center">:—:</td><td align="center">:—:</td></tr><tr><td align="center">clc</td><td align="center">清除命令窗口</td></tr><tr><td align="center">clear</td><td align="center">从内存中删除变量</td></tr><tr><td align="center">exist</td><td align="center">检查存在的文件或变量</td></tr><tr><td align="center">global</td><td align="center">声明全局变量</td></tr><tr><td align="center">disp</td><td align="center">显示一个数组或字符串的内容</td></tr><tr><td align="center">fscanf</td><td align="center">阅读从文件格式的数据</td></tr><tr><td align="center">format</td><td align="center">控制屏幕显示的格式</td></tr><tr><td align="center">fprintf</td><td align="center">格式化输出屏幕或文件</td></tr><tr><td align="center">input</td><td align="center">显示并的等待输出</td></tr><tr><td align="center">;</td><td align="center">禁止显示网版印刷&#x3D;&#x3D;？&#x3D;&#x3D;</td></tr></tbody></table><p><strong>运算命令</strong></p><table><thead><tr><th align="center">命令</th><th align="center">作用&#x2F;目的</th></tr></thead><tbody><tr><td align="center">cat</td><td align="center">连接数组</td></tr><tr><td align="center">find</td><td align="center">查找非零元素的索引</td></tr><tr><td align="center">length</td><td align="center">计算元素数量</td></tr><tr><td align="center">linspace</td><td align="center">创建间隔向量</td></tr><tr><td align="center">logspace</td><td align="center">创建对数间隔向量</td></tr><tr><td align="center">max</td><td align="center">返回最大元素</td></tr><tr><td align="center">min</td><td align="center">返回最小元素</td></tr><tr><td align="center">prod</td><td align="center">计算数组元素的连乘积</td></tr><tr><td align="center">reshape</td><td align="center">重新调整矩阵的行数、列数、维数</td></tr><tr><td align="center">size</td><td align="center">计算数组大小</td></tr><tr><td align="center">sort</td><td align="center">排序每个列</td></tr><tr><td align="center">sum</td><td align="center">每列相加</td></tr><tr><td align="center">eye</td><td align="center">创建一个单位矩阵</td></tr><tr><td align="center">ones</td><td align="center">生成全1矩阵</td></tr><tr><td align="center">zeros</td><td align="center">生成零矩阵</td></tr><tr><td align="center">cross</td><td align="center">计算矩阵交叉乘积</td></tr><tr><td align="center">dot</td><td align="center">计算矩阵点积</td></tr><tr><td align="center">det</td><td align="center">计算数组的行列式</td></tr><tr><td align="center">inv</td><td align="center">计算矩阵的逆</td></tr><tr><td align="center">pinv</td><td align="center">计算矩阵的伪逆</td></tr><tr><td align="center">rank</td><td align="center">计算矩阵的秩</td></tr><tr><td align="center">rref</td><td align="center">将矩阵化成行最简形</td></tr><tr><td align="center">cell</td><td align="center">创建单元数组</td></tr><tr><td align="center">celldisp</td><td align="center">显示单元数组</td></tr><tr><td align="center">cellplot</td><td align="center">显示单元数组的图形表示</td></tr><tr><td align="center">num2cell</td><td align="center">将数值阵列转化为异质阵列</td></tr><tr><td align="center">deal</td><td align="center">匹配输入和输出列表</td></tr><tr><td align="center">iscell</td><td align="center">判断是否为元胞类型</td></tr></tbody></table><h2 id="MATLAB绘图命令"><a href="#MATLAB绘图命令" class="headerlink" title="MATLAB绘图命令"></a>MATLAB绘图命令</h2><table><thead><tr><th align="center">命令</th><th align="center">作用&#x2F;目的</th></tr></thead><tbody><tr><td align="center">axis</td><td align="center">人工选择坐标轴尺寸</td></tr><tr><td align="center">fplot</td><td align="center">智能绘图功能</td></tr><tr><td align="center">grid</td><td align="center">显示网格线</td></tr><tr><td align="center">plot</td><td align="center">生成XY图</td></tr><tr><td align="center">print</td><td align="center">打印或绘图到文件</td></tr><tr><td align="center">title</td><td align="center">把文字置于顶部</td></tr><tr><td align="center">xlabel</td><td align="center">将文本标签添加到x轴</td></tr><tr><td align="center">ylabel</td><td align="center">将文本标签添加到y轴</td></tr><tr><td align="center">axes</td><td align="center">创建轴对象</td></tr><tr><td align="center">close</td><td align="center">关闭当前的绘图</td></tr><tr><td align="center">close all</td><td align="center">关闭所有绘图</td></tr><tr><td align="center">figure</td><td align="center">打开一个新的图形窗口</td></tr><tr><td align="center">gtext</td><td align="center">通过鼠标在指定位置放注文</td></tr><tr><td align="center">hold</td><td align="center">保持当前图形</td></tr><tr><td align="center">legend</td><td align="center">鼠标放置图例</td></tr><tr><td align="center">refresh</td><td align="center">重新绘制当前图形窗口</td></tr><tr><td align="center">set</td><td align="center">指定对象的属性，如轴</td></tr><tr><td align="center">subplot</td><td align="center">在子窗口中创建图</td></tr><tr><td align="center">text</td><td align="center">在图上做标记</td></tr><tr><td align="center">bar</td><td align="center">创建条形图</td></tr><tr><td align="center">loglog</td><td align="center">创建双对数图</td></tr><tr><td align="center">polar</td><td align="center">创建极坐标图像</td></tr><tr><td align="center">semilogx</td><td align="center">创建半对数图（对数横坐标）</td></tr><tr><td align="center">semilogy</td><td align="center">创建半对数图（对数纵坐标）</td></tr><tr><td align="center">stairs</td><td align="center">创建阶梯图</td></tr><tr><td align="center">stem</td><td align="center">创建针状图</td></tr><tr><td align="center"><strong>数据类型转换函数</strong></td><td align="center"></td></tr></tbody></table><p><code>a2b()</code> <code>a</code>是要转换的数据类型，<code>b</code>是要转化为的类型</p><p><strong>数据类型确定函数</strong></p><p><code>isa()</code> a是要确定的数据类型</p><p><strong>运算符</strong><br>&#x3D;&#x3D;~&#x3D; 不等于&#x3D;&#x3D;</p><p><strong>操作符</strong></p><p>描述</p><ul><li></li></ul><p>加法或一元加号。A + B将A和B。 A和B必须具有相同的尺寸，除非一个是一个标量。一个标量，可以被添加到任何大小的矩阵。</p><ul><li></li></ul><p>减法或一元减号。A - B，减去B从A和B必须具有相同的大小，除非是一个标量。可以从任意大小的矩阵中减去一个标量。</p><ul><li></li></ul><p>矩阵乘法；是一个更精确的矩阵A和B的线性代数积，</p><p>矩阵乘法对于非纯量A和B，列一个数必须等于B.标量可以乘以一个任意大小的矩阵的行数。</p><p>.*</p><p>数组的乘法；A.*B是数组A和B的元素积，A和B必须具有相同的大小，除非A、B中有一个是标量。  </p><p>&#x2F;</p><p>斜线或矩阵右除法；B&#x2F;A与B * inv（A）大致相同。更确切地说：</p><p> B&#x2F;A &#x3D; (A’B’)’</p><p>.&#x2F;</p><p>矩阵右除法；矩阵A与矩阵B相应元素相除（A、B为同纬度的矩阵）  </p><p>\</p><p>反斜杠或矩阵左除；如果A是一个方阵，AB是大致相同的INV（A）* B，除非它是以不同的方式计算。如果A是一个n*n的矩阵，B是一个n组成的列向量，或是由若干这样的列的矩阵，则X &#x3D; AB 是方程 AX &#x3D; B ，如果A严重缩小或者几乎为单数，则显示警告消息。</p><p>.\</p><p>数组左除法；A. B是元素B（i，j）&#x2F;A（i，j）的矩阵。A和B必须具有相同的大小，除非其中一个是标量。  </p><p>^</p><p>矩阵的幂。X^P是X到幂P，如果p是标量；如果p是一个整数，则通过重复平方计算功率。如果整数为负数，X首先反转。对P值的计算，涉及到特征值和特征向量，即如果[ D ] &#x3D; V，EIG（x），那么X^P &#x3D; V * D.^P &#x2F; V。  </p><p>.^</p><p>A.^B：A的每个元素的B次幂（A、B为同纬度的矩阵）  </p><p>‘</p><p>矩阵的转置；A’是复数矩阵A的线性代数转置，这是复共轭转置。  </p><p>.’</p><p>数组的转置；A’是数组A的转置，对于复数矩阵，这不涉及共轭。</p>]]></content>
      
      
      <categories>
          
          <category> MATLAB </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
