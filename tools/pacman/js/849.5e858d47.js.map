{"version":3,"file":"js/849.5e858d47.js","mappings":"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","sources":["webpack://astar/../../../../src/rendering/high-shader/shader-bits/textureBit.ts","webpack://astar/../../../../../../src/rendering/renderers/gl/shader/program/ensureAttributes.ts","webpack://astar/../../../../../src/rendering/renderers/gpu/state/GpuStencilModesToPixi.ts","webpack://astar/../../../../../src/rendering/renderers/shared/buffer/BufferResource.ts","webpack://astar/../../../../../src/rendering/renderers/shared/renderTarget/RenderTarget.ts","webpack://astar/../../../../../src/rendering/renderers/gpu/renderTarget/calculateProjection.ts","webpack://astar/../../../../../src/rendering/renderers/shared/renderTarget/isRenderingToScreen.ts","webpack://astar/../../../../../src/rendering/renderers/shared/renderTarget/RenderTargetSystem.ts","webpack://astar/../../../../../src/rendering/renderers/shared/shader/UboSystem.ts","webpack://astar/../../../../../../src/rendering/renderers/shared/shader/utils/createUboSyncFunction.ts","webpack://astar/../../../../../../src/rendering/renderers/shared/shader/utils/uboSyncFunctions.ts","webpack://astar/../../../../../../src/rendering/renderers/shared/shader/utils/uniformParsers.ts","webpack://astar/../../../src/scene/container/CustomRenderPipe.ts","webpack://astar/../../../../src/scene/container/utils/executeInstructions.ts","webpack://astar/../../../src/scene/container/RenderGroupPipe.ts","webpack://astar/../../../../src/scene/container/utils/buildInstructions.ts","webpack://astar/../../../../src/scene/container/utils/collectRenderGroups.ts","webpack://astar/../../../../src/scene/container/utils/updateRenderGroupTransforms.ts","webpack://astar/../../../../src/scene/container/utils/validateRenderables.ts","webpack://astar/../../../src/scene/container/RenderGroupSystem.ts","webpack://astar/../../../src/scene/sprite/SpritePipe.ts","webpack://astar/../../../../src/rendering/batcher/shared/BatcherPipe.ts","webpack://astar/../../src/filters/Filter.ts","webpack://astar/../../../src/filters/mask/MaskFilter.ts","webpack://astar/../../../../src/rendering/mask/alpha/AlphaMaskPipe.ts","webpack://astar/../../../../src/rendering/mask/color/ColorMaskPipe.ts","webpack://astar/../../../../src/rendering/mask/stencil/StencilMaskPipe.ts","webpack://astar/../../../../../src/rendering/renderers/shared/background/BackgroundSystem.ts","webpack://astar/../../../../../src/rendering/renderers/shared/blendModes/BlendModePipe.ts","webpack://astar/../../../../../src/rendering/renderers/shared/extract/ExtractSystem.ts","webpack://astar/../../../../../src/rendering/renderers/shared/texture/RenderTexture.ts","webpack://astar/../../../../../src/rendering/renderers/shared/extract/GenerateTextureSystem.ts","webpack://astar/../../../../../src/rendering/renderers/shared/renderTarget/GlobalUniformSystem.ts","webpack://astar/../../src/utils/sayHello.ts","webpack://astar/../../../../../src/rendering/renderers/shared/startup/HelloSystem.ts","webpack://astar/../../../../../src/rendering/renderers/shared/texture/TextureGCSystem.ts","webpack://astar/../../../../../src/rendering/renderers/shared/view/ViewSystem.ts","webpack://astar/../../../../../src/rendering/renderers/shared/system/SharedSystems.ts","webpack://astar/../../../../../../src/rendering/renderers/shared/texture/utils/getCanvasTexture.ts"],"sourcesContent":["export const textureBit = {\n    name: 'texture-bit',\n    vertex: {\n        header: /* wgsl */`\n\n        struct TextureUniforms {\n            uTextureMatrix:mat3x3<f32>,\n        }\n\n        @group(2) @binding(2) var<uniform> textureUniforms : TextureUniforms;\n        `,\n        main: /* wgsl */`\n            uv = (textureUniforms.uTextureMatrix * vec3(uv, 1.0)).xy;\n        `\n    },\n    fragment: {\n        header: /* wgsl */`\n            @group(2) @binding(0) var uTexture: texture_2d<f32>;\n            @group(2) @binding(1) var uSampler: sampler;\n\n         \n        `,\n        main: /* wgsl */`\n            outColor = textureSample(uTexture, uSampler, vUV);\n        `\n    }\n};\n\nexport const textureBitGl = {\n    name: 'texture-bit',\n    vertex: {\n        header: /* glsl */`\n            uniform mat3 uTextureMatrix;\n        `,\n        main: /* glsl */`\n            uv = (uTextureMatrix * vec3(uv, 1.0)).xy;\n        `\n    },\n    fragment: {\n        header: /* glsl */`\n        uniform sampler2D uTexture;\n\n         \n        `,\n        main: /* glsl */`\n            outColor = texture(uTexture, vUV);\n        `\n    }\n};\n\n","import { warn } from '../../../../../utils/logging/warn';\nimport { getAttributeInfoFromFormat } from '../../../shared/geometry/utils/getAttributeInfoFromFormat';\n\nimport type { Geometry } from '../../../shared/geometry/Geometry';\nimport type { ExtractedAttributeData } from './extractAttributesFromGlProgram';\n\n/**\n * This function looks at the attribute information provided to the geometry and attempts\n * to fill in an gaps. WE do this by looking at the extracted data from the shader and\n * making best guesses.\n *\n * Most of th etime users don't need to provide all the attribute info beyond the data itself, so we\n * can fill in the gaps for them. If you are using attributes in a more advanced way, you can\n * don't forget to add all the info at creation!\n * @param geometry - the geometry to ensure attributes for\n * @param extractedData - the extracted data from the shader\n */\nexport function ensureAttributes(\n    geometry: Geometry,\n    extractedData: Record<string, ExtractedAttributeData>\n): void\n{\n    for (const i in geometry.attributes)\n    {\n        const attribute = geometry.attributes[i];\n        const attributeData = extractedData[i];\n\n        if (attributeData)\n        {\n            attribute.location ??= attributeData.location;\n            attribute.format ??= attributeData.format;\n            attribute.offset ??= attributeData.offset;\n            attribute.instance ??= attributeData.instance;\n        }\n        else\n        {\n            // eslint-disable-next-line max-len\n            warn(`Attribute ${i} is not present in the shader, but is present in the geometry. Unable to infer attribute details.`);\n        }\n    }\n\n    ensureStartAndStride(geometry);\n}\n\nfunction ensureStartAndStride(geometry: Geometry): void\n{\n    const { buffers, attributes } = geometry;\n\n    const tempStride: Record<string, number> = {};\n    const tempStart: Record<string, number> = {};\n\n    for (const j in buffers)\n    {\n        const buffer = buffers[j];\n\n        tempStride[buffer.uid] = 0;\n        tempStart[buffer.uid] = 0;\n    }\n\n    for (const j in attributes)\n    {\n        const attribute = attributes[j];\n\n        tempStride[attribute.buffer.uid] += getAttributeInfoFromFormat(attribute.format).stride;\n    }\n\n    for (const j in attributes)\n    {\n        const attribute = attributes[j];\n\n        attribute.stride ??= tempStride[attribute.buffer.uid];\n\n        attribute.start ??= tempStart[attribute.buffer.uid];\n\n        tempStart[attribute.buffer.uid] += getAttributeInfoFromFormat(attribute.format).stride;\n    }\n}\n","import { STENCIL_MODES } from '../../shared/state/const';\n\nexport interface StencilState\n{\n    stencilWriteMask?: number\n    stencilReadMask?: number;\n    stencilFront?: {\n        compare: 'always' | 'equal';\n        passOp: 'increment-clamp' | 'decrement-clamp' | 'keep';\n    },\n    stencilBack?: {\n        compare: 'always' | 'equal';\n        passOp: 'increment-clamp' | 'decrement-clamp' | 'keep';\n    }\n}\n\nexport const GpuStencilModesToPixi: StencilState[] = [];\n\nGpuStencilModesToPixi[STENCIL_MODES.NONE] = undefined;\n\nGpuStencilModesToPixi[STENCIL_MODES.DISABLED] = {\n    stencilWriteMask: 0,\n    stencilReadMask: 0,\n};\n\nGpuStencilModesToPixi[STENCIL_MODES.RENDERING_MASK_ADD] = {\n    stencilFront: {\n        compare: 'equal',\n        passOp: 'increment-clamp',\n    },\n    stencilBack: {\n        compare: 'equal',\n        passOp: 'increment-clamp',\n    },\n};\n\nGpuStencilModesToPixi[STENCIL_MODES.RENDERING_MASK_REMOVE] = {\n    stencilFront: {\n        compare: 'equal',\n        passOp: 'decrement-clamp',\n    },\n    stencilBack: {\n        compare: 'equal',\n        passOp: 'decrement-clamp',\n    },\n};\n\nGpuStencilModesToPixi[STENCIL_MODES.MASK_ACTIVE] = {\n    stencilWriteMask: 0,\n    stencilFront: {\n        compare: 'equal',\n        passOp: 'keep',\n    },\n    stencilBack: {\n        compare: 'equal',\n        passOp: 'keep',\n    },\n};\n","import EventEmitter from 'eventemitter3';\nimport { uid } from '../../../../utils/data/uid';\n\nimport type { BindResource } from '../../gpu/shader/BindResource';\nimport type { Buffer } from './Buffer';\n\n/**\n * A resource that can be bound to a bind group and used in a shader.\n * Whilst a buffer can be used as a resource, this class allows you to specify an offset and size of the buffer to use.\n * This is useful if you have a large buffer and only part of it is used in a shader.\n *\n * This resource, will listen for changes on the underlying buffer and emit a itself if the buffer changes shape.\n * @example\n *\n * const buffer = new Buffer({\n *     data: new Float32Array(1000),\n *    usage: BufferUsage.UNIFORM,\n * });\n * // Create a buffer resource that uses the first 100 bytes of a buffer\n * const bufferResource = new BufferResource({\n *    buffer,\n *    offset: 0,\n *    size: 100,\n * });\n * @memberof rendering\n */\nexport class BufferResource extends EventEmitter<{\n    change: BindResource,\n}> implements BindResource\n{\n    /**\n     * emits when the underlying buffer has changed shape (i.e. resized)\n     * letting the renderer know that it needs to discard the old buffer on the GPU and create a new one\n     * @event change\n     */\n\n    /**\n     * a unique id for this uniform group used through the renderer\n     * @internal\n     * @ignore\n     */\n    public readonly uid = uid('buffer');\n\n    /**\n     * a resource type, used to identify how to handle it when its in a bind group / shader resource\n     * @internal\n     * @ignore\n     */\n    public readonly _resourceType = 'bufferResource';\n\n    /**\n     * used internally to know if a uniform group was used in the last render pass\n     * @internal\n     * @ignore\n     */\n    public _touched = 0;\n\n    /**\n     * the resource id used internally by the renderer to build bind group keys\n     * @internal\n     * @ignore\n     */\n    public _resourceId = uid('resource');\n\n    /** the underlying buffer that this resource is using */\n    public buffer: Buffer;\n    /** the offset of the buffer this resource is using. If not provided, then it will use the offset of the buffer. */\n    public readonly offset: number;\n    /** the size of the buffer this resource is using. If not provided, then it will use the size of the buffer. */\n    public readonly size: number;\n    /**\n     * A cheeky hint to the GL renderer to let it know this is a BufferResource\n     * @internal\n     * @ignore\n     */\n    public readonly _bufferResource = true;\n\n    /**\n     * Create a new Buffer Resource.\n     * @param options - The options for the buffer resource\n     * @param options.buffer - The underlying buffer that this resource is using\n     * @param options.offset - The offset of the buffer this resource is using.\n     * If not provided, then it will use the offset of the buffer.\n     * @param options.size - The size of the buffer this resource is using.\n     * If not provided, then it will use the size of the buffer.\n     */\n    constructor({ buffer, offset, size }: { buffer: Buffer; offset?: number; size?: number; })\n    {\n        super();\n\n        this.buffer = buffer;\n        this.offset = offset | 0;\n        this.size = size;\n\n        this.buffer.on('change', this.onBufferChange, this);\n    }\n\n    protected onBufferChange(): void\n    {\n        this._resourceId = uid('resource');\n\n        this.emit('change', this);\n    }\n\n    /**\n     * Destroys this resource. Make sure the underlying buffer is not used anywhere else\n     * if you want to destroy it as well, or code will explode\n     * @param destroyBuffer - Should the underlying buffer be destroyed as well?\n     */\n    public destroy(destroyBuffer = false): void\n    {\n        if (destroyBuffer)\n        {\n            this.buffer.destroy();\n        }\n\n        this.buffer = null;\n    }\n}\n","// what we are building is a platform and a framework.\n// import { Matrix } from '../../shared/maths/Matrix';\nimport { uid } from '../../../../utils/data/uid';\nimport { TextureSource } from '../texture/sources/TextureSource';\nimport { Texture } from '../texture/Texture';\n\nimport type { BindableTexture } from '../texture/Texture';\n\n/**\n * Options for creating a render target.\n * @memberof rendering\n */\nexport interface RenderTargetOptions\n{\n    /** the width of the RenderTarget */\n    width?: number;\n    /** the height of the RenderTarget */\n    height?: number;\n    /** the resolution of the RenderTarget */\n    resolution?: number;\n    /** an array of textures, or a number indicating how many color textures there should be */\n    colorTextures?: BindableTexture[] | number;\n    /** should this render target have a stencil buffer? */\n    stencil?: boolean;\n    /** should this render target have a depth buffer? */\n    depth?: boolean;\n    /** a depth stencil texture that the depth and stencil outputs will be written to */\n    depthStencilTexture?: BindableTexture | boolean;\n    /** should this render target be antialiased? */\n    antialias?: boolean;\n    /** is this a root element, true if this is gl context owners render target */\n    isRoot?: boolean;\n}\n\n/**\n * A class that describes what the renderers are rendering to.\n * This can be as simple as a Texture, or as complex as a multi-texture, multi-sampled render target.\n * Support for stencil and depth buffers is also included.\n *\n * If you need something more complex than a Texture to render to, you should use this class.\n * Under the hood, all textures you render to have a RenderTarget created on their behalf.\n * @memberof rendering\n */\nexport class RenderTarget\n{\n    /** The default options for a render target */\n    public static defaultOptions: RenderTargetOptions = {\n        /** the width of the RenderTarget */\n        width: 0,\n        /** the height of the RenderTarget */\n        height: 0,\n        /** the resolution of the RenderTarget */\n        resolution: 1,\n        /** an array of textures, or a number indicating how many color textures there should be */\n        colorTextures: 1,\n        /** should this render target have a stencil buffer? */\n        stencil: false,\n        /** should this render target have a depth buffer? */\n        depth: false,\n        /** should this render target be antialiased? */\n        antialias: false, // save on perf by default!\n        /** is this a root element, true if this is gl context owners render target */\n        isRoot: false\n    };\n\n    public uid = uid('renderTarget');\n\n    /**\n     * An array of textures that can be written to by the GPU - mostly this has one texture in Pixi, but you could\n     * write to multiple if required! (eg deferred lighting)\n     */\n    public colorTextures: TextureSource[] = [];\n    /** the stencil and depth buffer will right to this texture in WebGPU */\n    public depthStencilTexture: TextureSource;\n    /** if true, will ensure a stencil buffer is added. For WebGPU, this will automatically create a depthStencilTexture */\n    public stencil: boolean;\n    /** if true, will ensure a depth buffer is added. For WebGPU, this will automatically create a depthStencilTexture */\n    public depth: boolean;\n\n    public dirtyId = 0;\n    public isRoot = false;\n\n    private readonly _size = new Float32Array(2);\n\n    /**\n     * @param [descriptor] - Options for creating a render target.\n     */\n    constructor(descriptor: RenderTargetOptions = {})\n    {\n        descriptor = { ...RenderTarget.defaultOptions, ...descriptor };\n\n        this.stencil = descriptor.stencil;\n        this.depth = descriptor.depth;\n        this.isRoot = descriptor.isRoot;\n\n        if (typeof descriptor.colorTextures === 'number')\n        {\n            for (let i = 0; i < descriptor.colorTextures; i++)\n            {\n                this.colorTextures.push(new TextureSource({\n                    width: descriptor.width,\n                    height: descriptor.height,\n                    resolution: descriptor.resolution,\n                    antialias: descriptor.antialias,\n                })\n                );\n            }\n        }\n        else\n        {\n            this.colorTextures = [...descriptor.colorTextures.map((texture) => texture.source)];\n\n            const colorSource = this.colorTexture.source;\n\n            this.resize(colorSource.width, colorSource.height, colorSource._resolution);\n        }\n\n        // the first color texture drives the size of all others..\n        this.colorTexture.source.on('resize', this.onSourceResize, this);\n\n        // TODO should listen for texture destroyed?\n\n        if (descriptor.depthStencilTexture || this.stencil)\n        {\n            // TODO add a test\n            if (descriptor.depthStencilTexture instanceof Texture\n                || descriptor.depthStencilTexture instanceof TextureSource)\n            {\n                this.depthStencilTexture = descriptor.depthStencilTexture.source;\n            }\n            else\n            {\n                this.ensureDepthStencilTexture();\n            }\n        }\n    }\n\n    get size(): [number, number]\n    {\n        const _size = this._size;\n\n        _size[0] = this.pixelWidth;\n        _size[1] = this.pixelHeight;\n\n        return _size as any as [number, number];\n    }\n\n    get width(): number\n    {\n        return this.colorTexture.source.width;\n    }\n\n    get height(): number\n    {\n        return this.colorTexture.source.height;\n    }\n    get pixelWidth(): number\n    {\n        return this.colorTexture.source.pixelWidth;\n    }\n\n    get pixelHeight(): number\n    {\n        return this.colorTexture.source.pixelHeight;\n    }\n\n    get resolution(): number\n    {\n        return this.colorTexture.source._resolution;\n    }\n\n    get colorTexture(): TextureSource\n    {\n        return this.colorTextures[0];\n    }\n\n    protected onSourceResize(source: TextureSource)\n    {\n        this.resize(source.width, source.height, source._resolution, true);\n    }\n\n    /**\n     * This will ensure a depthStencil texture is created for this render target.\n     * Most likely called by the mask system to make sure we have stencil buffer added.\n     * @internal\n     * @ignore\n     */\n    public ensureDepthStencilTexture()\n    {\n        if (!this.depthStencilTexture)\n        {\n            this.depthStencilTexture = new TextureSource({\n                width: this.width,\n                height: this.height,\n                resolution: this.resolution,\n                format: 'depth24plus-stencil8',\n                autoGenerateMipmaps: false,\n                antialias: false,\n                mipLevelCount: 1,\n                // sampleCount: handled by the render target system..\n            });\n        }\n    }\n\n    public resize(width: number, height: number, resolution = this.resolution, skipColorTexture = false)\n    {\n        this.dirtyId++;\n\n        this.colorTextures.forEach((colorTexture, i) =>\n        {\n            if (skipColorTexture && i === 0) return;\n\n            colorTexture.source.resize(width, height, resolution);\n        });\n\n        if (this.depthStencilTexture)\n        {\n            this.depthStencilTexture.source.resize(width, height, resolution);\n        }\n    }\n\n    public destroy()\n    {\n        this.colorTexture.source.off('resize', this.onSourceResize, this);\n\n        if (this.depthStencilTexture)\n        {\n            this.depthStencilTexture.destroy();\n            delete this.depthStencilTexture;\n        }\n    }\n}\n","import type { Matrix } from '../../../../maths/matrix/Matrix';\n\nexport function calculateProjection(\n    pm: Matrix,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    flipY: boolean\n): Matrix\n{\n    const sign = flipY ? 1 : -1;\n\n    pm.identity();\n\n    pm.a = (1 / width * 2);\n    pm.d = sign * (1 / height * 2);\n\n    pm.tx = -1 - (x * pm.a);\n    pm.ty = -sign - (y * pm.d);\n\n    return pm;\n}\n","import type { RenderTarget } from './RenderTarget';\n\n/**\n * Checks if the render target is viewable on the screen\n * Basically, is it a canvas element and is that canvas element in the DOM\n * @param renderTarget - the render target to check\n * @returns true if the render target is viewable on the screen\n */\nexport function isRenderingToScreen(renderTarget: RenderTarget): boolean\n{\n    const resource = renderTarget.colorTexture.source.resource;\n\n    return ((globalThis.HTMLCanvasElement && resource instanceof HTMLCanvasElement) && document.body.contains(resource));\n}\n","import { Matrix } from '../../../../maths/matrix/Matrix';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport { CLEAR } from '../../gl/const';\nimport { calculateProjection } from '../../gpu/renderTarget/calculateProjection';\nimport { SystemRunner } from '../system/SystemRunner';\nimport { CanvasSource } from '../texture/sources/CanvasSource';\nimport { TextureSource } from '../texture/sources/TextureSource';\nimport { Texture } from '../texture/Texture';\nimport { getCanvasTexture } from '../texture/utils/getCanvasTexture';\nimport { isRenderingToScreen } from './isRenderingToScreen';\nimport { RenderTarget } from './RenderTarget';\n\nimport type { RgbaArray } from '../../../../color/Color';\nimport type { ICanvas } from '../../../../environment/canvas/ICanvas';\nimport type { CLEAR_OR_BOOL } from '../../gl/const';\nimport type { GlRenderTarget } from '../../gl/GlRenderTarget';\nimport type { GpuRenderTarget } from '../../gpu/renderTarget/GpuRenderTarget';\nimport type { Renderer } from '../../types';\nimport type { System } from '../system/System';\nimport type { BindableTexture } from '../texture/Texture';\n\n/**\n * A render surface is a texture, canvas, or render target\n * @memberof rendering\n * @see environment.ICanvas\n * @see rendering.Texture\n * @see rendering.RenderTarget\n */\nexport type RenderSurface = ICanvas | BindableTexture | RenderTarget;\n\n/**\n * stores a render target and its frame\n * @ignore\n */\ninterface RenderTargetAndFrame\n{\n    /** the render target */\n    renderTarget: RenderTarget;\n    /** the frame to use when using the render target */\n    frame: Rectangle\n}\n\n/**\n * An adaptor interface for RenderTargetSystem to support WebGL and WebGPU.\n * This is used internally by the renderer, and is not intended to be used directly.\n * @ignore\n */\nexport interface RenderTargetAdaptor<RENDER_TARGET extends GlRenderTarget | GpuRenderTarget>\n{\n    init(\n        /** the renderer */\n        renderer: Renderer,\n        /** the render target system */\n        renderTargetSystem: RenderTargetSystem<RENDER_TARGET>\n    ): void\n\n    /** A function copies the contents of a render surface to a texture */\n    copyToTexture(\n        /** the render surface to copy from  */\n        sourceRenderSurfaceTexture: RenderTarget,\n        /** the texture to copy to */\n        destinationTexture: Texture,\n        /** the origin of the copy */\n        originSrc: { x: number; y: number },\n        /** the size of the copy */\n        size: { width: number; height: number },\n        /** the destination origin (top left to paste from!) */\n        originDest?: { x: number; y: number },\n    ): Texture\n\n    /** starts a render pass on the render target */\n    startRenderPass(\n        /** the render target to start the render pass on */\n        renderTarget: RenderTarget,\n        /* the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111* */\n        clear: CLEAR_OR_BOOL,\n        /** the color to clear to */\n        clearColor?: RgbaArray,\n        /** the viewport to use */\n        viewport?: Rectangle\n    ): void\n\n    /** clears the current render target to the specified color */\n    clear(\n        /** the render target to clear */\n        renderTarget: RenderTarget,\n        /** the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111 */\n        clear: CLEAR_OR_BOOL,\n        /** the color to clear to   */\n        clearColor?: RgbaArray,\n        /** the viewport to use */\n        viewport?: Rectangle\n    ): void\n\n    /** finishes the current render pass */\n    finishRenderPass(renderTarget: RenderTarget): void\n\n    /**\n     * initializes a gpu render target. Both renderers use this function to initialize a gpu render target\n     * Its different type of object depending on the renderer.\n     */\n    initGpuRenderTarget(\n        /** the render target to initialize */\n        renderTarget: RenderTarget\n    ): RENDER_TARGET\n\n    /** called when a render target is resized */\n    resizeGpuRenderTarget(\n        /** the render target to resize */\n        renderTarget: RenderTarget\n    ): void\n}\n\n/**\n * A system that manages render targets. A render target is essentially a place where the shaders can color in the pixels.\n * The render target system is responsible for binding the render target to the renderer, and managing the viewport.\n * Render targets can be pushed and popped.\n *\n * To make it easier, you can also bind textures and canvases too. This will automatically create a render target for you.\n * The render target itself is a lot more powerful than just a texture or canvas,\n * as it can have multiple textures attached to it.\n * It will also give ou fine grain control over the stencil buffer / depth texture.\n * @example\n *\n * ```js\n *\n * // create a render target\n * const renderTarget = new RenderTarget({\n *   colorTextures: [new TextureSource({ width: 100, height: 100 })],\n * });\n *\n * // bind the render target\n * renderer.renderTarget.bind(renderTarget);\n *\n * // draw something!\n * ```\n * @memberof rendering\n */\nexport class RenderTargetSystem<RENDER_TARGET extends GlRenderTarget | GpuRenderTarget> implements System\n{\n    /** When rendering of a scene begins, this is where the root render surface is stored */\n    public rootRenderTarget: RenderTarget;\n    /** This is the root viewport for the render pass*/\n    public rootViewPort = new Rectangle();\n    /** A boolean that lets the dev know if the current render pass is rendering to the screen. Used by some plugins */\n    public renderingToScreen: boolean;\n    /** the current active render target */\n    public renderTarget: RenderTarget;\n    /** the current active render surface that the render target is created from */\n    public renderSurface: RenderSurface;\n    /** the current viewport that the gpu is using */\n    public readonly viewport = new Rectangle();\n    /**\n     * a runner that lets systems know if the active render target has changed.\n     * Eg the Stencil System needs to know so it can manage the stencil buffer\n     */\n    public readonly onRenderTargetChange = new SystemRunner('onRenderTargetChange');\n    /** the projection matrix that is used by the shaders based on the active render target and the viewport */\n    public readonly projectionMatrix = new Matrix();\n    /** the default clear color for render targets */\n    public readonly defaultClearColor: RgbaArray = [0, 0, 0, 0];\n    /** a reference to the adaptor that interfaces with WebGL / WebGP */\n    public readonly adaptor: RenderTargetAdaptor<RENDER_TARGET>;\n    /**\n     * a hash that stores the render target for a given render surface. When you pass in a texture source,\n     * a render target is created for it. This map stores and makes it easy to retrieve the render target\n     */\n    private readonly _renderSurfaceToRenderTargetHash: Map<RenderSurface, RenderTarget>\n        = new Map();\n    /** A hash that stores a gpu render target for a given render target. */\n    private _gpuRenderTargetHash: Record<number, RENDER_TARGET> = Object.create(null);\n    /**\n     * A stack that stores the render target and frame that is currently being rendered to.\n     * When push is called, the current render target is stored in this stack.\n     * When pop is called, the previous render target is restored.\n     */\n    private readonly _renderTargetStack: RenderTargetAndFrame[] = [];\n    /** A reference to the renderer */\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    /** called when dev wants to finish a render pass */\n    public finishRenderPass()\n    {\n        this.adaptor.finishRenderPass(this.renderTarget);\n    }\n\n    /**\n     * called when the renderer starts to render a scene.\n     * @param options\n     * @param options.target - the render target to render to\n     * @param options.clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n     * @param options.clearColor - the color to clear to\n     * @param options.frame - the frame to render to\n     */\n    public renderStart({\n        target,\n        clear,\n        clearColor,\n        frame\n    }: {\n        target: RenderSurface;\n        clear: CLEAR_OR_BOOL;\n        clearColor: RgbaArray;\n        frame?: Rectangle\n    }): void\n    {\n        // TODO no need to reset this - use optimised index instead\n        this._renderTargetStack.length = 0;\n\n        this.push(\n            target,\n            clear,\n            clearColor,\n            frame\n        );\n\n        this.rootViewPort.copyFrom(this.viewport);\n        this.rootRenderTarget = this.renderTarget;\n        this.renderingToScreen = isRenderingToScreen(this.rootRenderTarget);\n    }\n\n    /**\n     * Binding a render surface! This is the main function of the render target system.\n     * It will take the RenderSurface (which can be a texture, canvas, or render target) and bind it to the renderer.\n     * Once bound all draw calls will be rendered to the render surface.\n     *\n     * If a frame is not provide and the render surface is a texture, the frame of the texture will be used.\n     * @param renderSurface - the render surface to bind\n     * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n     * @param clearColor - the color to clear to\n     * @param frame - the frame to render to\n     * @returns the render target that was bound\n     */\n    public bind(\n        renderSurface: RenderSurface,\n        clear: CLEAR_OR_BOOL = true,\n        clearColor?: RgbaArray,\n        frame?: Rectangle\n    ): RenderTarget\n    {\n        const renderTarget = this.getRenderTarget(renderSurface);\n\n        const didChange = this.renderTarget !== renderTarget;\n\n        this.renderTarget = renderTarget;\n        this.renderSurface = renderSurface;\n\n        const gpuRenderTarget = this.getGpuRenderTarget(renderTarget);\n\n        if (renderTarget.pixelWidth !== gpuRenderTarget.width\n            || renderTarget.pixelHeight !== gpuRenderTarget.height)\n        {\n            this.adaptor.resizeGpuRenderTarget(renderTarget);\n\n            gpuRenderTarget.width = renderTarget.pixelWidth;\n            gpuRenderTarget.height = renderTarget.pixelHeight;\n        }\n\n        const source = renderTarget.colorTexture;\n        const viewport = this.viewport;\n\n        const pixelWidth = source.pixelWidth;\n        const pixelHeight = source.pixelHeight;\n\n        if (!frame && renderSurface instanceof Texture)\n        {\n            frame = renderSurface.frame;\n        }\n\n        if (frame)\n        {\n            const resolution = source._resolution;\n\n            viewport.x = ((frame.x * resolution) + 0.5) | 0;\n            viewport.y = ((frame.y * resolution) + 0.5) | 0;\n            viewport.width = ((frame.width * resolution) + 0.5) | 0;\n            viewport.height = ((frame.height * resolution) + 0.5) | 0;\n        }\n        else\n        {\n            viewport.x = 0;\n            viewport.y = 0;\n            viewport.width = pixelWidth;\n            viewport.height = pixelHeight;\n        }\n\n        calculateProjection(\n            this.projectionMatrix,\n            0, 0,\n            viewport.width / source.resolution,\n            viewport.height / source.resolution,\n            !renderTarget.isRoot\n        );\n\n        this.adaptor.startRenderPass(renderTarget, clear, clearColor, viewport);\n\n        if (didChange)\n        {\n            this.onRenderTargetChange.emit(renderTarget);\n        }\n\n        return renderTarget;\n    }\n\n    public clear(\n        target?: RenderSurface,\n        clear: CLEAR_OR_BOOL = CLEAR.ALL,\n        clearColor?: RgbaArray,\n    )\n    {\n        if (!clear) return;\n\n        if (target)\n        {\n            target = this.getRenderTarget(target);\n        }\n\n        this.adaptor.clear(\n            (target as RenderTarget) || this.renderTarget,\n            clear,\n            clearColor,\n            this.viewport\n        );\n    }\n\n    protected contextChange(): void\n    {\n        this._gpuRenderTargetHash = Object.create(null);\n    }\n\n    /**\n     * Push a render surface to the renderer. This will bind the render surface to the renderer,\n     * @param renderSurface - the render surface to push\n     * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n     * @param clearColor - the color to clear to\n     * @param frame - the frame to use when rendering to the render surface\n     */\n    public push(\n        renderSurface: RenderSurface,\n        clear: CLEAR | boolean = CLEAR.ALL,\n        clearColor?: RgbaArray,\n        frame?: Rectangle\n    )\n    {\n        const renderTarget = this.bind(renderSurface, clear, clearColor, frame);\n\n        this._renderTargetStack.push({\n            renderTarget,\n            frame,\n        });\n\n        return renderTarget;\n    }\n\n    /** Pops the current render target from the renderer and restores the previous render target. */\n    public pop()\n    {\n        this._renderTargetStack.pop();\n\n        const currentRenderTargetData = this._renderTargetStack[this._renderTargetStack.length - 1];\n\n        this.bind(currentRenderTargetData.renderTarget, false, null, currentRenderTargetData.frame);\n    }\n\n    /**\n     * Gets the render target from the provide render surface. Eg if its a texture,\n     * it will return the render target for the texture.\n     * If its a render target, it will return the same render target.\n     * @param renderSurface - the render surface to get the render target for\n     * @returns the render target for the render surface\n     */\n    public getRenderTarget(renderSurface: RenderSurface): RenderTarget\n    {\n        if (((renderSurface as Texture).isTexture))\n        {\n            renderSurface = (renderSurface as Texture).source;\n        }\n\n        return this._renderSurfaceToRenderTargetHash.get(renderSurface)\n        ?? this._initRenderTarget(renderSurface);\n    }\n\n    /**\n     * Copies a render surface to another texture\n     * @param sourceRenderSurfaceTexture - the render surface to copy from\n     * @param destinationTexture - the texture to copy to\n     * @param originSrc - the origin of the copy\n     * @param originSrc.x - the x origin of the copy\n     * @param originSrc.y - the y origin of the copy\n     * @param size - the size of the copy\n     * @param size.width - the width of the copy\n     * @param size.height - the height of the copy\n     * @param originDest - the destination origin (top left to paste from!)\n     * @param originDest.x - the x origin of the paste\n     * @param originDest.y - the y origin of the paste\n     */\n    public copyToTexture(\n        sourceRenderSurfaceTexture: RenderTarget,\n        destinationTexture: Texture,\n        originSrc: { x: number; y: number },\n        size: { width: number; height: number },\n        originDest: { x: number; y: number; },\n    )\n    {\n        // fit the size to the source we don't want to go out of bounds\n\n        if (originSrc.x < 0)\n        {\n            size.width += originSrc.x;\n            originDest.x -= originSrc.x;\n            originSrc.x = 0;\n        }\n\n        if (originSrc.y < 0)\n        {\n            size.height += originSrc.y;\n            originDest.y -= originSrc.y;\n            originSrc.y = 0;\n        }\n\n        const { pixelWidth, pixelHeight } = sourceRenderSurfaceTexture;\n\n        size.width = Math.min(size.width, pixelWidth - originSrc.x);\n        size.height = Math.min(size.height, pixelHeight - originSrc.y);\n\n        return this.adaptor.copyToTexture(\n            sourceRenderSurfaceTexture,\n            destinationTexture,\n            originSrc,\n            size,\n            originDest\n        );\n    }\n\n    /**\n     * ensures that we have a depth stencil buffer available to render to\n     * This is used by the mask system to make sure we have a stencil buffer.\n     */\n    public ensureDepthStencil()\n    {\n        if (!this.renderTarget.stencil)\n        {\n            this.renderTarget.stencil = true;\n\n            this.adaptor.startRenderPass(this.renderTarget, false, null, this.viewport);\n        }\n    }\n\n    /** nukes the render target system */\n    public destroy()\n    {\n        (this._renderer as null) = null;\n\n        this._renderSurfaceToRenderTargetHash.forEach((renderTarget, key) =>\n        {\n            if (renderTarget !== key)\n            {\n                renderTarget.destroy();\n            }\n        });\n\n        this._renderSurfaceToRenderTargetHash.clear();\n\n        this._gpuRenderTargetHash = Object.create(null);\n    }\n\n    private _initRenderTarget(renderSurface: RenderSurface): RenderTarget\n    {\n        let renderTarget: RenderTarget = null;\n\n        if (CanvasSource.test(renderSurface))\n        {\n            renderSurface = getCanvasTexture(renderSurface as ICanvas);\n        }\n\n        if (renderSurface instanceof RenderTarget)\n        {\n            renderTarget = renderSurface;\n        }\n        else if (renderSurface instanceof TextureSource)\n        {\n            renderTarget = new RenderTarget({\n                colorTextures: [renderSurface],\n            });\n\n            if (CanvasSource.test(renderSurface.source.resource))\n            {\n                renderTarget.isRoot = true;\n            }\n\n            // TODO add a test for this\n            renderSurface.on('destroy', () =>\n            {\n                renderTarget.destroy();\n            });\n        }\n\n        this._renderSurfaceToRenderTargetHash.set(renderSurface, renderTarget);\n\n        return renderTarget;\n    }\n\n    public getGpuRenderTarget(renderTarget: RenderTarget)\n    {\n        return this._gpuRenderTargetHash[renderTarget.uid]\n        || (this._gpuRenderTargetHash[renderTarget.uid] = this.adaptor.initGpuRenderTarget(renderTarget));\n    }\n}\n","import { unsafeEvalSupported } from '../../../../utils/browser/unsafeEvalSupported';\nimport { Buffer } from '../buffer/Buffer';\nimport { BufferUsage } from '../buffer/const';\n\nimport type { System } from '../system/System';\nimport type { UboElement, UboLayout, UniformData, UniformsSyncCallback } from './types';\nimport type { UniformGroup } from './UniformGroup';\n\nexport interface UboAdaptor\n{\n    createUboElements: (uniformData: UniformData[]) => UboLayout;\n    generateUboSync: (uboElements: UboElement[]) => UniformsSyncCallback;\n}\n\n/**\n * System plugin to the renderer to manage uniform buffers.\n * @memberof rendering\n */\nexport class UboSystem implements System\n{\n    /** Cache of uniform buffer layouts and sync functions, so we don't have to re-create them */\n    private _syncFunctionHash: Record<string, {\n        layout: UboLayout,\n        syncFunction: (uniforms: Record<string, any>, data: Float32Array, offset: number) => void\n    }> = Object.create(null);\n\n    private readonly _adaptor: UboAdaptor;\n\n    constructor(adaptor: UboAdaptor)\n    {\n        this._adaptor = adaptor;\n\n        // Validation check that this environment support `new Function`\n        this._systemCheck();\n    }\n\n    /**\n     * Overrideable function by `pixi.js/unsafe-eval` to silence\n     * throwing an error if platform doesn't support unsafe-evals.\n     * @private\n     */\n    private _systemCheck(): void\n    {\n        if (!unsafeEvalSupported())\n        {\n            throw new Error('Current environment does not allow unsafe-eval, '\n                 + 'please use pixi.js/unsafe-eval module to enable support.');\n        }\n    }\n\n    public ensureUniformGroup(uniformGroup: UniformGroup): void\n    {\n        const uniformData = this.getUniformGroupData(uniformGroup);\n\n        uniformGroup.buffer ||= new Buffer({\n            data: new Float32Array(uniformData.layout.size / 4),\n            usage: BufferUsage.UNIFORM | BufferUsage.COPY_DST,\n        });\n    }\n\n    public getUniformGroupData(uniformGroup: UniformGroup)\n    {\n        return this._syncFunctionHash[uniformGroup._signature] || this._initUniformGroup(uniformGroup);\n    }\n\n    private _initUniformGroup(uniformGroup: UniformGroup)\n    {\n        const uniformGroupSignature = uniformGroup._signature;\n\n        let uniformData = this._syncFunctionHash[uniformGroupSignature];\n\n        if (!uniformData)\n        {\n            const elements = Object.keys(uniformGroup.uniformStructures).map((i) => uniformGroup.uniformStructures[i]);\n\n            const layout = this._adaptor.createUboElements(elements);\n\n            const syncFunction = this._generateUboSync(layout.uboElements);\n\n            uniformData = this._syncFunctionHash[uniformGroupSignature] = {\n                layout,\n                syncFunction\n            };\n        }\n\n        return this._syncFunctionHash[uniformGroupSignature];\n    }\n\n    private _generateUboSync(\n        uboElements: UboElement[],\n    ): UniformsSyncCallback\n    {\n        return this._adaptor.generateUboSync(uboElements);\n    }\n\n    public syncUniformGroup(uniformGroup: UniformGroup, data?: Float32Array, offset?: number): boolean\n    {\n        const uniformGroupData = this.getUniformGroupData(uniformGroup);\n\n        uniformGroup.buffer ||= new Buffer({\n            data: new Float32Array(uniformGroupData.layout.size / 4),\n            usage: BufferUsage.UNIFORM | BufferUsage.COPY_DST,\n        });\n\n        data ||= (uniformGroup.buffer.data as Float32Array);\n        offset ||= 0;\n\n        uniformGroupData.syncFunction(uniformGroup.uniforms, data, offset);\n\n        return true;\n    }\n\n    public updateUniformGroup(uniformGroup: UniformGroup): boolean\n    {\n        if (uniformGroup.isStatic && !uniformGroup._dirtyId) return false;\n        uniformGroup._dirtyId = 0;\n\n        const synced = this.syncUniformGroup(uniformGroup);\n\n        uniformGroup.buffer.update();\n\n        return synced;\n    }\n\n    public destroy(): void\n    {\n        this._syncFunctionHash = null;\n    }\n}\n","/* eslint-disable quote-props */\nimport { uniformParsers } from './uniformParsers';\n\nimport type { UboElement, UNIFORM_TYPES_SINGLE, UniformsSyncCallback } from '../types';\n\nexport function createUboSyncFunction(\n    uboElements: UboElement[],\n    parserCode: 'uboWgsl' | 'uboStd40',\n    arrayGenerationFunction: (uboElement: UboElement, offsetToAdd: number) => string,\n    singleSettersMap: Record<UNIFORM_TYPES_SINGLE, string>,\n): UniformsSyncCallback\n{\n    const funcFragments = [`\n        var v = null;\n        var v2 = null;\n        var t = 0;\n        var index = 0;\n        var name = null;\n        var arrayOffset = null;\n    `];\n\n    let prev = 0;\n\n    for (let i = 0; i < uboElements.length; i++)\n    {\n        const uboElement = uboElements[i];\n\n        const name = uboElement.data.name;\n\n        let parsed = false;\n        let offset = 0;\n\n        for (let j = 0; j < uniformParsers.length; j++)\n        {\n            const uniformParser = uniformParsers[j];\n\n            if (uniformParser.test(uboElement.data))\n            {\n                offset = uboElement.offset / 4;\n\n                funcFragments.push(\n                    `name = \"${name}\";`,\n                    `offset += ${offset - prev};`,\n                    uniformParsers[j][parserCode] || uniformParsers[j].ubo);\n                parsed = true;\n\n                break;\n            }\n        }\n\n        if (!parsed)\n        {\n            if (uboElement.data.size > 1)\n            {\n                offset = uboElement.offset / 4;\n\n                funcFragments.push(arrayGenerationFunction(uboElement, offset - prev));\n            }\n            else\n            {\n                const template = singleSettersMap[uboElement.data.type as UNIFORM_TYPES_SINGLE];\n\n                offset = uboElement.offset / 4;\n\n                funcFragments.push(/* wgsl */`\n                    v = uv.${name};\n                    offset += ${offset - prev};\n                    ${template};\n                `);\n            }\n        }\n\n        prev = offset;\n    }\n\n    const fragmentSrc = funcFragments.join('\\n');\n\n    // eslint-disable-next-line no-new-func\n    return new Function(\n        'uv',\n        'data',\n        'offset',\n        fragmentSrc,\n    ) as UniformsSyncCallback;\n}\n","import type { UNIFORM_TYPES_SINGLE } from '../types';\n\nfunction loopMatrix(col: number, row: number)\n{\n    const total = col * row;\n\n    return `\n        for (let i = 0; i < ${total}; i++) {\n            data[offset + (((i / ${col})|0) * 4) + (i % ${col})] = v[i];\n        }\n    `;\n}\n\nexport const uboSyncFunctionsSTD40: Record<UNIFORM_TYPES_SINGLE, string> = {\n    f32: `\n        data[offset] = v;`,\n    i32: `\n        data[offset] = v;`,\n    'vec2<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];`,\n    'vec3<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];`,\n    'vec4<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];`,\n    'mat2x2<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 4] = v[2];\n        data[offset + 5] = v[3];`,\n    'mat3x3<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 4] = v[3];\n        data[offset + 5] = v[4];\n        data[offset + 6] = v[5];\n        data[offset + 8] = v[6];\n        data[offset + 9] = v[7];\n        data[offset + 10] = v[8];`,\n    'mat4x4<f32>': `\n        for (let i = 0; i < 16; i++) {\n            data[offset + i] = v[i];\n        }`,\n    'mat3x2<f32>': loopMatrix(3, 2),\n    'mat4x2<f32>': loopMatrix(4, 2),\n    'mat2x3<f32>': loopMatrix(2, 3),\n    'mat4x3<f32>': loopMatrix(4, 3),\n    'mat2x4<f32>': loopMatrix(2, 4),\n    'mat3x4<f32>': loopMatrix(3, 4),\n};\n\nexport const uboSyncFunctionsWGSL: Record<UNIFORM_TYPES_SINGLE, string> = {\n    ...uboSyncFunctionsSTD40,\n    'mat2x2<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];\n    `,\n};\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n// Parsers, each one of these will take a look at the type of shader property and uniform.\n// if they pass the test function then the code function is called that returns a the shader upload code for that uniform.\n// Shader upload code is automagically generated with these parsers.\n// If no parser is valid then the default upload functions are used.\n// exposing Parsers means that custom upload logic can be added to pixi's shaders.\n// A good example would be a pixi rectangle can be directly set on a uniform.\n// If the shader sees it it knows how to upload the rectangle structure as a vec4\n// format is as follows:\n//\n// {\n//     test: (data, uniform) => {} <--- test is this code should be used for this uniform\n//     code: (name, uniform) => {} <--- returns the string of the piece of code that uploads the uniform\n//     codeUbo: (name, uniform) => {} <--- returns the string of the piece of code that uploads the\n//                                         uniform to a uniform buffer\n// }\n// import { Texture } from '../../texture/Texture';\n\nimport type { Color } from '../../../../../color/Color';\nimport type { Matrix } from '../../../../../maths/matrix/Matrix';\nimport type { PointLike } from '../../../../../maths/point/PointLike';\nimport type { Rectangle } from '../../../../../maths/shapes/Rectangle';\nimport type { UNIFORM_TYPES, UniformData } from '../types';\n\ninterface UniformParserDefinition\n{\n    type: UNIFORM_TYPES;\n    test(data: UniformData): boolean;\n    ubo?: string;\n    uboWgsl?: string;\n    uboStd40?: string;\n    uniform?: string;\n}\n\nexport const uniformParsers: UniformParserDefinition[] = [\n    // uploading pixi matrix object to mat3\n    {\n        type: 'mat3x3<f32>',\n        test: (data: UniformData): boolean =>\n        {\n            const value = data.value as Matrix;\n\n            return value.a !== undefined;\n        },\n        ubo: `\n            var matrix = uv[name].toArray(true);\n            data[offset] = matrix[0];\n            data[offset + 1] = matrix[1];\n            data[offset + 2] = matrix[2];\n            data[offset + 4] = matrix[3];\n            data[offset + 5] = matrix[4];\n            data[offset + 6] = matrix[5];\n            data[offset + 8] = matrix[6];\n            data[offset + 9] = matrix[7];\n            data[offset + 10] = matrix[8];\n        `,\n        uniform: ` \n            gl.uniformMatrix3fv(ud[name].location, false, uv[name].toArray(true));\n        `\n    },\n    // uploading a pixi rectangle as a vec4\n    {\n        type: 'vec4<f32>',\n        test: (data: UniformData): boolean =>\n            data.type === 'vec4<f32>' && data.size === 1 && (data.value as Rectangle).width !== undefined,\n        ubo: `\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n            data[offset + 2] = v.width;\n            data[offset + 3] = v.height;\n        `,\n        uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y || cv[2] !== v.width || cv[3] !== v.height) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                cv[2] = v.width;\n                cv[3] = v.height;\n                gl.uniform4f(ud[name].location, v.x, v.y, v.width, v.height);\n            }\n        `\n    },\n    // uploading a pixi point as a vec2\n    {\n        type: 'vec2<f32>',\n        test: (data: UniformData): boolean =>\n            data.type === 'vec2<f32>' && data.size === 1 && (data.value as PointLike).x !== undefined,\n        ubo:  `\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n        `,\n        uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                gl.uniform2f(ud[name].location, v.x, v.y);\n            }\n        `\n    },\n    // uploading a pixi color as a vec4\n    {\n        type: 'vec4<f32>',\n        test: (data: UniformData): boolean =>\n            data.type === 'vec4<f32>' && data.size === 1 && (data.value as Color).red !== undefined,\n        ubo: `\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n            data[offset + 3] = v.alpha;\n        `,\n        uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue || cv[3] !== v.alpha) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                cv[3] = v.alpha;\n                gl.uniform4f(ud[name].location, v.red, v.green, v.blue, v.alpha);\n            }\n        `\n    },\n    // uploading a pixi color as a vec3\n    {\n        type: 'vec3<f32>',\n        test: (data: UniformData): boolean =>\n            data.type === 'vec3<f32>' && data.size === 1 && (data.value as Color).red !== undefined,\n        ubo: `\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n        `,\n        uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                gl.uniform3f(ud[name].location, v.red, v.green, v.blue);\n            }\n        `\n    },\n];\n","import { ExtensionType } from '../../extensions/Extensions';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { RenderContainer } from './RenderContainer';\n\n/**\n * The CustomRenderPipe is a render pipe that allows for custom rendering logic for your renderable objects.\n * @example\n * import { RenderContainer } from 'pixi.js';\n *\n * const renderContainer = new RenderContainer(\n * (renderer) =>  {\n *     renderer.clear({\n *       clearColor: 'green', // clear the screen to green when rendering this item\n *     });\n * })\n * @memberof rendering\n */\nexport class CustomRenderPipe implements InstructionPipe<RenderContainer>\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'customRender',\n    } as const;\n\n    private _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public addRenderable(container: RenderContainer, instructionSet: InstructionSet): void\n    {\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add(container);\n    }\n\n    public execute(container: RenderContainer)\n    {\n        if (!container.isRenderable) return;\n\n        container.render(this._renderer);\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n    }\n}\n","import type { InstructionPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { RenderPipes } from '../../../rendering/renderers/types';\nimport type { RenderGroup } from '../RenderGroup';\n\nexport function executeInstructions(renderGroup: RenderGroup, renderer: RenderPipes)\n{\n    const instructionSet = renderGroup.instructionSet;\n    const instructions = instructionSet.instructions;\n\n    for (let i = 0; i < instructionSet.instructionSize; i++)\n    {\n        const instruction = instructions[i];\n\n        (renderer[instruction.renderPipeId as keyof RenderPipes] as InstructionPipe<any>).execute(instruction);\n    }\n}\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { executeInstructions } from './utils/executeInstructions';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { RenderGroup } from './RenderGroup';\n\nexport class RenderGroupPipe implements InstructionPipe<RenderGroup>\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'renderGroup',\n    } as const;\n\n    private _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public addRenderGroup(renderGroup: RenderGroup, instructionSet: InstructionSet): void\n    {\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add(renderGroup);\n    }\n\n    public execute(renderGroup: RenderGroup)\n    {\n        if (!renderGroup.isRenderable) return;\n\n        this._renderer.globalUniforms.push({\n            worldTransformMatrix: renderGroup.worldTransform,\n            worldColor: renderGroup.worldColorAlpha,\n        });\n\n        executeInstructions(renderGroup, this._renderer.renderPipes);\n\n        this._renderer.globalUniforms.pop();\n\n        // now render a quad..\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n    }\n}\n","import type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe, RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderable } from '../../../rendering/renderers/shared/Renderable';\nimport type { RenderPipes } from '../../../rendering/renderers/types';\nimport type { Container } from '../Container';\nimport type { RenderGroup } from '../RenderGroup';\n\nexport function buildInstructions(renderGroup: RenderGroup, renderPipes: RenderPipes)\n{\n    const root = renderGroup.root;\n    const instructionSet = renderGroup.instructionSet;\n\n    instructionSet.reset();\n\n    // TODO add some events / runners for build start\n    renderPipes.batch.buildStart(instructionSet);\n    renderPipes.blendMode.buildStart();\n    renderPipes.colorMask.buildStart();\n\n    if (root.sortableChildren)\n    {\n        root.sortChildren();\n    }\n\n    collectAllRenderablesAdvanced(root, instructionSet, renderPipes, true);\n\n    // instructionSet.log();\n    // TODO add some events / runners for build end\n    renderPipes.batch.buildEnd(instructionSet);\n    renderPipes.blendMode.buildEnd(instructionSet);\n\n    // instructionSet.log();\n}\n\nexport function collectAllRenderables(\n    container: Container,\n    instructionSet: InstructionSet,\n    rendererPipes: RenderPipes\n): void\n{\n    // if there is 0b01 or 0b10 the return value\n\n    if (container.globalDisplayStatus < 0b111 || !container.includeInBuild) return;\n\n    if (container.sortableChildren)\n    {\n        container.sortChildren();\n    }\n\n    if (container.isSimple)\n    {\n        collectAllRenderablesSimple(container, instructionSet, rendererPipes);\n    }\n    else\n    {\n        collectAllRenderablesAdvanced(container, instructionSet, rendererPipes, false);\n    }\n}\n\nfunction collectAllRenderablesSimple(\n    container: Container,\n    instructionSet: InstructionSet,\n    renderPipes: RenderPipes\n): void\n{\n    if (container.renderPipeId)\n    {\n        // TODO add blends in\n        renderPipes.blendMode.setBlendMode(container as Renderable, container.groupBlendMode, instructionSet);\n\n        container.didViewUpdate = false;\n\n        const rp = renderPipes as unknown as Record<string, RenderPipe>;\n\n        rp[container.renderPipeId].addRenderable(container as Renderable, instructionSet);\n    }\n\n    if (!container.isRenderGroupRoot)\n    {\n        const children = container.children;\n        const length = children.length;\n\n        for (let i = 0; i < length; i++)\n        {\n            collectAllRenderables(children[i], instructionSet, renderPipes);\n        }\n    }\n}\n\nfunction collectAllRenderablesAdvanced(\n    container: Container,\n    instructionSet: InstructionSet,\n    renderPipes: RenderPipes,\n    isRoot: boolean\n): void\n{\n    if (!isRoot && container.isRenderGroupRoot)\n    {\n        renderPipes.renderGroup.addRenderGroup(container.renderGroup, instructionSet);\n    }\n    else\n    {\n        for (let i = 0; i < container.effects.length; i++)\n        {\n            const effect = container.effects[i];\n            const pipe = renderPipes[effect.pipe as keyof RenderPipes]as InstructionPipe<any>;\n\n            pipe.push(effect, container, instructionSet);\n        }\n\n        const renderPipeId = container.renderPipeId;\n\n        if (renderPipeId)\n        {\n            // TODO add blends in\n            renderPipes.blendMode.setBlendMode(container as Renderable, container.groupBlendMode, instructionSet);\n            container.didViewUpdate = false;\n\n            const pipe = renderPipes[renderPipeId as keyof RenderPipes]as RenderPipe<any>;\n\n            pipe.addRenderable(container, instructionSet);\n        }\n\n        const children = container.children;\n\n        if (children.length)\n        {\n            for (let i = 0; i < children.length; i++)\n            {\n                collectAllRenderables(children[i], instructionSet, renderPipes);\n            }\n        }\n\n        // loop backwards through effects\n        for (let i = container.effects.length - 1; i >= 0; i--)\n        {\n            const effect = container.effects[i];\n            const pipe = renderPipes[effect.pipe as keyof RenderPipes]as InstructionPipe<any>;\n\n            pipe.pop(effect, container, instructionSet);\n        }\n    }\n}\n\n","import type { RenderGroup } from '../RenderGroup';\n\nexport function collectRenderGroups(renderGroup: RenderGroup, out: RenderGroup[] = [])\n{\n    out.push(renderGroup);\n\n    for (let i = 0; i < renderGroup.renderGroupChildren.length; i++)\n    {\n        collectRenderGroups(renderGroup.renderGroupChildren[i], out);\n    }\n\n    return out;\n}\n","import { Container, UPDATE_BLEND, UPDATE_COLOR, UPDATE_VISIBLE } from '../Container';\nimport { mixColors } from './mixColors';\n\nimport type { RenderGroup } from '../RenderGroup';\n\nconst tempContainer = new Container();\n\nexport function updateRenderGroupTransforms(renderGroup: RenderGroup, updateChildRenderGroups = false)\n{\n    updateRenderGroupTransform(renderGroup);\n\n    const childrenToUpdate = renderGroup.childrenToUpdate;\n\n    const updateTick = renderGroup.updateTick;\n\n    renderGroup.updateTick++;\n\n    for (const j in childrenToUpdate)\n    {\n        const childrenAtDepth = childrenToUpdate[j];\n\n        const list = childrenAtDepth.list;\n        const index = childrenAtDepth.index;\n\n        for (let i = 0; i < index; i++)\n        {\n            updateTransformAndChildren(list[i], updateTick, 0);\n        }\n\n        childrenAtDepth.index = 0;\n    }\n\n    if (updateChildRenderGroups)\n    {\n        for (let i = 0; i < renderGroup.renderGroupChildren.length; i++)\n        {\n            updateRenderGroupTransforms(renderGroup.renderGroupChildren[i], updateChildRenderGroups);\n        }\n    }\n}\n\nexport function updateRenderGroupTransform(renderGroup: RenderGroup)\n{\n    const root = renderGroup.root;\n\n    let worldAlpha;\n\n    if (renderGroup.renderGroupParent)\n    {\n        const renderGroupParent = renderGroup.renderGroupParent;\n\n        renderGroup.worldTransform.appendFrom(\n            root.relativeGroupTransform,\n            renderGroupParent.worldTransform,\n        );\n\n        renderGroup.worldColor = mixColors(\n            root.groupColor,\n            renderGroupParent.worldColor,\n        );\n\n        worldAlpha = root.groupAlpha * renderGroupParent.worldAlpha;\n    }\n    else\n    {\n        renderGroup.worldTransform.copyFrom(root.localTransform);\n        renderGroup.worldColor = root.localColor;\n        worldAlpha = root.localAlpha;\n    }\n\n    // eslint-disable-next-line no-nested-ternary\n    worldAlpha = worldAlpha < 0 ? 0 : (worldAlpha > 1 ? 1 : worldAlpha);\n    renderGroup.worldAlpha = worldAlpha;\n\n    renderGroup.worldColorAlpha = renderGroup.worldColor\n            + (((worldAlpha * 255) | 0) << 24);\n}\n\nexport function updateTransformAndChildren(container: Container, updateTick: number, updateFlags: number)\n{\n    if (updateTick === container.updateTick) return;\n    container.updateTick = updateTick;\n\n    container.didChange = false;\n\n    const localTransform = container.localTransform;\n\n    container.updateLocalTransform();\n\n    const parent = container.parent;\n\n    if ((parent && !parent.isRenderGroupRoot))\n    {\n        updateFlags = updateFlags | container._updateFlags;\n\n        container.relativeGroupTransform.appendFrom(\n            localTransform,\n            parent.relativeGroupTransform,\n        );\n\n        if (updateFlags)\n        {\n            updateColorBlendVisibility(container, parent, updateFlags);\n        }\n    }\n    else\n    {\n        updateFlags = container._updateFlags;\n\n        container.relativeGroupTransform.copyFrom(localTransform);\n\n        if (updateFlags)\n        {\n            updateColorBlendVisibility(container, tempContainer, updateFlags);\n        }\n    }\n\n    // don't update children if its a layer..\n    if (!container.isRenderGroupRoot)\n    {\n        const children = container.children;\n        const length = children.length;\n\n        for (let i = 0; i < length; i++)\n        {\n            updateTransformAndChildren(children[i], updateTick, updateFlags);\n        }\n\n        const renderGroup = container.renderGroup;\n\n        if (container.renderPipeId && !renderGroup.structureDidChange)\n        {\n            renderGroup.updateRenderable(container);\n        }\n    }\n}\n\nfunction updateColorBlendVisibility(\n    container: Container,\n    parent: Container,\n    updateFlags: number,\n): void\n{\n    if (updateFlags & UPDATE_COLOR)\n    {\n        container.groupColor = mixColors(\n            container.localColor,\n            parent.groupColor\n        );\n\n        let groupAlpha = container.localAlpha * parent.groupAlpha;\n\n        // eslint-disable-next-line no-nested-ternary\n        groupAlpha = groupAlpha < 0 ? 0 : (groupAlpha > 1 ? 1 : groupAlpha);\n\n        container.groupAlpha = groupAlpha;\n        container.groupColorAlpha = container.groupColor + (((groupAlpha * 255) | 0) << 24);\n    }\n\n    if (updateFlags & UPDATE_BLEND)\n    {\n        container.groupBlendMode = container.localBlendMode === 'inherit' ? parent.groupBlendMode : container.localBlendMode;\n    }\n\n    if (updateFlags & UPDATE_VISIBLE)\n    {\n        container.globalDisplayStatus = container.localDisplayStatus & parent.globalDisplayStatus;\n    }\n\n    container._updateFlags = 0;\n}\n\n","import type { RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { RenderPipes } from '../../../rendering/renderers/types';\nimport type { RenderGroup } from '../RenderGroup';\n\nexport function validateRenderables(renderGroup: RenderGroup, renderPipes: RenderPipes): boolean\n{\n    const { list, index } = renderGroup.childrenRenderablesToUpdate;\n\n    let rebuildRequired = false;\n\n    for (let i = 0; i < index; i++)\n    {\n        const container = list[i];\n\n        const renderable = container;\n        const pipe = renderPipes[renderable.renderPipeId as keyof RenderPipes] as RenderPipe<any>;\n\n        rebuildRequired = pipe.validateRenderable(container);\n\n        if (rebuildRequired)\n        {\n            break;\n        }\n    }\n\n    renderGroup.structureDidChange = rebuildRequired;\n\n    return rebuildRequired;\n}\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { Matrix } from '../../maths/matrix/Matrix';\nimport { buildInstructions } from './utils/buildInstructions';\nimport { collectRenderGroups } from './utils/collectRenderGroups';\nimport { executeInstructions } from './utils/executeInstructions';\nimport { updateRenderGroupTransforms } from './utils/updateRenderGroupTransforms';\nimport { validateRenderables } from './utils/validateRenderables';\n\nimport type { WebGPURenderer } from '../../rendering/renderers/gpu/WebGPURenderer';\nimport type { System } from '../../rendering/renderers/shared/system/System';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { Container } from './Container';\nimport type { RenderGroup } from './RenderGroup';\n\nconst tempMatrix = new Matrix();\n\n/**\n * The view system manages the main canvas that is attached to the DOM.\n * This main role is to deal with how the holding the view reference and dealing with how it is resized.\n * @memberof rendering\n */\nexport class RenderGroupSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'renderGroup',\n    } as const;\n\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    protected render({ container, transform }: {container: Container, transform: Matrix}): void\n    {\n        container.isRenderGroup = true;\n\n        const parent = container.parent;\n        const renderGroupParent = container.renderGroup.renderGroupParent;\n\n        container.parent = null;\n        container.renderGroup.renderGroupParent = null;\n\n        const renderer = this._renderer;\n\n        // collect all the renderGroups in the scene and then render them one by one..\n        const renderGroups = collectRenderGroups(container.renderGroup, []);\n\n        let originalLocalTransform: Matrix = tempMatrix;\n\n        if (transform)\n        {\n            originalLocalTransform = originalLocalTransform.copyFrom(container.renderGroup.localTransform);\n            container.renderGroup.localTransform.copyFrom(transform);\n        }\n\n        const renderPipes = (renderer as WebGPURenderer).renderPipes;\n\n        for (let i = 0; i < renderGroups.length; i++)\n        {\n            const renderGroup = renderGroups[i];\n\n            renderGroup.runOnRender();\n\n            renderGroup.instructionSet.renderPipes = renderPipes;\n\n            if (!renderGroup.structureDidChange)\n            {\n                // phase 1 - validate all the renderables\n                validateRenderables(renderGroup, renderPipes);\n            }\n\n            // phase 2 - update all the transforms\n            // including updating the renderables..\n            updateRenderGroupTransforms(renderGroup);\n\n            if (renderGroup.structureDidChange)\n            {\n                renderGroup.structureDidChange = false;\n\n                // build the renderables\n                buildInstructions(renderGroup, renderPipes);\n            }\n            else\n            {\n                // update remaining renderables\n                updateRenderables(renderGroup);\n            }\n\n            // reset the renderables to update\n            renderGroup.childrenRenderablesToUpdate.index = 0;\n\n            // upload all the things!\n            renderer.renderPipes.batch.upload(renderGroup.instructionSet);\n        }\n\n        renderer.globalUniforms.start({\n            worldTransformMatrix: transform ? container.renderGroup.localTransform : container.renderGroup.worldTransform,\n            worldColor: container.renderGroup.worldColorAlpha,\n\n        });\n\n        executeInstructions(container.renderGroup, renderPipes);\n\n        // TODO need to add some events / runners for things like this to hook up to\n        if (renderPipes.uniformBatch)\n        {\n            renderPipes.uniformBatch.renderEnd();\n        }\n\n        if (transform)\n        {\n            container.renderGroup.localTransform.copyFrom(originalLocalTransform);\n        }\n\n        container.parent = parent;\n        container.renderGroup.renderGroupParent = renderGroupParent;\n    }\n\n    public destroy()\n    {\n        (this._renderer as null) = null;\n    }\n}\n\nfunction updateRenderables(renderGroup: RenderGroup)\n{\n    const { list, index } = renderGroup.childrenRenderablesToUpdate;\n\n    for (let i = 0; i < index; i++)\n    {\n        const container = list[i];\n\n        if (container.didViewUpdate)\n        {\n            renderGroup.updateRenderable(container);\n        }\n    }\n}\n\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { BatchableSprite } from './BatchableSprite';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { PoolItem } from '../../utils/pool/Pool';\nimport type { Sprite } from './Sprite';\n\nexport class SpritePipe implements RenderPipe<Sprite>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'sprite',\n    } as const;\n\n    private _renderer: Renderer;\n    private _gpuSpriteHash: Record<number, BatchableSprite> = Object.create(null);\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public addRenderable(sprite: Sprite, _instructionSet: InstructionSet)\n    {\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        if (sprite._didSpriteUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        // TODO visibility\n        this._renderer.renderPipes.batch.addToBatch(gpuSprite);\n    }\n\n    public updateRenderable(sprite: Sprite)\n    {\n        const gpuSprite = this._gpuSpriteHash[sprite.uid];\n\n        if (sprite._didSpriteUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        gpuSprite.batcher.updateElement(gpuSprite);\n    }\n\n    public validateRenderable(sprite: Sprite): boolean\n    {\n        const texture = sprite._texture;\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        if (gpuSprite.texture._source !== texture._source)\n        {\n            return !gpuSprite.batcher.checkAndUpdateTexture(gpuSprite, texture);\n        }\n\n        return false;\n    }\n\n    public destroyRenderable(sprite: Sprite)\n    {\n        const batchableSprite = this._gpuSpriteHash[sprite.uid];\n\n        // this will call reset!\n        BigPool.return(batchableSprite as PoolItem);\n\n        this._gpuSpriteHash[sprite.uid] = null;\n    }\n\n    private _updateBatchableSprite(sprite: Sprite, batchableSprite: BatchableSprite)\n    {\n        sprite._didSpriteUpdate = false;\n        batchableSprite.bounds = sprite.bounds;\n        batchableSprite.texture = sprite._texture;\n    }\n\n    private _getGpuSprite(sprite: Sprite): BatchableSprite\n    {\n        return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n    }\n\n    private _initGPUSprite(sprite: Sprite): BatchableSprite\n    {\n        const batchableSprite = BigPool.get(BatchableSprite);\n\n        batchableSprite.renderable = sprite;\n\n        batchableSprite.texture = sprite._texture;\n        batchableSprite.bounds = sprite.bounds;\n        batchableSprite.roundPixels = (this._renderer._roundPixels | sprite._roundPixels) as 0 | 1;\n\n        this._gpuSpriteHash[sprite.uid] = batchableSprite;\n\n        sprite._didSpriteUpdate = false;\n\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        sprite.on('destroyed', () =>\n        {\n            this.destroyRenderable(sprite);\n        });\n\n        return batchableSprite;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuSpriteHash)\n        {\n            BigPool.return(this._gpuSpriteHash[i] as PoolItem);\n        }\n\n        this._gpuSpriteHash = null;\n        this._renderer = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { State } from '../../renderers/shared/state/State';\nimport { BatchGeometry } from '../gpu/BatchGeometry';\nimport { Batcher } from './Batcher';\n\nimport type { Geometry } from '../../renderers/shared/geometry/Geometry';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type { BatchPipe, InstructionPipe } from '../../renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../renderers/types';\nimport type { Batch, BatchableObject } from './Batcher';\n\nexport interface BatcherAdaptor\n{\n    start(batchPipe: BatcherPipe, geometry: Geometry): void\n    init(batchPipe: BatcherPipe): void;\n    execute(batchPipe: BatcherPipe, batch: Batch): void\n    destroy(): void;\n    contextChange?(): void;\n}\n\n// eslint-disable-next-line max-len\nexport class BatcherPipe implements InstructionPipe<Batch>, BatchPipe\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'batch',\n    } as const;\n\n    public state: State = State.for2d();\n    public renderer: Renderer;\n\n    private _batches: Record<number, Batcher> = Object.create(null);\n    private _geometries: Record<number, BatchGeometry> = Object.create(null);\n    private _adaptor: BatcherAdaptor;\n\n    private _activeBatch: Batcher;\n    private _activeGeometry: Geometry;\n\n    constructor(renderer: Renderer, adaptor: BatcherAdaptor)\n    {\n        this.renderer = renderer;\n        this._adaptor = adaptor;\n\n        this._adaptor.init(this);\n    }\n\n    public buildStart(instructionSet: InstructionSet)\n    {\n        if (!this._batches[instructionSet.uid])\n        {\n            const batcher = new Batcher();\n\n            this._batches[instructionSet.uid] = batcher;\n            this._geometries[batcher.uid] = new BatchGeometry();\n        }\n\n        this._activeBatch = this._batches[instructionSet.uid];\n        this._activeGeometry = this._geometries[this._activeBatch.uid];\n\n        this._activeBatch.begin();\n    }\n\n    public addToBatch(batchableObject: BatchableObject)\n    {\n        this._activeBatch.add(batchableObject);\n    }\n\n    public break(instructionSet: InstructionSet)\n    {\n        this._activeBatch.break(instructionSet);\n    }\n\n    public buildEnd(instructionSet: InstructionSet)\n    {\n        const activeBatch = this._activeBatch;\n        const geometry = this._activeGeometry;\n\n        activeBatch.finish(instructionSet);\n\n        geometry.indexBuffer.setDataWithSize(activeBatch.indexBuffer, activeBatch.indexSize, true);\n\n        geometry.buffers[0].setDataWithSize(activeBatch.attributeBuffer.float32View, activeBatch.attributeSize, false);\n    }\n\n    public upload(instructionSet: InstructionSet)\n    {\n        const batcher = this._batches[instructionSet.uid];\n        const geometry = this._geometries[batcher.uid];\n\n        if (batcher.dirty)\n        {\n            batcher.dirty = false;\n            geometry.buffers[0].update(batcher.attributeSize * 4);\n        }\n    }\n\n    public execute(batch: Batch)\n    {\n        if (batch.action === 'startBatch')\n        {\n            const batcher = batch.batcher;\n            const geometry = this._geometries[batcher.uid];\n\n            this._adaptor.start(this, geometry);\n        }\n\n        this._adaptor.execute(this, batch);\n    }\n\n    public destroy()\n    {\n        this.state = null;\n        this.renderer = null;\n\n        this._adaptor.destroy();\n        this._adaptor = null;\n\n        for (const i in this._batches)\n        {\n            this._batches[i].destroy();\n        }\n\n        this._batches = null;\n\n        for (const i in this._geometries)\n        {\n            this._geometries[i].destroy();\n        }\n\n        this._geometries = null;\n    }\n}\n","import { GlProgram } from '../rendering/renderers/gl/shader/GlProgram';\nimport { GpuProgram } from '../rendering/renderers/gpu/shader/GpuProgram';\nimport { Shader } from '../rendering/renderers/shared/shader/Shader';\nimport { State } from '../rendering/renderers/shared/state/State';\n\nimport type { RenderSurface } from '../rendering/renderers/shared/renderTarget/RenderTargetSystem';\nimport type {\n    IShaderWithResources,\n    ShaderFromResources,\n    ShaderWithResources\n} from '../rendering/renderers/shared/shader/Shader';\nimport type { BLEND_MODES } from '../rendering/renderers/shared/state/const';\nimport type { Texture } from '../rendering/renderers/shared/texture/Texture';\nimport type { FilterSystem } from './FilterSystem';\n\n/**\n * Filters provide additional shading and post-processing effects to any display object and its children\n * they are attached to.\n *\n * You attached filters to a display object using its `filters` array property.\n *\n * ```js\n * import { Sprite, BlurFilter, HardMixBlend } from 'pixi.js';\n *\n * const sprite = Sprite.from('myTexture.png');\n *\n * // single filter\n * sprite.filters = new BlurFilter({ strength: 8 });\n *\n * // or multiple filters\n * sprite.filters = [new BlurFilter({ strength: 8 }), new HardMixBlend()];\n * ```\n *\n * Pixi has a number of built-in filters which can be used in your game or application:\n *\n * - {@link filters.AlphaFilter} - Applies alpha to the display object and any of its children.\n * - {@link filters.BlurFilter} - Applies a Gaussian blur to the display object.\n * - {@link filters.BlurFilterPass} - Applies a blur pass to an object.\n * - {@link filters.ColorBurnBlend} - Blend mode to add color burn to display objects.\n * - {@link filters.ColorDodgeBlend} - Blend mode to add color dodge to display objects.\n * - {@link filters.ColorMatrixFilter} - Transform the color channels by matrix multiplication.\n * - {@link filters.DarkenBlend} - Blend mode to darken display objects.\n * - {@link filters.DisplacementFilter} - Applies a displacement map to distort an object.\n * - {@link filters.DivideBlend} - Blend mode to divide display objects.\n * - {@link filters.HardMixBlend} - Blend mode to hard mix display objects.\n * - {@link filters.LinearBurnBlend} - Blend mode to add linear burn to display objects.\n * - {@link filters.LinearDodgeBlend} - Blend mode to add linear dodge to display objects.\n * - {@link filters.LinearLightBlend} - Blend mode to add linear light to display objects.\n * - {@link filters.NoiseFilter} - Applies random noise to an object.\n * - {@link filters.PinLightBlend} - Blend mode to add pin light to display objects.\n * - {@link filters.SubtractBlend} - Blend mode to subtract display objects.\n *\n * <br/>\n * For more available filters, check out the\n *  {@link https://pixijs.io/filters/docs/ pixi-filters} repository.\n *\n * You can also check out the awesome {@link https://pixijs.io/filters/examples/ Filter demo} to see\n * filters in action and combine them!\n * @namespace filters\n */\n\n/**\n * The options to use when creating a new filter.\n * @memberof filters\n */\nexport interface FilterOptions\n{\n    /** optional blend mode used by the filter when rendering (defaults to 'normal') */\n    blendMode?: BLEND_MODES;\n    /**\n     * the resolution the filter should be rendered at. The lower the resolution, the more performant\n     * the filter will be, but the lower the quality of the output. (defaults to the renderers resolution)\n     * Consider lowering this for things like blurs filters\n     */\n    resolution?: number;\n    /**\n     * the amount of pixels to pad the container with when applying the filter. For example a blur extends the\n     * container out as it blurs, so padding is applied to ensure that extra detail is rendered as well\n     * without clipping occurring. (default 0)\n     */\n    padding?: number;\n    /**\n     * If true the filter will make use of antialiasing. Although it looks better this can have a performance impact.\n     * By default, the filter will detect the antialiasing of the renderer and change this automatically.\n     * Definitely don't set this to true if the renderer has antialiasing set to false. As it will antialias,\n     * but you won't see the difference.\n     *\n     * This can be a boolean or [FilterAntialias]{@link filters.FilterAntialias} string.\n     */\n    antialias?: FilterAntialias | boolean;\n    /**\n     * If this is set to true, the filter system will grab a snap shot oif the are being rendered\n     * to and pass this into the shader. This is useful for blend modes that need to be aware of the pixels\n     * they are rendering to. Only use if you need that data, otherwise its an extra gpu copy you don't need!\n     * (default false)\n     */\n    blendRequired?: boolean;\n}\n\n/** Filter options mixed with shader resources. A filter needs a shader and some resources to work. */\nexport type FilterWithShader = FilterOptions & IShaderWithResources;\n\n/**\n * The antialiasing mode of the filter. This can be either:\n * - `on` - the filter is always antialiased regardless of the renderer settings\n * - `off` - the filter is never antialiased regardless of the renderer settings\n * - `inherit` - (default) the filter uses the antialias settings of the renderer\n * @memberof filters\n */\nexport type FilterAntialias = 'on' | 'off' | 'inherit';\n\n/**\n * The Filter class is the base for all filter effects used in Pixi.js\n * As it extends a shader, it requires that a glProgram is parsed in to work with WebGL and a gpuProgram for WebGPU.\n * If you don't proved one, then the filter is skipped and just rendered as if it wasn't there for that renderer.\n *\n * A filter can be applied to anything that extends Container in Pixi.js which also includes Sprites, Graphics etc.\n *\n * Its worth noting Performance-wise filters can be pretty expensive if used too much in a single scene.\n * The following happens under the hood when a filter is applied:\n *\n * .1. Break the current batch\n * <br>\n * .2. The target is measured using getGlobalBounds\n * (recursively go through all children and figure out how big the object is)\n * <br>\n * .3. Get the closest Po2 Textures from the texture pool\n * <br>\n * .4. Render the target to that texture\n * <br>\n * .5. Render that texture back to the main frame buffer as a quad using the filters program.\n * <br>\n * <br>\n * Some filters (such as blur) require multiple passes too which can result in an even bigger performance hit. So be careful!\n * Its not generally the complexity of the shader that is the bottle neck,\n * but all the framebuffer / shader switching that has to take place.\n * One filter applied to a container with many objects is MUCH faster than many filter applied to many objects.\n * @class\n * @memberof filters\n */\nexport class Filter extends Shader\n{\n    /**\n     * The default filter settings\n     * @static\n     */\n    public static readonly defaultOptions: FilterOptions = {\n        blendMode: 'normal',\n        resolution: 1,\n        padding: 0,\n        antialias: 'off',\n        blendRequired: false,\n    };\n\n    /**\n     * The padding of the filter. Some filters require extra space to breath such as a blur.\n     * Increasing this will add extra width and height to the bounds of the object that the\n     * filter is applied to.\n     * @default 0\n     */\n    public padding: number;\n\n    /**\n     * should the filter use antialiasing?\n     * @default inherit\n     */\n    public antialias: FilterAntialias;\n\n    /** If enabled is true the filter is applied, if false it will not. */\n    public enabled = true;\n\n    /**\n     * The gpu state the filter requires to render.\n     * @internal\n     * @ignore\n     */\n    public _state = State.for2d();\n\n    /**\n     * The resolution of the filter. Setting this to be lower will lower the quality but\n     * increase the performance of the filter.\n     * @default 1\n     */\n    public resolution: number;\n\n    /**\n     * Whether or not this filter requires the previous render texture for blending.\n     * @default false\n     */\n    public blendRequired: boolean;\n\n    /**\n     * @param options - The optional parameters of this filter.\n     */\n    constructor(options: FilterWithShader)\n    {\n        options = { ...Filter.defaultOptions, ...options };\n\n        super(options as ShaderWithResources);\n\n        this.padding = options.padding;\n\n        // check if is boolean\n        if (typeof options.antialias === 'boolean')\n        {\n            this.antialias = options.antialias ? 'on' : 'off';\n        }\n        else\n        {\n            this.antialias = options.antialias;\n        }\n\n        this.resolution = options.resolution;\n        this.blendRequired = options.blendRequired;\n\n        this.addResource('uTexture', 0, 1);\n    }\n\n    /**\n     * Applies the filter\n     * @param filterManager - The renderer to retrieve the filter from\n     * @param input - The input render target.\n     * @param output - The target to output to.\n     * @param clearMode - Should the output be cleared before rendering to it\n     */\n    public apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: RenderSurface,\n        clearMode: boolean\n    ): void\n    {\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n\n    /**\n     * Get the blend mode of the filter.\n     * @default \"normal\"\n     */\n    get blendMode(): BLEND_MODES\n    {\n        return this._state.blendMode;\n    }\n\n    /** Sets the blend mode of the filter. */\n    set blendMode(value: BLEND_MODES)\n    {\n        this._state.blendMode = value;\n    }\n\n    /**\n     * A short hand function to create a filter based of a vertex and fragment shader src.\n     * @param options\n     * @returns A shiny new PixiJS filter!\n     */\n    public static from(options: FilterOptions & ShaderFromResources): Filter\n    {\n        const { gpu, gl, ...rest } = options;\n\n        let gpuProgram: GpuProgram;\n        let glProgram: GlProgram;\n\n        if (gpu)\n        {\n            gpuProgram = GpuProgram.from(gpu);\n        }\n\n        if (gl)\n        {\n            glProgram = GlProgram.from(gl);\n        }\n\n        return new Filter({\n            gpuProgram,\n            glProgram,\n            ...rest\n        });\n    }\n}\n","import { Matrix } from '../../maths/matrix/Matrix';\nimport { GlProgram } from '../../rendering/renderers/gl/shader/GlProgram';\nimport { GpuProgram } from '../../rendering/renderers/gpu/shader/GpuProgram';\nimport { UniformGroup } from '../../rendering/renderers/shared/shader/UniformGroup';\nimport { TextureMatrix } from '../../rendering/renderers/shared/texture/TextureMatrix';\nimport { Filter } from '../Filter';\nimport fragment from './mask.frag';\nimport vertex from './mask.vert';\nimport source from './mask.wgsl';\n\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { Sprite } from '../../scene/sprite/Sprite';\nimport type { FilterOptions } from '../Filter';\nimport type { FilterSystem } from '../FilterSystem';\n\nexport interface MaskFilterOptions extends FilterOptions\n{\n    sprite: Sprite,\n    scale?: number | { x: number, y: number },\n}\n\nexport class MaskFilter extends Filter\n{\n    public sprite: Sprite;\n    private readonly _textureMatrix: TextureMatrix;\n\n    constructor(options: MaskFilterOptions)\n    {\n        const { sprite, ...rest } = options;\n\n        const textureMatrix = new TextureMatrix(sprite.texture);\n\n        const filterUniforms = new UniformGroup({\n            uFilterMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uMaskClamp: { value: textureMatrix.uClampFrame, type: 'vec4<f32>' },\n            uAlpha: { value: 1, type: 'f32' },\n        });\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'mask-filter',\n        });\n\n        super({\n            ...rest,\n            gpuProgram,\n            glProgram,\n            resources: {\n                filterUniforms,\n                uMaskTexture: sprite.texture.source,\n            },\n        });\n\n        this.sprite = sprite;\n\n        this._textureMatrix = textureMatrix;\n    }\n\n    public apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: Texture,\n        clearMode: boolean\n    ): void\n    {\n        // will trigger an update if the texture changed..\n        this._textureMatrix.texture = this.sprite.texture;\n\n        filterManager.calculateSpriteMatrix(\n            this.resources.filterUniforms.uniforms.uFilterMatrix as Matrix,\n            this.sprite\n        ).prepend(this._textureMatrix.mapCoord);\n\n        this.resources.uMaskTexture = this.sprite.texture.source;\n\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { FilterEffect } from '../../../filters/FilterEffect';\nimport { MaskFilter } from '../../../filters/mask/MaskFilter';\nimport { Bounds } from '../../../scene/container/bounds/Bounds';\nimport { getGlobalBounds } from '../../../scene/container/bounds/getGlobalBounds';\nimport { collectAllRenderables } from '../../../scene/container/utils/buildInstructions';\nimport { Sprite } from '../../../scene/sprite/Sprite';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { Texture } from '../../renderers/shared/texture/Texture';\nimport { TexturePool } from '../../renderers/shared/texture/TexturePool';\n\nimport type { Container } from '../../../scene/container/Container';\nimport type { Effect } from '../../../scene/container/Effect';\nimport type { PoolItem } from '../../../utils/pool/Pool';\nimport type { Instruction } from '../../renderers/shared/instructions/Instruction';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../../renderers/shared/instructions/RenderPipe';\nimport type { RenderTarget } from '../../renderers/shared/renderTarget/RenderTarget';\nimport type { Renderer } from '../../renderers/types';\nimport type { AlphaMask } from './AlphaMask';\n\ntype MaskMode = 'pushMaskBegin' | 'pushMaskEnd' | 'popMaskBegin' | 'popMaskEnd';\n\nconst tempBounds = new Bounds();\n\nclass AlphaMaskEffect extends FilterEffect implements PoolItem\n{\n    constructor()\n    {\n        super({\n            filters: [new MaskFilter({\n                sprite: new Sprite(Texture.EMPTY)\n            })]\n        });\n    }\n\n    get sprite(): Sprite\n    {\n        return (this.filters[0] as MaskFilter).sprite;\n    }\n\n    set sprite(value: Sprite)\n    {\n        (this.filters[0] as MaskFilter).sprite = value;\n    }\n\n    public init: () => void;\n}\n\nexport interface AlphaMaskInstruction extends Instruction\n{\n    renderPipeId: 'alphaMask',\n    action: MaskMode,\n    mask: AlphaMask,\n    maskedContainer: Container,\n    renderMask: boolean,\n}\n\nexport interface AlphaMaskData\n{\n    filterEffect: AlphaMaskEffect,\n    maskedContainer: Container,\n    previousRenderTarget?: RenderTarget,\n    filterTexture?: Texture,\n}\n\nexport class AlphaMaskPipe implements InstructionPipe<AlphaMaskInstruction>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'alphaMask',\n    } as const;\n\n    private _renderer: Renderer;\n    private _activeMaskStage: AlphaMaskData[] = [];\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public push(mask: Effect, maskedContainer: Container, instructionSet: InstructionSet): void\n    {\n        const renderer = this._renderer;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'alphaMask',\n            action: 'pushMaskBegin',\n            mask,\n            canBundle: false,\n            maskedContainer\n        } as AlphaMaskInstruction);\n\n        if ((mask as AlphaMask).renderMaskToTexture)\n        {\n            const maskContainer = (mask as AlphaMask).mask;\n\n            maskContainer.includeInBuild = true;\n\n            collectAllRenderables(\n                maskContainer,\n                instructionSet,\n                renderer.renderPipes\n            );\n\n            maskContainer.includeInBuild = false;\n        }\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'alphaMask',\n            action: 'pushMaskEnd',\n            mask,\n            maskedContainer,\n            canBundle: false,\n        } as AlphaMaskInstruction);\n    }\n\n    public pop(mask: Effect, _maskedContainer: Container, instructionSet: InstructionSet): void\n    {\n        const renderer = this._renderer;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'alphaMask',\n            action: 'popMaskEnd',\n            mask,\n            canBundle: false,\n        } as AlphaMaskInstruction);\n    }\n\n    public execute(instruction: AlphaMaskInstruction)\n    {\n        const renderer = this._renderer;\n        const renderMask = instruction.mask.renderMaskToTexture;\n\n        if (instruction.action === 'pushMaskBegin')\n        {\n            const filterEffect = BigPool.get(AlphaMaskEffect);\n\n            if (renderMask)\n            {\n                instruction.mask.mask.measurable = true;\n\n                const bounds = getGlobalBounds(instruction.mask.mask, true, tempBounds);\n\n                instruction.mask.mask.measurable = false;\n\n                bounds.ceil();\n\n                const filterTexture = TexturePool.getOptimalTexture(\n                    bounds.width,\n                    bounds.height,\n                    1,\n                    false\n                );\n\n                renderer.renderTarget.push(filterTexture, true);\n\n                renderer.globalUniforms.push({\n                    offset: bounds,\n                    worldColor: 0xFFFFFFFF\n                });\n\n                const sprite = filterEffect.sprite;\n\n                sprite.texture = filterTexture;\n\n                sprite.worldTransform.tx = bounds.minX;\n                sprite.worldTransform.ty = bounds.minY;\n\n                this._activeMaskStage.push({\n                    filterEffect,\n                    maskedContainer: instruction.maskedContainer,\n                    filterTexture,\n                });\n            }\n            else\n            {\n                filterEffect.sprite = instruction.mask.mask as Sprite;\n\n                this._activeMaskStage.push({\n                    filterEffect,\n                    maskedContainer: instruction.maskedContainer,\n                });\n            }\n        }\n        else if (instruction.action === 'pushMaskEnd')\n        {\n            const maskData = this._activeMaskStage[this._activeMaskStage.length - 1];\n\n            if (renderMask)\n            {\n                renderer.renderTarget.pop();\n                renderer.globalUniforms.pop();\n            }\n\n            renderer.filter.push({\n                renderPipeId: 'filter',\n                action: 'pushFilter',\n                container: maskData.maskedContainer,\n                filterEffect: maskData.filterEffect,\n                canBundle: false,\n            });\n        }\n        else if (instruction.action === 'popMaskEnd')\n        {\n            renderer.filter.pop();\n\n            const maskData = this._activeMaskStage.pop();\n\n            if (renderMask)\n            {\n                TexturePool.returnTexture(maskData.filterTexture);\n            }\n\n            BigPool.return(maskData.filterEffect);\n        }\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n        this._activeMaskStage = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\n\nimport type { Container } from '../../../scene/container/Container';\nimport type { Effect } from '../../../scene/container/Effect';\nimport type { Instruction } from '../../renderers/shared/instructions/Instruction';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../../renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../renderers/types';\nimport type { ColorMask } from './ColorMask';\n\nexport interface ColorMaskInstruction extends Instruction\n{\n    renderPipeId: 'colorMask',\n    colorMask: number,\n}\n\nexport class ColorMaskPipe implements InstructionPipe<ColorMaskInstruction>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'colorMask',\n    } as const;\n\n    private readonly _renderer: Renderer;\n    private _colorStack: number[] = [];\n    private _colorStackIndex = 0;\n    private _currentColor = 0;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public buildStart()\n    {\n        this._colorStack[0] = 0xF;\n        this._colorStackIndex = 1;\n        this._currentColor = 0xF;\n    }\n\n    public push(mask: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        const renderer = this._renderer;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        const colorStack = this._colorStack;\n\n        colorStack[this._colorStackIndex] = colorStack[this._colorStackIndex - 1] & (mask as ColorMask).mask;\n\n        const currentColor = this._colorStack[this._colorStackIndex];\n\n        if (currentColor !== this._currentColor)\n        {\n            this._currentColor = currentColor;\n            instructionSet.add({\n                renderPipeId: 'colorMask',\n                colorMask: currentColor,\n                canBundle: false,\n            } as ColorMaskInstruction);\n        }\n\n        this._colorStackIndex++;\n    }\n\n    public pop(_mask: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        const renderer = this._renderer;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        const colorStack = this._colorStack;\n\n        this._colorStackIndex--;\n\n        const currentColor = colorStack[this._colorStackIndex - 1];\n\n        if (currentColor !== this._currentColor)\n        {\n            this._currentColor = currentColor;\n\n            instructionSet.add({\n                renderPipeId: 'colorMask',\n                colorMask: currentColor,\n                canBundle: false,\n            } as ColorMaskInstruction);\n        }\n    }\n\n    public execute(instruction: ColorMaskInstruction)\n    {\n        const renderer = this._renderer;\n\n        renderer.colorMask.setMask(instruction.colorMask);\n    }\n\n    public destroy()\n    {\n        this._colorStack = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { collectAllRenderables } from '../../../scene/container/utils/buildInstructions';\nimport { CLEAR } from '../../renderers/gl/const';\nimport { STENCIL_MODES } from '../../renderers/shared/state/const';\n\nimport type { Container } from '../../../scene/container/Container';\nimport type { Effect } from '../../../scene/container/Effect';\nimport type { Instruction } from '../../renderers/shared/instructions/Instruction';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../../renderers/shared/instructions/RenderPipe';\nimport type { Renderable } from '../../renderers/shared/Renderable';\nimport type { Renderer } from '../../renderers/types';\nimport type { StencilMask } from './StencilMask';\n\ntype MaskMode = 'pushMaskBegin' | 'pushMaskEnd' | 'popMaskBegin' | 'popMaskEnd';\n\nexport interface StencilMaskInstruction extends Instruction\n{\n    renderPipeId: 'stencilMask',\n    action: MaskMode,\n    mask: StencilMask,\n}\n\nexport class StencilMaskPipe implements InstructionPipe<StencilMaskInstruction>\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'stencilMask',\n    } as const;\n\n    private _renderer: Renderer;\n\n    // used when building and also when executing..\n    private _maskStackHash: Record<number, number> = {};\n\n    private _maskHash = new WeakMap<StencilMask, {\n        instructionsStart: number,\n        instructionsLength: number,\n    }>();\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public push(mask: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        const effect = mask as StencilMask;\n\n        const renderer = this._renderer;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        renderer.renderPipes.blendMode.setBlendMode(effect.mask as Renderable, 'none', instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'stencilMask',\n            action: 'pushMaskBegin',\n            mask,\n            canBundle: false,\n        } as StencilMaskInstruction);\n\n        const maskContainer = effect.mask;\n\n        maskContainer.includeInBuild = true;\n\n        if (!this._maskHash.has(effect))\n        {\n            this._maskHash.set(effect, {\n                instructionsStart: 0,\n                instructionsLength: 0,\n            });\n        }\n\n        const maskData = this._maskHash.get(effect);\n\n        maskData.instructionsStart = instructionSet.instructionSize;\n\n        collectAllRenderables(\n            maskContainer,\n            instructionSet,\n            renderer.renderPipes,\n        );\n\n        maskContainer.includeInBuild = false;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'stencilMask',\n            action: 'pushMaskEnd',\n            mask,\n            canBundle: false,\n        } as StencilMaskInstruction);\n\n        const instructionsLength = instructionSet.instructionSize - maskData.instructionsStart - 1;\n\n        maskData.instructionsLength = instructionsLength;\n\n        const renderTargetUid = renderer.renderTarget.renderTarget.uid;\n\n        this._maskStackHash[renderTargetUid] ??= 0;\n    }\n\n    public pop(mask: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        const effect = mask as StencilMask;\n\n        const renderer = this._renderer;\n\n        // stencil is stored based on current render target..\n        renderer.renderPipes.batch.break(instructionSet);\n        renderer.renderPipes.blendMode.setBlendMode(effect.mask as Renderable, 'none', instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'stencilMask',\n            action: 'popMaskBegin',\n            canBundle: false,\n        });\n\n        const maskData = this._maskHash.get(mask as StencilMask);\n\n        for (let i = 0; i < maskData.instructionsLength; i++)\n        {\n            // eslint-disable-next-line max-len\n            instructionSet.instructions[instructionSet.instructionSize++] = instructionSet.instructions[maskData.instructionsStart++];\n        }\n\n        instructionSet.add({\n            renderPipeId: 'stencilMask',\n            action: 'popMaskEnd',\n            canBundle: false,\n        });\n    }\n\n    public execute(instruction: StencilMaskInstruction)\n    {\n        const renderer = this._renderer;\n        const renderTargetUid = renderer.renderTarget.renderTarget.uid;\n\n        let maskStackIndex = this._maskStackHash[renderTargetUid] ??= 0;\n\n        if (instruction.action === 'pushMaskBegin')\n        {\n            // we create the depth and stencil buffers JIT\n            // as no point allocating the memory if we don't use it\n            renderer.renderTarget.ensureDepthStencil();\n\n            renderer.stencil.setStencilMode(STENCIL_MODES.RENDERING_MASK_ADD, maskStackIndex);\n\n            maskStackIndex++;\n\n            renderer.colorMask.setMask(0);\n        }\n        else if (instruction.action === 'pushMaskEnd')\n        {\n            renderer.stencil.setStencilMode(STENCIL_MODES.MASK_ACTIVE, maskStackIndex);\n            renderer.colorMask.setMask(0xF);\n        }\n        else if (instruction.action === 'popMaskBegin')\n        {\n            renderer.colorMask.setMask(0);\n\n            if (maskStackIndex !== 0)\n            {\n                renderer.stencil.setStencilMode(STENCIL_MODES.RENDERING_MASK_REMOVE, maskStackIndex);\n            }\n            else\n            {\n                renderer.renderTarget.clear(null, CLEAR.STENCIL);\n                renderer.stencil.setStencilMode(STENCIL_MODES.DISABLED, maskStackIndex);\n            }\n\n            maskStackIndex--;\n        }\n        else if (instruction.action === 'popMaskEnd')\n        {\n            renderer.stencil.setStencilMode(STENCIL_MODES.MASK_ACTIVE, maskStackIndex);\n\n            renderer.colorMask.setMask(0xF);\n        }\n\n        this._maskStackHash[renderTargetUid] = maskStackIndex;\n    }\n\n    public destroy()\n    {\n        this._renderer = null;\n        this._maskStackHash = null;\n        this._maskHash = null;\n    }\n}\n","import { Color } from '../../../../color/Color';\nimport { ExtensionType } from '../../../../extensions/Extensions';\n\nimport type { ColorSource, RgbaArray } from '../../../../color/Color';\nimport type { System } from '../system/System';\n\n/**\n * Options for the background system.\n * @property {ColorSource} [backgroundColor='black']\n * The background color used to clear the canvas. See {@link ColorSource} for accepted color values.\n * @property {ColorSource} [background] - Alias for backgroundColor\n * @property {number} [backgroundAlpha=1] -\n * Transparency of the background color, value from `0` (fully transparent) to `1` (fully opaque).\n * @property {boolean} [clearBeforeRender=true] - Whether to clear the canvas before new render passes.\n * @memberof rendering\n */\nexport interface BackgroundSystemOptions\n{\n    /**\n     * The background color used to clear the canvas. See {@link ColorSource} for accepted color values.\n     * @memberof rendering.SharedRendererOptions\n     * @default 'black'\n     */\n    backgroundColor: ColorSource;\n    /**\n     * Alias for backgroundColor\n     * @memberof rendering.SharedRendererOptions\n     */\n    background?: ColorSource\n    /**\n     * Transparency of the background color, value from `0` (fully transparent) to `1` (fully opaque).\n     * @memberof rendering.SharedRendererOptions\n     * @default 1\n     */\n    backgroundAlpha: number;\n    /**\n     * Whether to clear the canvas before new render passes.\n     * @memberof rendering.SharedRendererOptions\n     * @default true\n     */\n    clearBeforeRender: boolean;\n}\n\n/**\n * The background system manages the background color and alpha of the main view.\n * @memberof rendering\n */\nexport class BackgroundSystem implements System<BackgroundSystemOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'background',\n        priority: 0,\n    } as const;\n\n    /** default options used by the system */\n    public static defaultOptions: BackgroundSystemOptions = {\n        /**\n         * {@link WebGLOptions.backgroundAlpha}\n         * @default 1\n         */\n        backgroundAlpha: 1,\n        /**\n         * {@link WebGLOptions.backgroundColor}\n         * @default 0x000000\n         */\n        backgroundColor: 0x0,\n        /**\n         * {@link WebGLOptions.clearBeforeRender}\n         * @default true\n         */\n        clearBeforeRender: true,\n    };\n\n    /**\n     * This sets if the CanvasRenderer will clear the canvas or not before the new render pass.\n     * If the scene is NOT transparent PixiJS will use a canvas sized fillRect operation every\n     * frame to set the canvas background color. If the scene is transparent PixiJS will use clearRect\n     * to clear the canvas every frame. Disable this by setting this to false. For example, if\n     * your game has a canvas filling background image you often don't need this set.\n     */\n    public clearBeforeRender: boolean;\n\n    private readonly _backgroundColor: Color;\n\n    constructor()\n    {\n        this.clearBeforeRender = true;\n\n        this._backgroundColor = new Color(0x000000);\n\n        this.color = this._backgroundColor; // run bg color setter\n        this.alpha = 1;\n    }\n\n    /**\n     * initiates the background system\n     * @param options - the options for the background colors\n     */\n    public init(options: BackgroundSystemOptions): void\n    {\n        options = { ...BackgroundSystem.defaultOptions, ...options };\n\n        this.clearBeforeRender = options.clearBeforeRender;\n        this.color = options.background || options.backgroundColor || this._backgroundColor; // run bg color setter\n        this.alpha = options.backgroundAlpha;\n\n        this._backgroundColor.setAlpha(options.backgroundAlpha);\n    }\n\n    /** The background color to fill if not transparent */\n    get color(): Color\n    {\n        return this._backgroundColor;\n    }\n\n    set color(value: ColorSource)\n    {\n        this._backgroundColor.setValue(value);\n    }\n\n    /** The background color alpha. Setting this to 0 will make the canvas transparent. */\n    get alpha(): number\n    {\n        return this._backgroundColor.alpha;\n    }\n\n    set alpha(value: number)\n    {\n        this._backgroundColor.setAlpha(value);\n    }\n\n    /** The background color as an [R, G, B, A] array. */\n    get colorRgba(): RgbaArray\n    {\n        return this._backgroundColor.toArray() as RgbaArray;\n    }\n\n    /**\n     * destroys the background system\n     * @internal\n     * @ignore\n     */\n    public destroy(): void\n    {\n        // No cleanup required\n    }\n}\n","import { extensions, ExtensionType } from '../../../../extensions/Extensions';\nimport { FilterEffect } from '../../../../filters/FilterEffect';\nimport { warn } from '../../../../utils/logging/warn';\n\nimport type { BlendModeFilter } from '../../../../filters/blend-modes/BlendModeFilter';\nimport type { FilterInstruction } from '../../../../filters/FilterSystem';\nimport type { Renderer } from '../../types';\nimport type { Instruction } from '../instructions/Instruction';\nimport type { InstructionSet } from '../instructions/InstructionSet';\nimport type { InstructionPipe } from '../instructions/RenderPipe';\nimport type { Renderable } from '../Renderable';\nimport type { BLEND_MODES } from '../state/const';\n\ninterface AdvancedBlendInstruction extends Instruction\n{\n    renderPipeId: 'blendMode',\n    blendMode: BLEND_MODES,\n    activeBlend: Renderable[],\n}\n\n// class map\nconst BLEND_MODE_FILTERS: Partial<Record<BLEND_MODES, new () => BlendModeFilter>> = {} as const;\n\nextensions.handle(ExtensionType.BlendMode, (value) =>\n{\n    if (!value.name)\n    {\n        throw new Error('BlendMode extension must have a name property');\n    }\n    BLEND_MODE_FILTERS[value.name as BLEND_MODES] = value.ref;\n}, (value) =>\n{\n    delete BLEND_MODE_FILTERS[value.name as BLEND_MODES];\n});\n\n/**\n * This Pipe handles the blend mode switching of the renderer.\n * It will insert instructions into the {@link renderers.InstructionSet} to switch the blend mode according to the\n * blend modes of the scene graph.\n *\n * This pipe is were wwe handle Advanced blend modes. Advanced blend modes essentially wrap the renderables\n * in a filter that applies the blend mode.\n *\n * You only need to use this class if you are building your own render instruction set rather than letting PixiJS build\n * the instruction set for you by traversing the scene graph\n * @memberof rendering\n */\nexport class BlendModePipe implements InstructionPipe<AdvancedBlendInstruction>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'blendMode',\n    } as const;\n\n    private _renderer: Renderer;\n\n    private _renderableList: Renderable[];\n    private _activeBlendMode: BLEND_MODES;\n\n    private _isAdvanced = false;\n\n    private _filterHash: Partial<Record<BLEND_MODES, FilterEffect>> = Object.create(null);\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    /**\n     * This ensures that a blendMode switch is added to the instruction set if the blend mode has changed.\n     * @param renderable - The renderable we are adding to the instruction set\n     * @param blendMode - The blend mode of the renderable\n     * @param instructionSet - The instruction set we are adding to\n     */\n    public setBlendMode(renderable: Renderable, blendMode: BLEND_MODES, instructionSet: InstructionSet)\n    {\n        if (this._activeBlendMode === blendMode)\n        {\n            if (this._isAdvanced) this._renderableList.push(renderable);\n\n            return;\n        }\n\n        this._activeBlendMode = blendMode;\n\n        if (this._isAdvanced)\n        {\n            this._endAdvancedBlendMode(instructionSet);\n        }\n\n        this._isAdvanced = !!BLEND_MODE_FILTERS[blendMode];\n\n        if (this._isAdvanced)\n        {\n            this._beginAdvancedBlendMode(instructionSet);\n\n            this._renderableList.push(renderable);\n        }\n    }\n\n    private _beginAdvancedBlendMode(instructionSet: InstructionSet)\n    {\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        const blendMode = this._activeBlendMode;\n\n        if (!BLEND_MODE_FILTERS[blendMode as keyof typeof BLEND_MODE_FILTERS])\n        {\n            // #if _DEBUG\n            warn(`Unable to assign BlendMode: '${blendMode}'. `\n            + `You may want to include: import 'pixi.js/advanced-blend-modes'`);\n            // #endif\n\n            return;\n        }\n\n        // this does need an execute?\n        if (!this._filterHash[blendMode])\n        {\n            this._filterHash[blendMode] = new FilterEffect({\n                filters: [new BLEND_MODE_FILTERS[blendMode as keyof typeof BLEND_MODE_FILTERS]()]\n            });\n        }\n\n        const instruction: FilterInstruction = {\n            renderPipeId: 'filter',\n            action: 'pushFilter',\n            renderables: [],\n            filterEffect: this._filterHash[blendMode],\n            canBundle: false,\n        };\n\n        this._renderableList = instruction.renderables;\n        instructionSet.add(instruction);\n    }\n\n    private _endAdvancedBlendMode(instructionSet: InstructionSet)\n    {\n        this._renderableList = null;\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'filter',\n            action: 'popFilter',\n            canBundle: false,\n        });\n    }\n\n    /**\n     * called when the instruction build process is starting this will reset internally to the default blend mode\n     * @internal\n     * @ignore\n     */\n    public buildStart()\n    {\n        this._isAdvanced = false;\n    }\n\n    /**\n     * called when the instruction build process is finished, ensuring that if there is an advanced blend mode\n     * active, we add the final render instructions added to the instruction set\n     * @param instructionSet - The instruction set we are adding to\n     * @internal\n     * @ignore\n     */\n    public buildEnd(instructionSet: InstructionSet)\n    {\n        if (this._isAdvanced)\n        {\n            this._endAdvancedBlendMode(instructionSet);\n        }\n    }\n\n    /**\n     * @internal\n     * @ignore\n     */\n    public destroy()\n    {\n        this._renderer = null;\n        this._renderableList = null;\n\n        for (const i in this._filterHash)\n        {\n            this._filterHash[i as BLEND_MODES].destroy();\n        }\n\n        this._filterHash = null;\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { Container } from '../../../../scene/container/Container';\nimport { Texture } from '../texture/Texture';\n\nimport type { ColorSource } from '../../../../color/Color';\nimport type { ICanvas } from '../../../../environment/canvas/ICanvas';\nimport type { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport type { Renderer } from '../../types';\nimport type { System } from '../system/System';\nimport type { GetPixelsOutput } from '../texture/GenerateCanvas';\nimport type { GenerateTextureOptions } from './GenerateTextureSystem';\n\ntype Formats = 'png' | 'jpg'; // Add other formats if needed\n\n/**\n * Options for creating an image from a renderer.\n * @memberof rendering\n */\nexport interface ImageOptions\n{\n    /** The format of the image. */\n    format?: Formats;\n    /** The quality of the image. */\n    quality?: number;\n}\n\n/**\n * Options for extracting content from a renderer.\n * @memberof rendering\n */\nexport interface BaseExtractOptions\n{\n    /** The target to extract. */\n    target: Container | Texture;\n    /** The region of the target to extract. */\n    frame?: Rectangle;\n    /** The resolution of the extracted content. */\n    resolution?: number;\n    /** The color used to clear the extracted content. */\n    clearColor?: ColorSource;\n    /** Whether to enable anti-aliasing. This may affect performance. */\n    antialias?: boolean;\n}\n/**\n * Options for extracting an HTMLImage from the renderer.\n * @memberof rendering\n */\nexport type ExtractImageOptions = BaseExtractOptions & ImageOptions;\n/**\n * Options for extracting and downloading content from a renderer.\n * @memberof rendering\n */\nexport type ExtractDownloadOptions = BaseExtractOptions & {\n    /** The filename to use when downloading the content. */\n    filename: string;\n};\n/**\n * Options for extracting content from a renderer.\n * @memberof rendering\n */\nexport type ExtractOptions = BaseExtractOptions | ExtractImageOptions | ExtractDownloadOptions;\n\n/**\n * This class provides renderer-specific plugins for exporting content from a renderer.\n * For instance, these plugins can be used for saving an Image, Canvas element or for exporting the raw image data (pixels).\n *\n * Do not instantiate these plugins directly. It is available from the `renderer.extract` property.\n * @example\n * import { Application, Graphics } from 'pixi.js';\n *\n * // Create a new application (extract will be auto-added to renderer)\n * const app = new Application();\n * await app.init();\n *\n * // Draw a red circle\n * const graphics = new Graphics()\n *     .circle(0, 0, 50);\n *     .fill(0xFF0000)\n *\n * // Render the graphics as an HTMLImageElement\n * const image = await app.renderer.extract.image(graphics);\n * document.body.appendChild(image);\n * @memberof rendering\n */\nexport class ExtractSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'extract',\n    } as const;\n\n    /** Default options for creating an image. */\n    public static defaultImageOptions: ImageOptions = {\n        /** The format of the image. */\n        format: 'png' as Formats,\n        /** The quality of the image. */\n        quality: 1,\n    };\n\n    private _renderer: Renderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    private _normalizeOptions<T extends ExtractOptions>(\n        options: ExtractImageOptions | Container | Texture,\n        defaults: Partial<T> = {},\n    ): T\n    {\n        if (options instanceof Container || options instanceof Texture)\n        {\n            return {\n                target: options,\n                ...defaults\n            } as T;\n        }\n\n        return {\n            ...defaults,\n            ...options,\n        } as T;\n    }\n\n    /**\n     * Will return a HTML Image of the target\n     * @param options - The options for creating the image, or the target to extract\n     * @returns - HTML Image of the target\n     */\n    public async image(options: ExtractImageOptions | Container | Texture): Promise<HTMLImageElement>\n    {\n        const image = new Image();\n\n        image.src = await this.base64(options);\n\n        return image;\n    }\n\n    /**\n     * Will return a base64 encoded string of this target. It works by calling\n     * `Extract.canvas` and then running toDataURL on that.\n     * @param options - The options for creating the image, or the target to extract\n     */\n    public async base64(options: ExtractImageOptions | Container | Texture): Promise<string>\n    {\n        options = this._normalizeOptions<ExtractImageOptions>(\n            options,\n            ExtractSystem.defaultImageOptions\n        );\n\n        const { format, quality } = options;\n\n        const canvas = this.canvas(options);\n\n        if (canvas.toBlob !== undefined)\n        {\n            return new Promise<string>((resolve, reject) =>\n            {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                canvas.toBlob!((blob) =>\n                {\n                    if (!blob)\n                    {\n                        reject(new Error('ICanvas.toBlob failed!'));\n\n                        return;\n                    }\n\n                    const reader = new FileReader();\n\n                    reader.onload = () => resolve(reader.result as string);\n                    reader.onerror = reject;\n                    reader.readAsDataURL(blob);\n                }, format, quality);\n            });\n        }\n        if (canvas.toDataURL !== undefined)\n        {\n            return canvas.toDataURL(format, quality);\n        }\n        if (canvas.convertToBlob !== undefined)\n        {\n            const blob = await canvas.convertToBlob({ type: format, quality });\n\n            return new Promise<string>((resolve, reject) =>\n            {\n                const reader = new FileReader();\n\n                reader.onload = () => resolve(reader.result as string);\n                reader.onerror = reject;\n                reader.readAsDataURL(blob);\n            });\n        }\n\n        throw new Error('Extract.base64() requires ICanvas.toDataURL, ICanvas.toBlob, '\n            + 'or ICanvas.convertToBlob to be implemented');\n    }\n\n    /**\n     * Creates a Canvas element, renders this target to it and then returns it.\n     * @param options - The options for creating the canvas, or the target to extract\n     * @returns - A Canvas element with the texture rendered on.\n     */\n    public canvas(options: ExtractOptions | Container | Texture): ICanvas\n    {\n        options = this._normalizeOptions(options);\n\n        const target = options.target;\n\n        const renderer = this._renderer;\n\n        if (target instanceof Texture)\n        {\n            return renderer.texture.generateCanvas(target);\n        }\n\n        const texture = renderer.textureGenerator.generateTexture(options as GenerateTextureOptions);\n\n        const canvas = renderer.texture.generateCanvas(texture);\n\n        texture.destroy();\n\n        return canvas;\n    }\n\n    /**\n     * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n     * order, with integer values between 0 and 255 (included).\n     * @param options - The options for extracting the image, or the target to extract\n     * @returns - One-dimensional array containing the pixel data of the entire texture\n     */\n    public pixels(options: ExtractOptions | Container | Texture): GetPixelsOutput\n    {\n        options = this._normalizeOptions(options);\n\n        const target = options.target;\n\n        const renderer = this._renderer;\n        const texture = target instanceof Texture\n            ? target\n            : renderer.textureGenerator.generateTexture(options as GenerateTextureOptions);\n\n        const pixelInfo = renderer.texture.getPixels(texture);\n\n        if (target instanceof Container)\n        {\n            // destroy generated texture\n            texture.destroy();\n        }\n\n        return pixelInfo;\n    }\n\n    /**\n     * Will return a texture of the target\n     * @param options - The options for creating the texture, or the target to extract\n     * @returns - A texture of the target\n     */\n    public texture(options: ExtractOptions | Container | Texture): Texture\n    {\n        options = this._normalizeOptions(options);\n\n        if (options.target instanceof Texture) return options.target;\n\n        return this._renderer.textureGenerator.generateTexture(options as GenerateTextureOptions);\n    }\n\n    /**\n     * Will extract a HTMLImage of the target and download it\n     * @param options - The options for downloading and extracting the image, or the target to extract\n     */\n    public download(options: ExtractDownloadOptions | Container | Texture)\n    {\n        options = this._normalizeOptions<ExtractDownloadOptions>(options);\n\n        const canvas = this.canvas(options);\n\n        const link = document.createElement('a');\n\n        link.download = options.filename ?? 'image.png';\n        link.href = canvas.toDataURL('image/png');\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n    }\n\n    /**\n     * Logs the target to the console as an image. This is a useful way to debug what's happening in the renderer.\n     * @param options - The options for logging the image, or the target to log\n     */\n    public log(options: (ExtractOptions & {width?: number}) | Container | Texture)\n    {\n        const width = options.width ?? 200;\n\n        options = this._normalizeOptions(options);\n\n        const canvas = this.canvas(options);\n\n        const base64 = canvas.toDataURL();\n\n        // eslint-disable-next-line no-console\n        console.log(`[Pixi Texture] ${canvas.width}px ${canvas.height}px`);\n\n        const style = [\n            'font-size: 1px;',\n            `padding: ${width}px ${300}px;`,\n            `background: url(${base64}) no-repeat;`,\n            'background-size: contain;',\n        ].join(' ');\n\n        // eslint-disable-next-line no-console\n        console.log('%c ', style);\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null as any as Renderer;\n    }\n}\n","import { TextureSource } from './sources/TextureSource';\nimport { Texture } from './Texture';\n\nimport type { TextureSourceOptions } from './sources/TextureSource';\n\n/**\n * A render texture, extends `Texture`.\n * @see {@link rendering.Texture}\n * @memberof rendering\n */\nexport class RenderTexture extends Texture\n{\n    public static create(options: TextureSourceOptions): Texture\n    {\n        return new Texture({\n            source: new TextureSource(options)\n        });\n    }\n\n    /**\n     * Resizes the render texture.\n     * @param width - The new width of the render texture.\n     * @param height - The new height of the render texture.\n     * @param resolution - The new resolution of the render texture.\n     * @returns This texture.\n     */\n    public resize(width: number, height: number, resolution?: number): this\n    {\n        this.source.resize(width, height, resolution);\n\n        return this;\n    }\n}\n","import { Color, type ColorSource } from '../../../../color/Color';\nimport { ExtensionType } from '../../../../extensions/Extensions';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport { Bounds } from '../../../../scene/container/bounds/Bounds';\nimport { getLocalBounds } from '../../../../scene/container/bounds/getLocalBounds';\nimport { Container } from '../../../../scene/container/Container';\nimport { RenderTexture } from '../texture/RenderTexture';\n\nimport type { Renderer } from '../../types';\nimport type { System } from '../system/System';\nimport type { TextureSourceOptions } from '../texture/sources/TextureSource';\nimport type { Texture } from '../texture/Texture';\n\nexport type GenerateTextureSourceOptions = Omit<TextureSourceOptions, 'resource' | 'width' | 'height' | 'resolution'>;\n\n/**\n * Options for generating a texture from a container.\n * @memberof rendering\n */\nexport type GenerateTextureOptions =\n{\n    /** The container to generate the texture from */\n    target: Container;\n    /**\n     * The region of the container, that shall be rendered,\n     * if no region is specified, defaults to the local bounds of the container.\n     */\n    frame?: Rectangle;\n    /** The resolution of the texture being generated. */\n    resolution?: number;\n    /** The color used to clear the texture. */\n    clearColor?: ColorSource;\n    /** Whether to enable anti-aliasing. This may affect performance. */\n    antialias?: boolean;\n    /** The options passed to the texture source. */\n    textureSourceOptions?: GenerateTextureSourceOptions,\n};\n\nconst tempRect = new Rectangle();\nconst tempBounds = new Bounds();\nconst noColor: ColorSource = [0, 0, 0, 0];\n\n/**\n * System that manages the generation of textures from the renderer\n *\n *\n * Do not instantiate these plugins directly. It is available from the `renderer.textureGenerator` property.\n * @memberof rendering\n */\nexport class GenerateTextureSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'textureGenerator',\n    } as const;\n\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    /**\n     * A Useful function that returns a texture of the display object that can then be used to create sprites\n     * This can be quite useful if your container is complicated and needs to be reused multiple times.\n     * @param {GenerateTextureOptions | Container} options - Generate texture options.\n     * @param {Container} [options.container] - If not given, the renderer's resolution is used.\n     * @param {Rectangle} options.region - The region of the container, that shall be rendered,\n     * @param {number} [options.resolution] - The resolution of the texture being generated.\n     *        if no region is specified, defaults to the local bounds of the container.\n     * @param {GenerateTextureSourceOptions} [options.textureSourceOptions] - Texture options for GPU.\n     * @returns a shiny new texture of the container passed in\n     */\n    public generateTexture(options: GenerateTextureOptions | Container): Texture\n    {\n        if (options instanceof Container)\n        {\n            options = {\n                target: options,\n                frame: undefined,\n                textureSourceOptions: {},\n                resolution: undefined,\n            };\n        }\n\n        const resolution = options.resolution || this._renderer.resolution;\n        const antialias = options.antialias || this._renderer.view.antialias;\n\n        const container = options.target;\n\n        let clearColor = options.clearColor;\n\n        if (clearColor)\n        {\n            const isRGBAArray = Array.isArray(clearColor) && clearColor.length === 4;\n\n            clearColor = isRGBAArray ? clearColor : Color.shared.setValue(clearColor).toArray();\n        }\n        else\n        {\n            clearColor = noColor;\n        }\n\n        const region = options.frame?.copyTo(tempRect)\n            || getLocalBounds(container, tempBounds).rectangle;\n\n        region.width = Math.max(region.width, 1 / resolution) | 0;\n        region.height = Math.max(region.height, 1 / resolution) | 0;\n\n        const target = RenderTexture.create({\n            ...options.textureSourceOptions,\n            width: region.width,\n            height: region.height,\n            resolution,\n            antialias,\n        });\n\n        const transform = Matrix.shared.translate(-region.x, -region.y);\n\n        this._renderer.render({\n            container,\n            transform,\n            target,\n            clearColor,\n        });\n\n        return target;\n    }\n\n    public destroy(): void\n    {\n        (this._renderer as null) = null;\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { Point } from '../../../../maths/point/Point';\nimport { color32BitToUniform } from '../../../../scene/graphics/gpu/colorToUniform';\nimport { BindGroup } from '../../gpu/shader/BindGroup';\nimport { type Renderer, RendererType } from '../../types';\nimport { UniformGroup } from '../shader/UniformGroup';\n\nimport type { PointData } from '../../../../maths/point/PointData';\nimport type { GlRenderTargetSystem } from '../../gl/renderTarget/GlRenderTargetSystem';\nimport type { GpuRenderTargetSystem } from '../../gpu/renderTarget/GpuRenderTargetSystem';\nimport type { WebGPURenderer } from '../../gpu/WebGPURenderer';\nimport type { UboSystem } from '../shader/UboSystem';\nimport type { System } from '../system/System';\n\nexport type GlobalUniformGroup = UniformGroup<{\n    uProjectionMatrix: { value: Matrix; type: 'mat3x3<f32>' }\n    uWorldTransformMatrix: { value: Matrix; type: 'mat3x3<f32>' }\n    uWorldColorAlpha: { value: Float32Array; type: 'vec4<f32>' }\n    uResolution: { value: number[]; type: 'vec2<f32>' }\n}>;\n\nexport interface GlobalUniformOptions\n{\n    size?: number[],\n    projectionMatrix?: Matrix,\n    worldTransformMatrix?: Matrix\n    worldColor?: number\n    offset?: PointData\n}\n\nexport interface GlobalUniformData\n{\n    projectionMatrix: Matrix\n    worldTransformMatrix: Matrix\n    worldColor: number\n    resolution: number[]\n    offset: PointData\n    bindGroup: BindGroup\n}\n\ninterface GlobalUniformRenderer\n{\n    renderTarget: GlRenderTargetSystem | GpuRenderTargetSystem\n    renderPipes: Renderer['renderPipes'];\n    ubo: UboSystem;\n    type: RendererType;\n}\n\n/**\n * System plugin to the renderer to manage global uniforms for the renderer.\n * @memberof rendering\n */\nexport class GlobalUniformSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'globalUniforms',\n    } as const;\n\n    private readonly _renderer: GlobalUniformRenderer;\n\n    private _stackIndex = 0;\n    private _globalUniformDataStack: GlobalUniformData[] = [];\n\n    private readonly _uniformsPool: GlobalUniformGroup[] = [];\n    private readonly _activeUniforms: GlobalUniformGroup[] = [];\n\n    private readonly _bindGroupPool: BindGroup[] = [];\n    private readonly _activeBindGroups: BindGroup[] = [];\n\n    private _currentGlobalUniformData: GlobalUniformData;\n\n    constructor(renderer: GlobalUniformRenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public reset()\n    {\n        this._stackIndex = 0;\n\n        for (let i = 0; i < this._activeUniforms.length; i++)\n        {\n            this._uniformsPool.push(this._activeUniforms[i]);\n        }\n\n        for (let i = 0; i < this._activeBindGroups.length; i++)\n        {\n            this._bindGroupPool.push(this._activeBindGroups[i]);\n        }\n\n        this._activeUniforms.length = 0;\n        this._activeBindGroups.length = 0;\n    }\n\n    public start(options: GlobalUniformOptions): void\n    {\n        this.reset();\n\n        this.push(options);\n    }\n\n    public bind({\n        size,\n        projectionMatrix,\n        worldTransformMatrix,\n        worldColor,\n        offset,\n    }: GlobalUniformOptions)\n    {\n        const renderTarget = this._renderer.renderTarget.renderTarget;\n\n        const currentGlobalUniformData = this._stackIndex ? this._globalUniformDataStack[this._stackIndex - 1] : {\n            projectionData: renderTarget,\n            worldTransformMatrix: new Matrix(),\n            worldColor: 0xFFFFFFFF,\n            offset: new Point(),\n        };\n\n        const globalUniformData: GlobalUniformData = {\n            projectionMatrix: projectionMatrix || this._renderer.renderTarget.projectionMatrix,\n            resolution: size || renderTarget.size,\n            worldTransformMatrix: worldTransformMatrix || currentGlobalUniformData.worldTransformMatrix,\n            worldColor: worldColor || currentGlobalUniformData.worldColor,\n            offset: offset || currentGlobalUniformData.offset,\n            bindGroup: null,\n        };\n\n        const uniformGroup = this._uniformsPool.pop() || this._createUniforms();\n\n        this._activeUniforms.push(uniformGroup);\n\n        const uniforms = uniformGroup.uniforms;\n\n        uniforms.uProjectionMatrix = globalUniformData.projectionMatrix;\n\n        uniforms.uResolution = globalUniformData.resolution;\n\n        uniforms.uWorldTransformMatrix.copyFrom(globalUniformData.worldTransformMatrix);\n\n        uniforms.uWorldTransformMatrix.tx -= globalUniformData.offset.x;\n        uniforms.uWorldTransformMatrix.ty -= globalUniformData.offset.y;\n\n        color32BitToUniform(\n            globalUniformData.worldColor,\n            uniforms.uWorldColorAlpha,\n            0\n        );\n\n        uniformGroup.update();\n\n        let bindGroup: BindGroup;\n\n        if ((this._renderer as WebGPURenderer).renderPipes.uniformBatch)\n        {\n            bindGroup = (this._renderer as WebGPURenderer).renderPipes.uniformBatch.getUniformBindGroup(uniformGroup, false);\n        }\n        else\n        {\n            bindGroup = this._bindGroupPool.pop() || new BindGroup();\n            this._activeBindGroups.push(bindGroup);\n            bindGroup.setResource(uniformGroup, 0);\n        }\n\n        globalUniformData.bindGroup = bindGroup;\n\n        this._currentGlobalUniformData = globalUniformData;\n    }\n\n    public push(options: GlobalUniformOptions)\n    {\n        this.bind(options);\n\n        this._globalUniformDataStack[this._stackIndex++] = this._currentGlobalUniformData;\n    }\n\n    public pop()\n    {\n        this._currentGlobalUniformData = this._globalUniformDataStack[--this._stackIndex - 1];\n\n        // for webGL we need to update the uniform group here\n        // as we are not using bind groups\n        if (this._renderer.type === RendererType.WEBGL)\n        {\n            (this._currentGlobalUniformData.bindGroup.resources[0] as UniformGroup).update();\n        }\n    }\n\n    get bindGroup(): BindGroup\n    {\n        return this._currentGlobalUniformData.bindGroup;\n    }\n\n    get uniformGroup()\n    {\n        return this._currentGlobalUniformData.bindGroup.resources[0] as UniformGroup;\n    }\n\n    private _createUniforms(): GlobalUniformGroup\n    {\n        const globalUniforms = new UniformGroup({\n            uProjectionMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uWorldTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            // TODO - someone smart - set this to be a unorm8x4 rather than a vec4<f32>\n            uWorldColorAlpha: { value: new Float32Array(4), type: 'vec4<f32>' },\n            uResolution: { value: [0, 0], type: 'vec2<f32>' },\n        }, {\n            isStatic: true,\n        });\n\n        return globalUniforms;\n    }\n\n    public destroy()\n    {\n        (this._renderer as null) = null;\n    }\n}\n","import { DOMAdapter } from '../environment/adapter';\n\nlet saidHello = false;\n\nexport const VERSION = '$_VERSION';\n\n/**\n * Prints out the version and renderer information for this running instance of PixiJS.\n * @param type - The name of the renderer this instance is using.\n * @returns {void}\n */\nexport function sayHello(type: string): void\n{\n    if (saidHello)\n    {\n        return;\n    }\n\n    if (DOMAdapter.get().getNavigator().userAgent.toLowerCase().indexOf('chrome') > -1)\n    {\n        const args = [\n            `%c  %c  %c  %c  %c PixiJS %c v${VERSION} (${type}) http://www.pixijs.com/\\n\\n`,\n            'background: #E72264; padding:5px 0;',\n            'background: #6CA2EA; padding:5px 0;',\n            'background: #B5D33D; padding:5px 0;',\n            'background: #FED23F; padding:5px 0;',\n            'color: #FFFFFF; background: #E72264; padding:5px 0;',\n            'color: #E72264; background: #FFFFFF; padding:5px 0;',\n        ];\n\n        globalThis.console.log(...args);\n    }\n    else if (globalThis.console)\n    {\n        globalThis.console.log(`PixiJS ${VERSION} - ${type} - http://www.pixijs.com/`);\n    }\n\n    saidHello = true;\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { sayHello } from '../../../../utils/sayHello';\nimport { type Renderer, RendererType } from '../../types';\n\nimport type { WebGLRenderer } from '../../gl/WebGLRenderer';\nimport type { System } from '../system/System';\n\n/**\n * Options for the startup system.\n * @property {boolean} [hello=false] - Whether to log the version and type information of renderer to console.\n * @memberof rendering\n */\nexport interface HelloSystemOptions\n{\n    /**\n     * Whether to log the version and type information of renderer to console.\n     * @memberof rendering.SharedRendererOptions\n     * @default false\n     */\n    hello: boolean;\n}\n\n/**\n * A simple system responsible for initiating the renderer.\n * @memberof rendering\n */\nexport class HelloSystem implements System<HelloSystemOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'hello',\n        priority: -2,\n    } as const;\n\n    /** The default options for the system. */\n    public static defaultOptions: HelloSystemOptions = {\n        /** {@link WebGLOptions.hello} */\n        hello: false,\n    };\n\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    /**\n     * It all starts here! This initiates every system, passing in the options for any system by name.\n     * @param options - the config for the renderer and all its systems\n     */\n    public init(options: HelloSystemOptions): void\n    {\n        if (options.hello)\n        {\n            let name = this._renderer.name;\n\n            if (this._renderer.type === RendererType.WEBGL)\n            {\n                name += ` ${(this._renderer as WebGLRenderer).context.webGLVersion}`;\n            }\n\n            sayHello(name);\n        }\n    }\n}\n","import { extensions, ExtensionType } from '../../../../extensions/Extensions';\n\nimport type { Renderer } from '../../types';\nimport type { System } from '../system/System';\n\n/**\n * Options for the {@link TextureGCSystem}.\n * @memberof rendering\n * @property {boolean} [textureGCActive=true] - If set to true, this will enable the garbage collector on the GPU.\n * @property {number} [textureGCAMaxIdle=60 * 60] -\n * The maximum idle frames before a texture is destroyed by garbage collection.\n * @property {number} [textureGCCheckCountMax=600] - Frames between two garbage collections.\n */\nexport interface TextureGCSystemOptions\n{\n    /**\n     * If set to true, this will enable the garbage collector on the GPU.\n     * @default true\n     * @memberof rendering.SharedRendererOptions\n     */\n    textureGCActive: boolean;\n    /**\n     * The maximum idle frames before a texture is destroyed by garbage collection.\n     * @default 60 * 60\n     * @memberof rendering.SharedRendererOptions\n     */\n    textureGCAMaxIdle: number;\n    /**\n     * Frames between two garbage collections.\n     * @default 600\n     * @memberof rendering.SharedRendererOptions\n     */\n    textureGCCheckCountMax: number;\n}\n/**\n * System plugin to the renderer to manage texture garbage collection on the GPU,\n * ensuring that it does not get clogged up with textures that are no longer being used.\n * @memberof rendering\n */\nexport class TextureGCSystem implements System<TextureGCSystemOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'textureGC',\n    } as const;\n\n    /** default options for the TextureGCSystem */\n    public static defaultOptions: TextureGCSystemOptions = {\n        /**\n         * If set to true, this will enable the garbage collector on the GPU.\n         * @default true\n         */\n        textureGCActive: true,\n        /**\n         * The maximum idle frames before a texture is destroyed by garbage collection.\n         * @default 60 * 60\n         */\n        textureGCAMaxIdle: 60 * 60,\n        /**\n         * Frames between two garbage collections.\n         * @default 600\n         */\n        textureGCCheckCountMax: 600,\n    };\n\n    /**\n     * Frame count since started.\n     * @readonly\n     */\n    public count: number;\n\n    /**\n     * Frame count since last garbage collection.\n     * @readonly\n     */\n    public checkCount: number;\n\n    /**\n     * Maximum idle frames before a texture is destroyed by garbage collection.\n     * @see TextureGCSystem.defaultMaxIdle\n     */\n    public maxIdle: number;\n\n    /**\n     * Frames between two garbage collections.\n     * @see TextureGCSystem.defaultCheckCountMax\n     */\n    public checkCountMax: number;\n\n    /**\n     * Current garbage collection mode.\n     * @see TextureGCSystem.defaultMode\n     */\n    public active: boolean;\n    private _renderer: Renderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n\n        this.count = 0;\n        this.checkCount = 0;\n    }\n\n    public init(options: TextureGCSystemOptions): void\n    {\n        options = { ...TextureGCSystem.defaultOptions, ...options };\n\n        this.checkCountMax = options.textureGCCheckCountMax;\n        this.maxIdle = options.textureGCAMaxIdle;\n        this.active = options.textureGCActive;\n    }\n\n    /**\n     * Checks to see when the last time a texture was used.\n     * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n     */\n    protected postrender(): void\n    {\n        if (!this._renderer.renderingToScreen)\n        {\n            return;\n        }\n\n        this.count++;\n\n        if (!this.active) return;\n\n        this.checkCount++;\n\n        if (this.checkCount > this.checkCountMax)\n        {\n            this.checkCount = 0;\n\n            this.run();\n        }\n    }\n\n    /**\n     * Checks to see when the last time a texture was used.\n     * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n     */\n    public run(): void\n    {\n        const managedTextures = this._renderer.texture.managedTextures;\n\n        for (let i = 0; i < managedTextures.length; i++)\n        {\n            const texture = managedTextures[i];\n\n            // Only supports non generated textures at the moment!\n            if (\n                texture.autoGarbageCollect\n                && texture.resource\n                && texture._touched > -1\n                && this.count - texture._touched > this.maxIdle\n            )\n            {\n                texture._touched = -1;\n                texture.unload();\n            }\n        }\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null as any as Renderer;\n    }\n}\n\nextensions.add(TextureGCSystem);\n","import { DOMAdapter } from '../../../../environment/adapter';\nimport { ExtensionType } from '../../../../extensions/Extensions';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport { deprecation, v8_0_0 } from '../../../../utils/logging/deprecation';\nimport { RenderTarget } from '../renderTarget/RenderTarget';\nimport { getCanvasTexture } from '../texture/utils/getCanvasTexture';\n\nimport type { ICanvas } from '../../../../environment/canvas/ICanvas';\nimport type { TypeOrBool } from '../../../../scene/container/destroyTypes';\nimport type { System } from '../system/System';\nimport type { CanvasSource, CanvasSourceOptions } from '../texture/sources/CanvasSource';\nimport type { Texture } from '../texture/Texture';\n\n/**\n * Options passed to the ViewSystem\n * @memberof rendering\n * @property {number} [width=800] - The width of the screen.\n * @property {number} [height=600] - The height of the screen.\n * @property {ICanvas} [canvas] - The canvas to use as a view, optional.\n * @property {boolean} [autoDensity=false] - Resizes renderer view in CSS pixels to allow for resolutions other than 1.\n * @property {number} [resolution] - The resolution / device pixel ratio of the renderer.\n * @property {boolean} [antialias=false] - Whether to enable anti-aliasing. This may affect performance.\n * @property {boolean} [depth] -\n * Whether to ensure the main view has can make use of the depth buffer. Always true for WebGL renderer.\n * @property {boolean} [multiView] - TODO: multiView\n * @property {number} [backgroundAlpha] - The alpha of the background.\n */\nexport interface ViewSystemOptions\n{\n    /**\n     * The width of the screen.\n     * @default 800\n     * @memberof rendering.SharedRendererOptions\n     */\n    width?: number;\n    /**\n     * The height of the screen.\n     * @default 600\n     * @memberof rendering.SharedRendererOptions\n     */\n    height?: number;\n    /**\n     * The canvas to use as a view, optional.\n     * @memberof rendering.SharedRendererOptions\n     */\n    canvas?: ICanvas;\n    /** @deprecated */\n    view?: ICanvas;\n    /**\n     * Resizes renderer view in CSS pixels to allow for resolutions other than 1.\n     * @memberof rendering.SharedRendererOptions\n     */\n    autoDensity?: boolean;\n    /**\n     * The resolution / device pixel ratio of the renderer.\n     * @memberof rendering.SharedRendererOptions\n     */\n    resolution?: number;\n    /**\n     * Whether to enable anti-aliasing. This may affect performance.\n     * @memberof rendering.SharedRendererOptions\n     */\n    antialias?: boolean;\n    /**\n     * Whether to ensure the main view has can make use of the depth buffer. Always true for WebGL renderer.\n     * @memberof rendering.SharedRendererOptions\n     */\n    depth?: boolean;\n    /**\n     * TODO: multiView\n     * @memberof rendering.SharedRendererOptions\n     */\n    multiView?: boolean;\n\n    /**\n     * Transparency of the background color, value from `0` (fully transparent) to `1` (fully opaque).\n     * @default 1\n     */\n    backgroundAlpha?: number;\n}\n\nexport interface ViewSystemDestroyOptions\n{\n    /** Whether to remove the view element from the DOM. Defaults to `false`. */\n    removeView?: boolean;\n}\n\n/**\n * The view system manages the main canvas that is attached to the DOM.\n * This main role is to deal with how the holding the view reference and dealing with how it is resized.\n * @memberof rendering\n */\nexport class ViewSystem implements System<ViewSystemOptions, TypeOrBool<ViewSystemDestroyOptions>>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'view',\n        priority: 0,\n    } as const;\n\n    /** The default options for the view system. */\n    public static defaultOptions: ViewSystemOptions = {\n        /**\n         * {@link WebGLOptions.width}\n         * @default 800\n         */\n        width: 800,\n        /**\n         * {@link WebGLOptions.height}\n         * @default 600\n         */\n        height: 600,\n        /**\n         * {@link WebGLOptions.autoDensity}\n         * @default false\n         */\n        autoDensity: false,\n        /**\n         * {@link WebGLOptions.antialias}\n         * @default false\n         */\n        antialias: false,\n    };\n\n    public multiView: boolean;\n\n    /** The canvas element that everything is drawn to. */\n    public canvas!: ICanvas;\n\n    /** The texture that is used to draw the canvas to the screen. */\n    public texture: Texture;\n\n    /**\n     * Whether CSS dimensions of canvas view should be resized to screen dimensions automatically.\n     * @member {boolean}\n     */\n    public autoDensity: boolean;\n\n    /** Whether to enable anti-aliasing. This may affect performance. */\n    public antialias: boolean;\n\n    /**\n     * Measurements of the screen. (0, 0, screenWidth, screenHeight).\n     *\n     * Its safe to use as filterArea or hitArea for the whole stage.\n     */\n    public screen: Rectangle;\n    /** The render target that the view is drawn to. */\n    public renderTarget: RenderTarget;\n\n    /** The resolution / device pixel ratio of the renderer. */\n    get resolution(): number\n    {\n        return this.texture.source._resolution;\n    }\n\n    set resolution(value: number)\n    {\n        this.texture.source.resize(\n            this.texture.source.width,\n            this.texture.source.height,\n            value\n        );\n    }\n\n    /**\n     * initiates the view system\n     * @param options - the options for the view\n     */\n    public init(options: ViewSystemOptions): void\n    {\n        options = {\n            ...ViewSystem.defaultOptions,\n            ...options,\n        };\n\n        if (options.view)\n        {\n            // #if _DEBUG\n            deprecation(v8_0_0, 'ViewSystem.view has been renamed to ViewSystem.canvas');\n            // #endif\n\n            options.canvas = options.view;\n        }\n\n        this.screen = new Rectangle(0, 0, options.width, options.height);\n        this.canvas = options.canvas || DOMAdapter.get().createCanvas();\n        this.antialias = !!options.antialias;\n        this.texture = getCanvasTexture(this.canvas, options as CanvasSourceOptions);\n        this.renderTarget = new RenderTarget({\n            colorTextures: [this.texture],\n            depth: !!options.depth,\n            isRoot: true,\n        });\n\n        (this.texture.source as CanvasSource).transparent = options.backgroundAlpha < 1;\n        this.multiView = !!options.multiView;\n\n        if (this.autoDensity)\n        {\n            this.canvas.style.width = `${this.texture.width}px`;\n            this.canvas.style.height = `${this.texture.height}px`;\n        }\n\n        this.resolution = options.resolution;\n    }\n\n    /**\n     * Resizes the screen and canvas to the specified dimensions.\n     * @param desiredScreenWidth - The new width of the screen.\n     * @param desiredScreenHeight - The new height of the screen.\n     * @param resolution\n     */\n    public resize(desiredScreenWidth: number, desiredScreenHeight: number, resolution: number): void\n    {\n        this.texture.source.resize(desiredScreenWidth, desiredScreenHeight, resolution);\n\n        this.screen.width = this.texture.frame.width;\n        this.screen.height = this.texture.frame.height;\n\n        if (this.autoDensity)\n        {\n            this.canvas.style.width = `${desiredScreenWidth}px`;\n            this.canvas.style.height = `${desiredScreenHeight}px`;\n        }\n    }\n\n    /**\n     * Destroys this System and optionally removes the canvas from the dom.\n     * @param {options | false} options - The options for destroying the view, or \"false\".\n     * @param options.removeView - Whether to remove the view element from the DOM. Defaults to `false`.\n     */\n    public destroy(options: TypeOrBool<ViewSystemDestroyOptions> = false): void\n    {\n        const removeView = typeof options === 'boolean' ? options : !!options?.removeView;\n\n        if (removeView && this.canvas.parentNode)\n        {\n            this.canvas.parentNode.removeChild(this.canvas);\n        }\n\n        // note: don't nullify the element\n        //       other systems may need to unbind from it during the destroy iteration (eg. GLContextSystem)\n    }\n}\n","import { CustomRenderPipe } from '../../../../scene/container/CustomRenderPipe';\nimport { RenderGroupPipe } from '../../../../scene/container/RenderGroupPipe';\nimport { RenderGroupSystem } from '../../../../scene/container/RenderGroupSystem';\nimport { SpritePipe } from '../../../../scene/sprite/SpritePipe';\nimport { BatcherPipe } from '../../../batcher/shared/BatcherPipe';\nimport { AlphaMaskPipe } from '../../../mask/alpha/AlphaMaskPipe';\nimport { ColorMaskPipe } from '../../../mask/color/ColorMaskPipe';\nimport { StencilMaskPipe } from '../../../mask/stencil/StencilMaskPipe';\nimport { BackgroundSystem } from '../background/BackgroundSystem';\nimport { BlendModePipe } from '../blendModes/BlendModePipe';\nimport { ExtractSystem } from '../extract/ExtractSystem';\nimport { GenerateTextureSystem } from '../extract/GenerateTextureSystem';\nimport { GlobalUniformSystem } from '../renderTarget/GlobalUniformSystem';\nimport { HelloSystem } from '../startup/HelloSystem';\nimport { TextureGCSystem } from '../texture/TextureGCSystem';\nimport { ViewSystem } from '../view/ViewSystem';\n\nimport type { ExtractRendererOptions } from './utils/typeUtils';\n\nexport const SharedSystems = [\n    BackgroundSystem,\n    GlobalUniformSystem,\n    HelloSystem,\n    ViewSystem,\n    RenderGroupSystem,\n    TextureGCSystem,\n    GenerateTextureSystem,\n    ExtractSystem,\n];\n\nexport const SharedRenderPipes = [\n    BlendModePipe,\n    BatcherPipe,\n    SpritePipe,\n    RenderGroupPipe,\n    AlphaMaskPipe,\n    StencilMaskPipe,\n    ColorMaskPipe,\n    CustomRenderPipe\n];\n\n/**\n * Options for the shared systems of a renderer.\n * @memberof rendering\n */\nexport interface SharedRendererOptions extends ExtractRendererOptions<typeof SharedSystems>, PixiMixins.RendererOptions{}\n","import { CanvasSource } from '../sources/CanvasSource';\nimport { Texture } from '../Texture';\n\nimport type { ICanvas } from '../../../../../environment/canvas/ICanvas';\nimport type { CanvasSourceOptions } from '../sources/CanvasSource';\n\nconst canvasCache: Map<ICanvas, Texture> = new Map();\n\nexport function getCanvasTexture(canvas: ICanvas, options?: CanvasSourceOptions): Texture\n{\n    if (!canvasCache.has(canvas))\n    {\n        const texture = new Texture({\n            source: new CanvasSource({\n                resource: canvas,\n                ...options,\n            })\n        });\n\n        const onDestroy = () =>\n        {\n            if (canvasCache.get(canvas) === texture)\n            {\n                canvasCache.delete(canvas);\n            }\n        };\n\n        texture.once('destroy', onDestroy);\n        texture.source.once('destroy', onDestroy);\n\n        canvasCache.set(canvas, texture);\n    }\n\n    return canvasCache.get(canvas);\n}\n\nexport function hasCachedCanvasTexture(canvas: ICanvas): boolean\n{\n    return canvasCache.has(canvas);\n}\n"],"names":["textureBit","name","vertex","header","main","fragment","textureBitGl","ensureAttributes","geometry","extractedData","i","attributes","attribute","attributeData","location","format","offset","instance","warn","ensureStartAndStride","buffers","tempStride","tempStart","j","buffer","uid","getAttributeInfoFromFormat","stride","start","GpuStencilModesToPixi","STENCIL_MODES","NONE","DISABLED","stencilWriteMask","stencilReadMask","RENDERING_MASK_ADD","stencilFront","compare","passOp","stencilBack","RENDERING_MASK_REMOVE","MASK_ACTIVE","BufferResource","EventEmitter","constructor","size","_resourceType","_touched","_resourceId","_bufferResource","this","on","onBufferChange","emit","destroy","destroyBuffer","_RenderTarget","descriptor","colorTextures","dirtyId","isRoot","_size","Float32Array","defaultOptions","stencil","depth","push","TextureSource","width","height","resolution","antialias","map","texture","source","colorSource","colorTexture","resize","_resolution","onSourceResize","depthStencilTexture","Texture","ensureDepthStencilTexture","pixelWidth","pixelHeight","autoGenerateMipmaps","mipLevelCount","skipColorTexture","forEach","off","RenderTarget","calculateProjection","pm","x","y","flipY","sign","identity","a","d","tx","ty","isRenderingToScreen","renderTarget","resource","globalThis","HTMLCanvasElement","document","body","contains","RenderTargetSystem","renderer","rootViewPort","Rectangle","viewport","onRenderTargetChange","SystemRunner","projectionMatrix","Matrix","defaultClearColor","_renderSurfaceToRenderTargetHash","Map","_gpuRenderTargetHash","Object","create","_renderTargetStack","_renderer","finishRenderPass","adaptor","renderStart","target","clear","clearColor","frame","length","copyFrom","rootRenderTarget","renderingToScreen","bind","renderSurface","getRenderTarget","didChange","gpuRenderTarget","getGpuRenderTarget","resizeGpuRenderTarget","startRenderPass","CLEAR","ALL","contextChange","pop","currentRenderTargetData","isTexture","get","_initRenderTarget","copyToTexture","sourceRenderSurfaceTexture","destinationTexture","originSrc","originDest","Math","min","ensureDepthStencil","key","CanvasSource","test","getCanvasTexture","set","initGpuRenderTarget","UboSystem","_syncFunctionHash","_adaptor","_systemCheck","unsafeEvalSupported","Error","ensureUniformGroup","uniformGroup","uniformData","getUniformGroupData","Buffer","data","layout","usage","BufferUsage","UNIFORM","COPY_DST","_signature","_initUniformGroup","uniformGroupSignature","elements","keys","uniformStructures","createUboElements","syncFunction","_generateUboSync","uboElements","generateUboSync","syncUniformGroup","uniformGroupData","uniforms","updateUniformGroup","isStatic","_dirtyId","synced","update","createUboSyncFunction","parserCode","arrayGenerationFunction","singleSettersMap","funcFragments","prev","uboElement","parsed","uniformParsers","uniformParser","ubo","template","type","fragmentSrc","join","Function","loopMatrix","col","row","total","uboSyncFunctionsSTD40","f32","i32","uboSyncFunctionsWGSL","value","uniform","red","CustomRenderPipe","addRenderable","container","instructionSet","renderPipes","batch","break","add","execute","isRenderable","render","extension","ExtensionType","WebGLPipes","WebGPUPipes","CanvasPipes","executeInstructions","renderGroup","instructions","instructionSize","instruction","renderPipeId","RenderGroupPipe","addRenderGroup","globalUniforms","worldTransformMatrix","worldTransform","worldColor","worldColorAlpha","buildInstructions","root","reset","buildStart","blendMode","colorMask","sortableChildren","sortChildren","collectAllRenderablesAdvanced","buildEnd","collectAllRenderables","rendererPipes","globalDisplayStatus","includeInBuild","isSimple","collectAllRenderablesSimple","setBlendMode","groupBlendMode","didViewUpdate","rp","isRenderGroupRoot","children","effects","effect","pipe","collectRenderGroups","out","renderGroupChildren","tempContainer","Container","updateRenderGroupTransforms","updateChildRenderGroups","updateRenderGroupTransform","childrenToUpdate","updateTick","childrenAtDepth","list","index","updateTransformAndChildren","worldAlpha","renderGroupParent","appendFrom","relativeGroupTransform","mixColors","groupColor","groupAlpha","localTransform","localColor","localAlpha","updateFlags","updateLocalTransform","parent","_updateFlags","updateColorBlendVisibility","structureDidChange","updateRenderable","UPDATE_COLOR","groupColorAlpha","UPDATE_BLEND","localBlendMode","UPDATE_VISIBLE","localDisplayStatus","validateRenderables","childrenRenderablesToUpdate","rebuildRequired","renderable","validateRenderable","tempMatrix","RenderGroupSystem","transform","isRenderGroup","renderGroups","originalLocalTransform","runOnRender","updateRenderables","upload","uniformBatch","renderEnd","WebGLSystem","WebGPUSystem","CanvasSystem","SpritePipe","_gpuSpriteHash","sprite","_instructionSet","gpuSprite","_getGpuSprite","_didSpriteUpdate","_updateBatchableSprite","addToBatch","batcher","updateElement","_texture","_source","checkAndUpdateTexture","destroyRenderable","batchableSprite","BigPool","return","bounds","_initGPUSprite","BatchableSprite","roundPixels","_roundPixels","BatcherPipe","state","State","for2d","_batches","_geometries","init","Batcher","BatchGeometry","_activeBatch","_activeGeometry","begin","batchableObject","activeBatch","finish","indexBuffer","setDataWithSize","indexSize","attributeBuffer","float32View","attributeSize","dirty","action","_Filter","Shader","options","super","enabled","_state","padding","blendRequired","addResource","apply","filterManager","input","output","clearMode","applyFilter","from","gpu","gl","rest","gpuProgram","glProgram","GpuProgram","GlProgram","Filter","MaskFilter","textureMatrix","TextureMatrix","filterUniforms","UniformGroup","uFilterMatrix","uMaskClamp","uClampFrame","uAlpha","entryPoint","resources","uMaskTexture","_textureMatrix","calculateSpriteMatrix","prepend","mapCoord","tempBounds","Bounds","AlphaMaskEffect","FilterEffect","filters","Sprite","EMPTY","AlphaMaskPipe","_activeMaskStage","mask","maskedContainer","canBundle","renderMaskToTexture","maskContainer","_maskedContainer","renderMask","filterEffect","measurable","getGlobalBounds","ceil","filterTexture","TexturePool","getOptimalTexture","minX","minY","maskData","filter","returnTexture","ColorMaskPipe","_colorStack","_colorStackIndex","_currentColor","_container","colorStack","currentColor","_mask","setMask","StencilMaskPipe","_maskStackHash","_maskHash","WeakMap","_a","has","instructionsStart","instructionsLength","renderTargetUid","maskStackIndex","setStencilMode","STENCIL","_BackgroundSystem","clearBeforeRender","_backgroundColor","Color","color","alpha","background","backgroundColor","backgroundAlpha","setAlpha","setValue","colorRgba","toArray","priority","BackgroundSystem","BLEND_MODE_FILTERS","extensions","handle","BlendMode","ref","BlendModePipe","_isAdvanced","_filterHash","_activeBlendMode","_endAdvancedBlendMode","_beginAdvancedBlendMode","_renderableList","renderables","_ExtractSystem","_normalizeOptions","defaults","image","Image","src","base64","defaultImageOptions","quality","canvas","toBlob","Promise","resolve","reject","blob","reader","FileReader","onload","result","onerror","readAsDataURL","toDataURL","convertToBlob","generateCanvas","textureGenerator","generateTexture","pixels","pixelInfo","getPixels","download","link","createElement","filename","href","appendChild","click","removeChild","log","console","style","ExtractSystem","RenderTexture","tempRect","noColor","GenerateTextureSystem","textureSourceOptions","view","isRGBAArray","Array","isArray","shared","region","copyTo","getLocalBounds","rectangle","max","translate","GlobalUniformSystem","_stackIndex","_globalUniformDataStack","_uniformsPool","_activeUniforms","_bindGroupPool","_activeBindGroups","currentGlobalUniformData","projectionData","Point","globalUniformData","bindGroup","_createUniforms","uProjectionMatrix","uResolution","uWorldTransformMatrix","color32BitToUniform","uWorldColorAlpha","getUniformBindGroup","BindGroup","setResource","_currentGlobalUniformData","RendererType","WEBGL","saidHello","VERSION","sayHello","DOMAdapter","getNavigator","userAgent","toLowerCase","indexOf","args","HelloSystem","hello","context","webGLVersion","_TextureGCSystem","count","checkCount","checkCountMax","textureGCCheckCountMax","maxIdle","textureGCAMaxIdle","active","textureGCActive","postrender","run","managedTextures","autoGarbageCollect","unload","TextureGCSystem","_ViewSystem","deprecation","v8_0_0","screen","createCanvas","transparent","multiView","autoDensity","desiredScreenWidth","desiredScreenHeight","removeView","parentNode","ViewSystem","SharedSystems","SharedRenderPipes","canvasCache","onDestroy","delete","once"],"sourceRoot":""}