{"version":3,"file":"js/848.898f5a87.js","mappings":"0TAuBO,MAAMA,EAYFC,IAAAA,GAEG,MAAAC,EAAgB,IAAIC,EAAAA,EAAa,CACnCC,iBAAkB,CAAEC,MAAO,IAAIC,EAAAA,EAAUC,KAAM,eAC/CC,OAAQ,CAAEH,MAAO,IAAII,aAAa,CAAC,EAAG,EAAG,EAAG,IAAKF,KAAM,aACvDG,OAAQ,CAAEL,MAAO,EAAGE,KAAM,SAGxBI,GAAaC,EAAAA,EAAAA,GAA4B,CAC3CC,KAAM,WACNC,KAAM,CACFC,EAAAA,GACAC,EAAAA,EAAAA,GAAwBC,EAAAA,GAExBC,EAAAA,GACAC,EAAAA,KAIH,KAAAC,OAAS,IAAIC,EAAAA,EAAO,CACrBV,aACAW,UAAW,CAEPpB,kBAEP,CAGEqB,OAAAA,CAAQC,EAA4BC,GAEvC,MAAMC,EAAUD,EAAWC,QACrBN,EAASM,EAAQC,cAAgBC,KAAKR,OACtCS,EAAWL,EAAaK,SACxBC,EAAgBD,EAASE,iBAEzB,SACFC,EAAA,aAAUC,GACVH,EAAcI,qBAAqBR,GAKjCS,EAAUN,EAASM,QAEjBA,EAAAC,uCACJJ,EACAZ,EAAOT,WACPa,EAAaa,OAGjBF,EAAQG,YAAYN,GAEd,MAAAO,EAA0BV,EAASW,eAAeC,UAExDN,EAAQO,aAAa,EAAGH,EAAyBnB,EAAOT,YAElD,MAAAgC,EAAkBd,EACnBe,YAAYC,aAAaC,oBAAoB1B,EAAOE,UAAUpB,eAAe,GAElFiC,EAAQO,aAAa,EAAGC,EAAgBvB,EAAOT,YAE/C,MAAMoC,EAAUd,EAAaA,aAE7B,IAAK,IAAIe,EAAI,EAAGA,EAAIf,EAAagB,gBAAiBD,IAClD,CACU,MAAAE,EAAQH,EAAQC,GAIlB,GAFG5B,EAAA+B,OAAO,GAAKD,EAAMT,WAEpBS,EAAME,aACX,CACI,MAAMC,EAAeH,EAAMI,SAE3BJ,EAAMT,WAAYc,EAAAA,EAAAA,GAAyBF,EAAaC,SAAUD,EAAaG,OACzEN,EAAAE,aAAevB,EAASY,UAAUgB,aACpCP,EAAMT,UAAWrB,EAAOT,WAAY,EACxC,CAGJwB,EAAQO,aAAa,EAAGQ,EAAMT,UAAWrB,EAAOT,YAEhDwB,EAAQuB,kBAAkBC,YAAYT,EAAMU,KAAM,EAAGV,EAAMW,MAAK,CACpE,CAGGC,OAAAA,GAEE,KAAA1C,OAAO0C,SAAQ,GACpBlC,KAAKR,OAAS,MApGTpB,EAGK+D,UAAY,CACtBxD,KAAM,CACFyD,EAAAA,GAAcC,oBAElBpD,KAAM,Y,iCCXP,MAAMqD,EAYFjE,IAAAA,GAEH,MAAMU,GAAaC,EAAAA,EAAAA,GAA4B,CAC3CC,KAAM,OACNC,KAAM,CACFqD,EAAAA,GACAC,EAAAA,EACAjD,EAAAA,KAIH,KAAAkD,QAAU,IAAIhD,EAAAA,EAAO,CACtBV,aACAW,UAAW,CACPgD,SAAUC,EAAAA,EAAQC,MAAMC,QACxBC,SAAUH,EAAAA,EAAQC,MAAMC,QAAQE,MAChCC,gBAAiB,CACbC,eAAgB,CAAEtE,KAAM,cAAeF,MAAO,IAAIC,EAAAA,MAG7D,CAGEiB,OAAAA,CAAQuD,EAAoBC,GAE/B,MAAMlD,EAAWiD,EAASjD,SAE1B,IAAIT,EAAiB2D,EAAKV,QAE1B,GAAKjD,GAOL,IACUA,EAAOT,WAMb,YAHKqE,EAAAA,EAAAA,GAAA,gCAAiCD,EAAK3D,aAT3CA,EAASQ,KAAKyC,QAEPjD,EAAAE,UAAUgD,SAAWS,EAAKE,QAAQC,OACzC9D,EAAOE,UAAUoD,SAAWK,EAAKE,QAAQC,OAAOP,MAChDvD,EAAOE,UAAUsD,gBAAgBO,SAASN,eAAiBE,EAAKE,QAAQG,cAAcC,SAW1F,MAAM1E,EAAaS,EAAOT,WAQ1B,GALIA,EAAW2E,2BAEXlE,EAAO+B,OAAO,GAAKtB,EAASW,eAAeC,WAG3C9B,EAAW4E,wBACf,CACI,MAAMrF,EAAgB4E,EAAS5E,cAExBkB,EAAA+B,OAAO,GAAMtB,EACfe,YAAYC,aAAaC,oBAAoB5C,GAAe,EAAI,CAGzE2B,EAASM,QAAQqD,KAAK,CAClBxD,SAAU+C,EAAKU,UACfrE,SACAiB,MAAO0C,EAAK1C,OACf,CAGEyB,OAAAA,GAEE,KAAAO,QAAQP,SAAQ,GACrBlC,KAAKyC,QAAU,MApFVH,EAGKH,UAAY,CACtBxD,KAAM,CACFyD,EAAAA,GAAcC,oBAElBpD,KAAM,Q,cCVd,MAAM6E,EAAYC,EAAAA,EAAMC,QAOjB,MAAMC,EAaF5F,IAAAA,GAEH,MAAMU,GAAaC,EAAAA,EAAAA,GAA4B,CAC3CC,KAAM,QACNC,KAAM,CACFC,EAAAA,GACAC,EAAAA,EAAAA,GAAwBC,EAAAA,GACxBE,EAAAA,KAIH,KAAAkD,QAAU,IAAIhD,EAAAA,EAAO,CACtBV,aACAwC,OAAQ,IAGX,CAGEU,KAAAA,CAAMiC,EAAwB9D,GAEjC,MAAMH,EAAWiE,EAAUjE,SACrBM,EAAUN,EAASM,QACnB4D,EAAUnE,KAAKyC,QAAQ1D,WAE7BiB,KAAK6D,UAAYzD,EAEjBG,EAAQG,YAAYN,GAEpB0D,EAAUM,UAAY,SAGtBnE,EAASoE,SAASC,YACdlE,EACA+D,EACAL,GAGE,MAAAnD,EAA0BV,EAASW,eAAeC,UAOxDN,EAAQgE,eAAe,GAEfhE,EAAAO,aAAa,EAAGH,EAAyBwD,EAAO,CAGrDxE,OAAAA,CAAQuE,EAAwB5C,GAE7B,MAAA6C,EAAUnE,KAAKyC,QAAQ1D,WACvBkB,EAAWiE,EAAUjE,SACrBM,EAAUN,EAASM,QAErB,IAACe,EAAMT,UACX,CACI,MAAMY,EAAeH,EAAMI,SAE3BJ,EAAMT,WAAYc,EAAAA,EAAAA,GAAyBF,EAAaC,SAAUD,EAAaG,MAAK,CAGxFkC,EAAUM,UAAY9C,EAAM8C,UAEtB,MAAA5C,EAAevB,EAASY,UAAUgB,aACpCP,EAAMT,UAAWsD,EAAS,GAGxBE,EAAWpE,EAASoE,SAASC,YAC/BtE,KAAK6D,UACLM,EACAL,GAGJxC,EAAMT,UAAU2D,OAAOvE,EAASwE,UAAU7C,OAE1CrB,EAAQmE,YAAYL,GAEZ9D,EAAAuB,kBAAkBhB,aAAa,EAAGU,GAC1CjB,EAAQuB,kBAAkBC,YAAYT,EAAMU,KAAM,EAAGV,EAAMW,MAAK,CAG7DC,OAAAA,GAEE,KAAAO,QAAQP,SAAQ,GACrBlC,KAAKyC,QAAU,MAnGVwB,EAGK9B,UAAY,CACtBxD,KAAM,CACFyD,EAAAA,GAAcC,oBAElBpD,KAAM,S,0CCZP,MAAM0F,EAeTC,WAAAA,CAAY3E,GAHJ,KAAA4E,MAA6CC,OAAAC,OAAO,MAKxD/E,KAAKgF,UAAY/E,CAAA,CAGXgF,aAAAA,CAAcC,GAEpBlF,KAAKmF,KAAOD,CAAA,CAGTrD,YAAAA,CAAahB,EAAsBsD,EAAqBiB,GAE3DvE,EAAUwE,aAEJ,MAAA7D,EAAexB,KAAK6E,MAAMhE,EAAUyE,OAAStF,KAAKuF,iBAAiB1E,EAAWsD,EAASiB,GAEtF,OAAA5D,CAAA,CAGH+D,gBAAAA,CAAiBC,EAAkBrB,EAAqBiB,GAEtD,MAAAK,EAASzF,KAAKmF,KAAKM,OACnBC,EAAcvB,EAAQwB,OAAOP,GAC7BQ,EAA+B,GAC/B3F,EAAWD,KAAKgF,UAEtB,IAAK,MAAMa,KAAKH,EAChB,CACU,MAAAI,EAAyBN,EAAM9F,UAAUmG,IAAML,EAAM9F,UAAUgG,EAAYG,IAC7E,IAAAE,EAGA,GAA2B,iBAA3BD,EAASE,cACb,CACI,MAAMC,EAAeH,EAEZ7F,EAAAiG,IAAIC,mBAAmBF,GAEhC,MAAMG,EAASH,EAAaG,OAEdL,EAAA,CACVK,OAAQnG,EAASmG,OAAOC,aAAaD,GACrCE,OAAQ,EACRtE,KAAMoE,EAAOG,WAAWvE,KAC5B,MACJ,GACoC,WAA3B8D,EAASE,cAClB,CACI,MAAMI,EAASN,EAEDC,EAAA,CACVK,OAAQnG,EAASmG,OAAOC,aAAaD,GACrCE,OAAQ,EACRtE,KAAMoE,EAAOG,WAAWvE,KAC5B,MACJ,GACoC,mBAA3B8D,EAASE,cAClB,CACI,MAAMQ,EAAiBV,EAETC,EAAA,CACVK,OAAQnG,EAASmG,OAAOC,aAAaG,EAAeJ,QACpDE,OAAQE,EAAeF,OACvBtE,KAAMwE,EAAexE,KACzB,MACJ,GACoC,mBAA3B8D,EAASE,cAClB,CACI,MAAMS,EAAUX,EAEFC,EAAA9F,EAASoD,QAAQqD,cAAcD,EAAO,MACxD,GACoC,kBAA3BX,EAASE,cAClB,CACI,MAAM3C,EAAUyC,EAEhBC,EAAc9F,EAASoD,QAAQsD,aAAatD,GAASuD,WAAW,CAAC,EAEhE,CAGLhB,EAAQiB,KAAK,CACTC,QAASpB,EAAYG,GACrBC,SAAUC,GACb,CAGL,MAAMJ,EAAS1F,EAAST,OAAOuH,eAAe5C,GAAS6C,WAAW5B,GAE5D5D,EAAeiE,EAAOwB,gBAAgB,CACxCtB,SACAC,YAKG,OAFF,KAAAf,MAAMW,EAAMF,MAAQ9D,EAElBA,CAAA,CAGJU,OAAAA,GAEH,IAAK,MAAMgF,KAAOpC,OAAOqC,KAAKnH,KAAK6E,OAE1B,KAAAA,MAAMqC,GAAO,KAGtBlH,KAAK6E,MAAQ,KAEZ7E,KAAKgF,UAAqB,MA3HtBL,EAGKxC,UAAY,CACtBxD,KAAM,CACFyD,EAAAA,GAAcgF,cAElBnI,KAAM,a,cCdP,MAAMoI,EAANzC,WAAAA,GAWK,KAAA0C,YAAmDxC,OAAAC,OAAO,MAClE,KAAiBwC,gBAA4B,EAAC,CAIpCtC,aAAAA,CAAcC,GAEpBlF,KAAKmF,KAAOD,CAAA,CAGTmB,YAAAA,CAAaD,GAEhB,OAAOpG,KAAKsH,YAAYlB,EAAOoB,MAAQxH,KAAKyH,gBAAgBrB,EAAM,CAG/DsB,YAAAA,CAAatB,GAEV,MAAAuB,EAAY3H,KAAKsH,YAAYlB,EAAOoB,MAAQxH,KAAKyH,gBAAgBrB,GAEjEwB,EAAOxB,EAAOwB,KAeb,OAZHxB,EAAOyB,WAAaD,IAEpBxB,EAAOyB,UAAY,EAGd,KAAA1C,KAAKM,OAAOqC,MAAMC,YACnBJ,EAAW,EAAGC,EAAKxB,OAAQ,GAEzBA,EAAO4B,aAAeJ,EAAKK,YAAc,GAAK,IAIjDN,CAAA,CAIJO,UAAAA,GAEQ,UAAAC,KAAMnI,KAAKsH,YAEb,KAAAA,YAAYa,GAAIjG,UAGzBlC,KAAKsH,YAAc,CAAC,EAGjBG,eAAAA,CAAgBrB,GAEdpG,KAAKsH,YAAYlB,EAAOoB,OAEzBpB,EAAOgC,GAAG,SAAUpI,KAAK0H,aAAc1H,MACvCoG,EAAOgC,GAAG,SAAUpI,KAAKqI,eAAgBrI,MACzCoG,EAAOgC,GAAG,UAAWpI,KAAKsI,gBAAiBtI,OAG/C,MAAM2H,EAAY3H,KAAKmF,KAAKM,OAAO8C,aAAanC,EAAOG,YAgBhD,OAdPH,EAAOyB,UAAY,EAEfzB,EAAOwB,QAGPY,EAAAA,EAAAA,GAASpC,EAAOwB,KAAKxB,OAAQuB,EAAUc,kBAEvCd,EAAUe,SAGT,KAAApB,YAAYlB,EAAOoB,KAAOG,EAE1B,KAAAJ,gBAAgBV,KAAKT,GAEnBuB,CAAA,CAGDU,cAAAA,CAAejC,GAErB,MAAMuB,EAAY3H,KAAKsH,YAAYlB,EAAOoB,KAE1CG,EAAUzF,UACVkE,EAAOyB,UAAY,EACnB7H,KAAKsH,YAAYlB,EAAOoB,KAAOxH,KAAKyH,gBAAgBrB,EAAM,CAOpDkC,eAAAA,CAAgBlC,GAEtB,MAAMuB,EAAY3H,KAAKsH,YAAYlB,EAAOoB,KAE1CG,EAAUzF,UAEVlC,KAAKuH,gBAAgBoB,OAAO3I,KAAKuH,gBAAgBqB,QAAQxC,GAAS,GAElEA,EAAOyC,IAAI,SAAU7I,KAAK0H,aAAc1H,MACxCoG,EAAOyC,IAAI,SAAU7I,KAAKqI,eAAgBrI,MAC1CoG,EAAOyC,IAAI,UAAW7I,KAAKsI,gBAAiBtI,MAEvC,KAAAsH,YAAYlB,EAAOoB,KAAO,KAG5BtF,OAAAA,GAEE,KAAAqF,gBACAuB,QACAC,SAAS3C,GAAWpG,KAAKsI,gBAAgBlC,KAE7CpG,KAAKuH,gBAA2B,KAEjCvH,KAAKsH,YAAc,MA3HdD,EAGKlF,UAAY,CACtBxD,KAAM,CACFyD,EAAAA,GAAcgF,cAElBnI,KAAM,UCTP,MAAM+J,EAcTpE,WAAAA,CAAY3E,GAFZ,KAAQgJ,gBAAkB,GAItBjJ,KAAKgF,UAAY/E,CAAA,CAGdiJ,OAAAA,CAAQC,GAEPnJ,KAAKiJ,kBAAoBE,IAC7BnJ,KAAKiJ,gBAAkBE,EAElB,KAAAnE,UAAUX,SAAS+E,aAAaD,GAAS,CAG3CjH,OAAAA,GAEFlC,KAAKgF,UAAqB,KAC3BhF,KAAKiJ,gBAAkB,MA9BlBD,EAGK7G,UAAY,CACtBxD,KAAM,CACFyD,EAAAA,GAAcgF,cAElBnI,KAAM,aCgCP,MAAMoK,EAiCTzE,WAAAA,CAAY3E,GAERD,KAAKgF,UAAY/E,CAAA,CAGrB,UAAa5B,CAAKiL,GAEd,OAAItJ,KAAKuJ,eAETvJ,KAAKuJ,aAAevJ,KAAKwJ,wBAAwBF,GAC5CG,MAAMvE,IAEHlF,KAAKkF,IAAMA,EAEXlF,KAAKgF,UAAU0E,QAAQzE,cAAc0E,KAAK3J,KAAKkF,IAAI,KAP7BlF,KAAKuJ,YAUvB,CAONtE,aAAAA,CAAcC,GAEpBlF,KAAKgF,UAAUE,IAAMA,CAAA,CAUzB,6BAAcsE,CAAwBF,GAGlC,MAAMM,QAAgBC,UAAU3E,IAAI4E,eAAe,CAC/CC,gBAAiBT,EAAQS,gBACzBC,qBAAsBV,EAAQU,uBAG5BC,EAAmB,CACrB,yBACA,2BACA,4BACFC,QAAQC,GAAYP,EAAQQ,SAASC,IAAIF,KAGrC1E,QAAemE,EAAQU,cAAc,CACvCL,qBAGG,OAAEL,UAASnE,SAAO,CAGtBvD,OAAAA,GAEHlC,KAAKkF,IAAM,KACXlF,KAAKgF,UAAY,MA9FZqE,EAGKlH,UAAY,CACtBxD,KAAM,CACFyD,EAAAA,GAAcgF,cAElBnI,KAAM,UAPDoK,EAWKkB,eAAoC,CAK9CR,qBAAiB,EAKjBC,sBAAsB,GChDvB,MAAMQ,EAuBT5F,WAAAA,CAAY3E,GAPJ,KAAAwK,gBAAoD3F,OAAAC,OAAO,MAC3D,KAAA2F,mBAAoD5F,OAAAC,OAAO,MAQ/D/E,KAAKgF,UAAY/E,CAAA,CAGd0K,WAAAA,GAEH3K,KAAK4K,gBAAkB,IAAIC,SAASC,IAEhC9K,KAAK+K,wBAA0BD,CAAA,IAKnC9K,KAAKgL,eAAiBhL,KAAKgF,UAAUE,IAAIO,OAAOwF,sBAAqB,CAGlEC,eAAAA,CAAgBC,GAEnBnL,KAAKoL,gBAELpL,KAAKqL,cAELrL,KAAK8B,kBAAoB9B,KAAKgL,eAAeE,gBAAgBC,EAAgB5E,WAAU,CAGpF6E,aAAAA,GAECpL,KAAK8B,mBAEL9B,KAAK8B,kBAAkBwJ,MAG3BtL,KAAK8B,kBAAoB,KAGtByJ,WAAAA,CAAYC,GAEV,KAAA1J,kBAAkByJ,YAAYC,EAASC,EAAGD,EAASE,EAAGF,EAASG,MAAOH,EAASI,OAAQ,EAAG,EAAC,CAG7FpL,sCAAAA,CACHJ,EACA+D,EACA1D,EACAoL,GAGM,MAAAxH,EAAWrE,KAAKgF,UAAUX,SAASC,YAAYlE,EAAU+D,EAAS1D,EAAOoL,GAE/E7L,KAAK0E,YAAYL,EAAQ,CAGtBK,WAAAA,CAAYL,GAEXrE,KAAK8L,iBAAmBzH,IAC5BrE,KAAK8L,eAAiBzH,EAEjB,KAAAvC,kBAAkB4C,YAAYL,GAAQ,CAGvC0H,gBAAAA,CAAiBC,EAAe5F,GAEhCpG,KAAK0K,mBAAmBsB,KAAW5F,IAElC,KAAAsE,mBAAmBsB,GAAS5F,EAE5B,KAAAtE,kBAAkBmK,gBAAgBD,EAAOhM,KAAKgF,UAAUoB,OAAOsB,aAAatB,IAAO,CAGpF8F,eAAAA,CAAgB9F,GAEpB,GAAIpG,KAAKmM,oBAAsB/F,EAAQ,OAEvCpG,KAAKmM,kBAAoB/F,EAEzB,MAAMgG,EAAgD,IAAlChG,EAAOwB,KAAKyE,kBAA0B,SAAW,SAEhE,KAAAvK,kBAAkBwK,eAAetM,KAAKgF,UAAUoB,OAAOsB,aAAatB,GAASgG,EAAW,CAG1F7H,cAAAA,CAAeyH,GAEb,KAAAvB,gBAAgBuB,GAAS,KAG3BlL,YAAAA,CAAakL,EAAenL,EAAsBsD,GAEjD,GAAAnE,KAAKyK,gBAAgBuB,KAAWnL,EAAW,OAC1C,KAAA4J,gBAAgBuB,GAASnL,EAE9BA,EAAU2D,OAAOxE,KAAKgF,UAAUP,UAAU7C,OAI1C,MAAMJ,EAAexB,KAAKgF,UAAUnE,UAAUgB,aAAahB,EAAWsD,EAAS6H,GAG1E,KAAAlK,kBAAkBhB,aAAakL,EAAOxK,EAAY,CAGpDd,WAAAA,CAAYN,GAEJ,UAAAgB,KAAKhB,EAASmM,WACzB,CACU,MAAAC,EAAYpM,EAASmM,WAAWnL,GAEtCpB,KAAK+L,iBAAiBS,EAAUC,SAAUD,EAAUpG,OAAM,CAG1DhG,EAASsM,aAEJ,KAAAR,gBAAgB9L,EAASsM,YAClC,CAGIC,oBAAAA,CAAqBnN,EAAgBoN,GAE9B,UAAAxL,KAAK5B,EAAO+B,OACvB,CACU,MAAAV,EAAYrB,EAAO+B,OAAOH,GAG3BwL,GAED5M,KAAK6M,eAAehM,GAGxBb,KAAKc,aAAaM,EAAwBP,EAAWrB,EAAOT,WAAU,CAC1E,CAGI8N,cAAAA,CAAehM,GAER,UAAAgF,KAAKhF,EAAUnB,UAC1B,CACU,MAAAoG,EAAWjF,EAAUnB,UAAUmG,GAEhCC,EAA0BgH,gBAEtB,KAAA9H,UAAUkB,IAAIC,mBAAmBL,EAC1C,CACJ,CAGGlC,IAAAA,CAAK0F,GAWF,eAAElJ,EAAA,OAAUZ,EAAQiB,MAAAA,EAAA,SAAOoL,EAAA,KAAU7J,EAAMC,MAAAA,EAAA,cAAO8K,EAAeH,SAAAA,GAAatD,EAEpFtJ,KAAKQ,uCAAuCJ,EAAUZ,EAAOT,WAAY0B,EAAOoL,GAChF7L,KAAKU,YAAYN,GACZ,KAAAuM,qBAAqBnN,EAAQoN,GAE9BxM,EAASsM,YAET1M,KAAK8B,kBAAkBC,YACnBC,GAAQ5B,EAASsM,YAAY9E,KAAKoF,OAClCD,GAAiB3M,EAAS2M,cAC1B9K,GAAS,GAKR,KAAAH,kBAAkB8B,KAAK5B,GAAQ5B,EAAS6M,UAAWF,GAAiB3M,EAAS2M,cAAe9K,GAAS,EAC9G,CAGGiL,gBAAAA,GAEClN,KAAK8B,oBAEL9B,KAAK8B,kBAAkBwJ,MACvBtL,KAAK8B,kBAAoB,KAC7B,CAGGqL,UAAAA,GAEHnN,KAAKkN,mBAEA,KAAA/H,KAAKM,OAAOqC,MAAMsF,OAAO,CAACpN,KAAKgL,eAAeqC,WAEnDrN,KAAK+K,0BAEL/K,KAAKgL,eAAiB,KAMnBsC,iBAAAA,GAEH,MAAM/G,EAAcvG,KAAKgF,UAAUuI,aAAaC,QAAmCC,cAC/EzN,KAAKgF,UAAUuI,aAAaA,cAC5B,EACA,CAAC,EAAG,EAAG,EAAG,IAGdvN,KAAK8B,kBAAoB9B,KAAKgL,eAAeE,gBAAgB3E,GAE7D,MAAMmH,EAAgB1N,KAAK8L,eACrB6B,EAAoB,IAAK3N,KAAK0K,oBAC9BkD,EAAmB5N,KAAKmM,kBACxB0B,EAAiB,IAAK7N,KAAKyK,iBAEjCzK,KAAKqL,cAEC,MAAAG,EAAWxL,KAAKgF,UAAUuI,aAAa/B,SAExC,KAAA1J,kBAAkByJ,YAAYC,EAASC,EAAGD,EAASE,EAAGF,EAASG,MAAOH,EAASI,OAAQ,EAAG,GAI/F5L,KAAK0E,YAAYgJ,GAEjB,IAAK,MAAMtM,KAAKuM,EAEZ3N,KAAK+L,iBAAiB3K,EAAwBuM,EAAkBvM,IAGpE,IAAK,MAAMA,KAAKyM,EAEZ7N,KAAKc,aAAaM,EAAwByM,EAAezM,GAAI,MAGjEpB,KAAKkM,gBAAgB0B,EAAgB,CAGjCvC,WAAAA,GAEJ,IAAK,IAAIjK,EAAI,EAAGA,EAAI,GAAIA,IAEf,KAAAqJ,gBAAgBrJ,GAAK,KACrB,KAAAsJ,mBAAmBtJ,GAAK,KAGjCpB,KAAKmM,kBAAoB,KACzBnM,KAAK8L,eAAiB,KAGnB5J,OAAAA,GAEFlC,KAAKgF,UAAqB,KAC3BhF,KAAKmF,KAAO,KACZnF,KAAKyK,gBAAkB,KACvBzK,KAAK0K,mBAAqB,KAC1B1K,KAAKmM,kBAAoB,KACzBnM,KAAK8L,eAAiB,KAGhB7G,aAAAA,CAAcC,GAEpBlF,KAAKmF,KAAOD,CAAA,EA5RPsF,EAGKrI,UAAY,CACtBxD,KAAM,CAACyD,EAAAA,GAAcgF,cACrBnI,KAAM,UACN6O,SAAU,G,cChBX,MAAMC,EAmBTnJ,WAAAA,CAAY3E,GAPJ,KAAA+N,0BAGIlJ,OAAAC,OAAO,MAMf/E,KAAKgF,UAAY/E,EAERA,EAAAsN,aAAaU,qBAAqBC,IAAIlO,KAAI,CAG7CiO,oBAAAA,CAAqBV,GAE3B,IAAIY,EAAenO,KAAKgO,0BAA0BT,EAAa/F,KAE1D2G,IAEDA,EAAenO,KAAKgO,0BAA0BT,EAAa/F,KAAO,CAC9D4G,YAAaC,EAAAA,EAAcC,SAC3BC,iBAAkB,IAI1BvO,KAAKwO,oBAAsBjB,EAE3BvN,KAAKyO,eAAeN,EAAaC,YAAaD,EAAaI,iBAAgB,CAGxEE,cAAAA,CAAeL,EAA4BG,GAE9C,MAAMJ,EAAenO,KAAKgO,0BAA0BhO,KAAKwO,oBAAoBhH,KAE7E2G,EAAaC,YAAcA,EAC3BD,EAAaI,iBAAmBA,EAEhC,MAAMtO,EAAWD,KAAKgF,UAEb/E,EAAAoE,SAASoK,eAAeL,GACxBnO,EAAAM,QAAQuB,kBAAkB4M,oBAAoBH,EAAgB,CAGpErM,OAAAA,GAEHlC,KAAKgF,UAAUuI,aAAaU,qBAAqBU,OAAO3O,MAEvDA,KAAKgF,UAAqB,KAE3BhF,KAAKwO,oBAAsB,KAC3BxO,KAAKgO,0BAA4B,MA/D5BD,EAGK5L,UAAY,CACtBxD,KAAM,CACFyD,EAAAA,GAAcgF,cAElBnI,KAAM,W,cChBP,MAAM2P,EAAsF,CAC/FC,IAAK,CAAEC,MAAO,EAAG9M,KAAM,GACvB+M,IAAK,CAAED,MAAO,EAAG9M,KAAM,GACvBgN,IAAK,CAAEF,MAAO,EAAG9M,KAAM,GACvBiN,IAAK,CAAEH,MAAO,EAAG9M,KAAM,GACvB,YAAa,CAAE8M,MAAO,EAAG9M,KAAM,GAC/B,YAAa,CAAE8M,MAAO,EAAG9M,KAAM,GAC/B,YAAa,CAAE8M,MAAO,EAAG9M,KAAM,GAC/B,YAAa,CAAE8M,MAAO,EAAG9M,KAAM,GAC/B,YAAa,CAAE8M,MAAO,GAAI9M,KAAM,IAChC,YAAa,CAAE8M,MAAO,GAAI9M,KAAM,IAChC,YAAa,CAAE8M,MAAO,GAAI9M,KAAM,IAChC,YAAa,CAAE8M,MAAO,EAAG9M,KAAM,GAC/B,YAAa,CAAE8M,MAAO,GAAI9M,KAAM,IAChC,YAAa,CAAE8M,MAAO,GAAI9M,KAAM,IAChC,YAAa,CAAE8M,MAAO,GAAI9M,KAAM,IAChC,YAAa,CAAE8M,MAAO,EAAG9M,KAAM,GAC/B,cAAe,CAAE8M,MAAO,EAAG9M,KAAM,IACjC,cAAe,CAAE8M,MAAO,EAAG9M,KAAM,GACjC,cAAe,CAAE8M,MAAO,EAAG9M,KAAM,IACjC,cAAe,CAAE8M,MAAO,EAAG9M,KAAM,IACjC,cAAe,CAAE8M,MAAO,EAAG9M,KAAM,IACjC,cAAe,CAAE8M,MAAO,EAAG9M,KAAM,IACjC,cAAe,CAAE8M,MAAO,GAAI9M,KAAM,IAClC,cAAe,CAAE8M,MAAO,EAAG9M,KAAM,IACjC,cAAe,CAAE8M,MAAO,GAAI9M,KAAM,IAClC,cAAe,CAAE8M,MAAO,EAAG9M,KAAM,IACjC,cAAe,CAAE8M,MAAO,GAAI9M,KAAM,IAClC,cAAe,CAAE8M,MAAO,EAAG9M,KAAM,IACjC,cAAe,CAAE8M,MAAO,GAAI9M,KAAM,IAClC,cAAe,CAAE8M,MAAO,EAAG9M,KAAM,IACjC,cAAe,CAAE8M,MAAO,GAAI9M,KAAM,IAClC,cAAe,CAAE8M,MAAO,EAAG9M,KAAM,IACjC,cAAe,CAAE8M,MAAO,GAAI9M,KAAM,IAClC,cAAe,CAAE8M,MAAO,EAAG9M,KAAM,KAG9B,SAASkN,EAAsBC,GAElC,MAAMC,EAA4BD,EAAYE,KAAKzH,IAC9C,CACGA,OACAtB,OAAQ,EACRtE,KAAM,MAGd,IAAIsE,EAAS,EAEb,IAAK,IAAIlF,EAAI,EAAGA,EAAIgO,EAAYpC,OAAQ5L,IACxC,CACU,MAAAkO,EAAaF,EAAYhO,GAE/B,IAAIY,EAAO4M,EAAqBU,EAAW1H,KAAKjJ,MAAMqD,KACtD,MAAM8M,EAAQF,EAAqBU,EAAW1H,KAAKjJ,MAAMmQ,MAEzD,IAAKF,EAAqBU,EAAW1H,KAAKjJ,MAEtC,MAAM,IAAI4Q,MAAM,gDAAgDD,EAAW1H,KAAKjJ,QAGhF2Q,EAAW1H,KAAK5F,KAAO,IAEvBA,EAAOwN,KAAKC,IAAIzN,EAAM8M,GAASQ,EAAW1H,KAAK5F,MAGnDsE,EAASkJ,KAAKE,KAAMpJ,EAAUwI,GAASA,EAGvCQ,EAAWtN,KAAOA,EAElBsN,EAAWhJ,OAASA,EAEVA,GAAAtE,CAAA,CAMP,OAFPsE,EAAkC,GAAzBkJ,KAAKE,KAAKpJ,EAAS,IAErB,CAAE8I,cAAapN,KAAMsE,EAChC,C,wBCtEgB,SAAAqJ,EAAsBL,EAAwBM,GAG1D,MAAM,KAAE5N,EAAM8M,MAAAA,GAAUF,EAAqBU,EAAW1H,KAAKjJ,MAEvDkR,GAAaf,EAAQ9M,GAAQ,EAE5B,2BACOsN,EAAW1H,KAAK3I,mBACP,IAAhB2Q,EAAiC,aAAAA,KAAiB,wFAMjCN,EAAW1H,KAAK5F,MAAQA,EAAO,yDAEzBA,EAAO,yGAIZ,IAAd6N,EAAoC,kBAAAA,KAAe,uBAGlE,CC5BO,SAASC,EACZV,GAGO,OAAAW,EAAAA,EAAAA,GACHX,EACA,UACAO,EACAK,EAAAA,EAER,CCRO,MAAMC,UAAqBC,EAAAA,EAQ9BtL,WAAAA,GAEU,OACFuL,kBAAmBjB,EACnBkB,gBAAiBN,GACpB,EAbIG,EAGK9N,UAAY,CACtBxD,KAAM,CAACyD,EAAAA,GAAcgF,cACrBnI,KAAM,O,kCCZP,MAAMoR,EAQTzL,WAAAA,EAAY,0BAAE0L,IAJd,KAAiBC,2BAAqC,IAEtD,KAAOC,UAAY,EAIfxQ,KAAKuQ,2BAA6BD,EAC7B,KAAA1I,KAAO,IAAI/I,aAAa,MAAK,CAG/B4R,KAAAA,GAEHzQ,KAAKwQ,UAAY,EAGdE,aAAAA,CAAc1O,GAGb,GAAAA,EAAOhC,KAAKuQ,2BAA6B,EAEzC,MAAM,IAAIhB,MAAiD,2CAAO,EAAPvN,GAG/D,MAAMC,EAAQjC,KAAKwQ,UAEf,IAAAG,EAAU1O,EAAgB,EAAPD,EAIvB,GAFA2O,EAAUnB,KAAKE,KAAKiB,EAAU3Q,KAAKuQ,4BAA8BvQ,KAAKuQ,2BAElEI,EAA6B,EAAnB3Q,KAAK4H,KAAKoF,OAGd,UAAIuC,MAAM,6CAKb,OAFPvP,KAAKwQ,UAAYG,EAEV1O,CAAA,CAGJ2O,QAAAA,CAASC,GAEZ,MAAMvK,EAAStG,KAAK0Q,cAAcG,EAAM7D,QAExC,IAAK,IAAI5L,EAAI,EAAGA,EAAIyP,EAAM7D,OAAQ5L,IAE9BpB,KAAK4H,KAAMtB,EAAS,EAAKlF,GAAKyP,EAAMzP,GAGjC,OAAAkF,CAAA,CAGJpE,OAAAA,GAEHlC,KAAK8Q,QAAQ5O,UACblC,KAAK8Q,QAAU,KAEf9Q,KAAK4H,KAAO,M,cCrDpB,MAAM0I,EAA4B,IAI3B,MAAMS,EAqBTnM,WAAAA,CAAY3E,GATJ,KAAA+Q,eAAmDlM,OAAAC,OAAO,MAIlE,KAAQkM,SAAqB,GAE7B,KAAQC,YAA2B,GACnC,KAAQC,iBAAqC,GAIzCnR,KAAKgF,UAAY/E,EAEjBD,KAAKoR,aAAe,IAAIf,EAAS,CAAEC,8BAEnC,MAAMe,EAAgB,IAAMf,EAE5B,IAAK,IAAIlP,EAAI,EAAGA,EAAIiQ,EAAcjQ,IAClC,CACQ,IAAAkQ,EAAQC,EAAAA,EAAYC,QAAUD,EAAAA,EAAYE,SAEpC,IAANrQ,IAASkQ,GAASC,EAAAA,EAAYG,UAE7B,KAAAT,SAASpK,KAAK,IAAI8K,EAAAA,EAAO,CAC1B/J,KAAM5H,KAAKoR,aAAaxJ,KACxB0J,UACF,CACN,CAGGM,SAAAA,GAEH5R,KAAK6R,oBACL7R,KAAK8R,kBAAiB,CAGlBA,gBAAAA,GAEO,UAAA1Q,KAAKpB,KAAKgR,eAEZ,KAAAA,eAAe5P,GAAK,KAG7BpB,KAAKoR,aAAaX,OAAM,CAIrBvP,mBAAAA,CAAoBsE,EAA0BuM,GAEjD,IAAKA,GAAa/R,KAAKgR,eAAexL,EAAMgC,KAEjC,OAAAxH,KAAKgR,eAAexL,EAAMgC,KAGhC,KAAAxC,UAAUkB,IAAI8L,mBAAmBxM,GAEhC,MAAAoC,EAAOpC,EAAMY,OAAOwB,KAEpBtB,EAAStG,KAAKoR,aAAaV,cAAc9I,EAAKoF,QAM7C,OAJF,KAAAhI,UAAUkB,IAAI+L,iBAAiBzM,EAAOxF,KAAKoR,aAAaxJ,KAAMtB,EAAS,GAE5EtG,KAAKgR,eAAexL,EAAMgC,KAAOxH,KAAKkS,cAAc5L,EAASgK,GAEtDtQ,KAAKgR,eAAexL,EAAMgC,IAAG,CAGjC2K,cAAAA,CAAe3M,GAEb,KAAAR,UAAUkB,IAAIC,mBAAmBX,GAEhC,MAAAoC,EAAOpC,EAAMY,OAAOwB,KAEpBtB,EAAStG,KAAKoR,aAAaR,SAAShJ,GAEnC,OAAA5H,KAAKoS,mBAAmB9L,EAASgK,EAAyB,CAG9D+B,iBAAAA,CAAkBzK,GAErB,MAAMtB,EAAStG,KAAKoR,aAAaR,SAAShJ,GAEnC,OAAA5H,KAAKkS,cAAc5L,EAASgK,EAAyB,CAGzDgC,sBAAAA,CAAuB1K,GAE1B,MAAMtB,EAAStG,KAAKoR,aAAaR,SAAShJ,GAEpCoE,EAAQ1F,EAASgK,EAEhB,OAAAtQ,KAAKoS,mBAAmBpG,EAAK,CAGhCoG,kBAAAA,CAAmBpG,GAEvB,IAAKhM,KAAKmR,iBAAiBnF,GAC3B,CACI,MAAM5F,EAASpG,KAAKiR,SAASjF,EAAQ,GAErChM,KAAKmR,iBAAiBnF,GAAS,IAAIuG,EAAAA,EAAe,CAC9CnM,SACAE,OAA4B,KAAlB0F,EAAQ,EAAK,GACvBhK,KAAMsO,GACT,CAGE,OAAAtQ,KAAKmR,iBAAiBnF,EAAK,CAG9BkG,aAAAA,CAAclG,GAElB,IAAKhM,KAAKkR,YAAYlF,GACtB,CAEU,MAAAnL,EAAY,IAAI2R,EAAAA,EAAU,CAC5B,EAAGxS,KAAKoS,mBAAmBpG,KAG1B,KAAAkF,YAAYlF,GAASnL,CAAA,CAGvB,OAAAb,KAAKkR,YAAYlF,EAAK,CAGzB6F,iBAAAA,GAEE,MAAAY,EAAezS,KAAKgF,UAAUoB,OAE9BsM,EAAc1S,KAAKiR,SAAS,GAEtByB,EAAAC,OAAO3S,KAAKoR,aAAaZ,WAErCiC,EAAa/K,aAAagL,GAE1B,MAAM1H,EAAiBhL,KAAKgF,UAAUE,IAAIO,OAAOwF,uBAEjD,IAAK,IAAI7J,EAAI,EAAGA,EAAIpB,KAAKiR,SAASjE,OAAQ5L,IAC1C,CACU,MAAAgF,EAASpG,KAAKiR,SAAS7P,GAEd4J,EAAA4H,mBACXH,EAAapM,aAAaqM,GAC1BpC,EACAmC,EAAapM,aAAaD,GAC1B,EACApG,KAAKoR,aAAaZ,UACtB,CAIC,KAAAxL,UAAUE,IAAIO,OAAOqC,MAAMsF,OAAO,CAACpC,EAAeqC,UAAS,CAG7DnL,OAAAA,GAEH,IAAK,IAAId,EAAI,EAAGA,EAAIpB,KAAKkR,YAAYlE,OAAQ5L,IAEpC,KAAA8P,YAAY9P,GAAGc,UAGxBlC,KAAKkR,YAAc,KACnBlR,KAAKgR,eAAiB,KAEtB,IAAK,IAAI5P,EAAI,EAAGA,EAAIpB,KAAKiR,SAASjE,OAAQ5L,IAEjC,KAAA6P,SAAS7P,GAAGc,UAErBlC,KAAKiR,SAAW,KAEhB,IAAK,IAAI7P,EAAI,EAAGA,EAAIpB,KAAKmR,iBAAiBnE,OAAQ5L,IAEzC,KAAA+P,iBAAiB/P,GAAGc,UAG7BlC,KAAKmR,iBAAmB,KAExBnR,KAAKoR,aAAalP,UAClBlC,KAAKgR,eAAiB,KAEtBhR,KAAKgF,UAAY,MAhMZ+L,EAGK5O,UAAY,CACtBxD,KAAM,CACFyD,EAAAA,GAAcyQ,aAElB5T,KAAM,gB,kCCLd,MAAM6T,EAAqB,CACvB,aAAc,EACd,YAAa,EACb,aAAc,EACd,gBAAiB,EACjB,iBAAkB,GAQtB,SAASC,EACLC,EACAC,EACAxS,EACA2D,EACAyH,GAGA,OAAQmH,GAAkB,GAClBC,GAAa,GACbxS,GAAS,GACT2D,GAAa,EACdyH,CACX,CAMA,SAASqH,EACLC,EACAC,EACAjK,EACAoE,GAGA,OAAQpE,GAAa,EACbgK,GAAkB,EAClB5F,GAAgB,EACjB6F,CACX,CAqBO,MAAMC,GAyBTzO,WAAAA,CAAY3E,GAdJ,KAAAqT,aAAuDxO,OAAAC,OAAO,MAC9D,KAAAwO,oBAAsEzO,OAAAC,OAAO,MAE7E,KAAAyO,WAA8B1O,OAAAC,OAAO,MAC5B,KAAA0O,iBAAoD3O,OAAAC,OAAO,MAM5E,KAAQ2O,WAAa,GACrB,KAAQC,kBAAoB,EAKxB3T,KAAKgF,UAAY/E,CAAA,CAGXgF,aAAAA,CAAcC,GAEpBlF,KAAKmF,KAAOD,EACP,KAAAuJ,eAAeJ,EAAAA,EAAcC,UAElCtO,KAAK4T,iBAAgB,CAGlBC,mBAAAA,CAAoBC,GAEnB9T,KAAK2T,oBAAsBG,IAE/B9T,KAAK2T,kBAAoBG,EAEzB9T,KAAK4T,kBAAgB,CAGlBG,eAAAA,CAAgBxG,GAEnBvN,KAAK2T,kBAAoBpG,EAAayG,YACtChU,KAAKiU,wBAA0B1G,EAAahH,WAAW2N,uBAAyB,EAAI,EAEpFlU,KAAK4T,iBAAgB,CAGlBxK,YAAAA,CAAaD,GAEZnJ,KAAK0T,aAAevK,IAExBnJ,KAAK0T,WAAavK,EAElBnJ,KAAK4T,kBAAgB,CAGlBnF,cAAAA,CAAeL,GAEdpO,KAAKmU,eAAiB/F,IAE1BpO,KAAKmU,aAAe/F,EACf,KAAAgG,cAAgBC,EAAAA,EAAsBjG,GAE3CpO,KAAK4T,kBAAgB,CAGlBlP,WAAAA,CAAYtE,EAAoB+D,EAAqB1D,EAAc6T,GAEtE,MAAMjQ,EAAWrE,KAAKsE,YAAYlE,EAAU+D,EAAS1D,GAErD6T,EAAY5P,YAAYL,EAAQ,CAG7BC,WAAAA,CACHlE,EACA+D,EACA1D,EACAoL,GAGKzL,EAASmU,cAEOC,EAAAA,EAAAA,GAAApU,EAAU+D,EAAQsQ,eAGnCzU,KAAK0U,mBAAmBtU,IAG5ByL,EAAWA,GAAYzL,EAASyL,SAIhC,MAAM3E,EAAM6L,EACR3S,EAASmU,WACTpQ,EAAQoQ,WACR9T,EAAMmH,KACNnH,EAAMkU,aACN7B,EAAmBjH,IAGnB,OAAA7L,KAAKwT,WAAWtM,KAEf,KAAAsM,WAAWtM,GAAOlH,KAAK4U,gBAAgBxU,EAAU+D,EAAS1D,EAAOoL,IAFrC7L,KAAKwT,WAAWtM,EAIvB,CAGtB0N,eAAAA,CAAgBxU,EAAoB+D,EAAqB1D,EAAcoL,GAErE,MAAApG,EAASzF,KAAKmF,KAAKM,OAEnBoP,EAAU7U,KAAK8U,2BAA2B1U,GAE1C2U,EAAa/U,KAAKgF,UAAUvE,MAAMuU,gBAAgBvU,GAE7CsU,EAAA,GAAGE,UAAYjV,KAAKmU,eAAiB9F,EAAAA,EAAc6G,mBAAqB,EAAIlV,KAAK0T,WAE5F,MAAM/N,EAAS3F,KAAKgF,UAAUxF,OAAOuH,eAAe5C,GAASE,SAEvDkC,EAA0C,CAG5C4O,OAAQ,CACJC,OAAQpV,KAAKqV,WAAWlR,EAAQgR,OAAO7R,QACvCgS,WAAYnR,EAAQgR,OAAOG,WAE3BT,WAEJU,SAAU,CACNH,OAAQpV,KAAKqV,WAAWlR,EAAQoR,SAASjS,QACzCgS,WAAYnR,EAAQoR,SAASD,WAC7BE,QAAST,GAEbU,UAAW,CACP5J,WACA6J,SAAUjV,EAAMiV,UAEpB/P,SACAgQ,YAAa,CACT/T,MAAO5B,KAAK2T,mBAGhBiC,MAAO,iBAIP5V,KAAKiU,0BAGL1N,EAAWsP,aAAe,IACnB7V,KAAKoU,cACR0B,OAAQ,uBACRC,kBAAmBtV,EAAMuV,UACzBC,aAAcxV,EAAMuV,UAAY,OAAS,WAI3C,MAAA3R,EAAWoB,EAAOyQ,qBAAqB3P,GAEtC,OAAAlC,CAAA,CAGHgR,UAAAA,CAAWc,GAEf,OAAOnW,KAAKsT,aAAa6C,IAASnW,KAAKoW,cAAcD,EAAI,CAGrDC,aAAAA,CAAcD,GAEZ,MAAA1Q,EAASzF,KAAKmF,KAAKM,OAMlB,OAJPzF,KAAKsT,aAAa6C,GAAQ1Q,EAAO4Q,mBAAmB,CAChDF,SAGGnW,KAAKsT,aAAa6C,EAAI,CAGzBzB,kBAAAA,CAAmBtU,GAEvB,MAAMkW,EAAS,GACf,IAAItK,EAAQ,EAGZ,MAAMuK,EAAgBzR,OAAOqC,KAAK/G,EAASmM,YAAYiK,OAEvD,IAAK,IAAIpV,EAAI,EAAGA,EAAImV,EAAcvJ,OAAQ5L,IAC1C,CACI,MAAMoL,EAAYpM,EAASmM,WAAWgK,EAAcnV,IAE7CkV,EAAAtK,KAAWQ,EAAUC,SACrB6J,EAAAtK,KAAWQ,EAAUlG,OACrBgQ,EAAAtK,KAAWQ,EAAUsJ,OACrBQ,EAAAtK,KAAWQ,EAAUiK,MAAA,CAG1B,MAAAC,EAAYJ,EAAOK,KAAK,IAI9B,OAFSvW,EAAAmU,YAAaqC,EAAAA,EAAAA,GAAmBF,EAAW,YAE7CtW,EAASmU,UAAA,CAGZO,0BAAAA,CAA2B1U,GAE/B,GAAIJ,KAAKuT,oBAAoBnT,EAASmU,YAE3B,OAAAvU,KAAKuT,oBAAoBnT,EAASmU,YAG7C,MAAMsC,EAA+C,GAqC9C,OAnCEzW,EAAAyU,QAAQ9L,SAAS3C,IAEtB,MAAM0Q,EAAqC,CACvCC,YAAa,EACbC,SAAU,SACVzK,WAAY,IAGV0K,EAAwBH,EAAYvK,WAE/B,UAAAnL,KAAKhB,EAASmM,WACzB,CACU,MAAAC,EAAYpM,EAASmM,WAAWnL,GAElCoL,EAAUpG,SAAWA,IAErB0Q,EAAYC,YAAcvK,EAAUiK,OACxBK,EAAAE,SAAWxK,EAAU0K,SAAW,WAAa,SAEzDD,EAAsBpQ,KAAK,CACvBsQ,eAAgB3K,EAAUC,SAC1BnG,OAAQkG,EAAUlG,OAClBwP,OAAQtJ,EAAUsJ,SAE1B,CAGAmB,EAAsBjK,QAEtB6J,EAAoBhQ,KAAKiQ,EAAW,IAIvC,KAAAvD,oBAAoBnT,EAASmU,YAAcsC,EAEzCA,CAAA,CAGHjD,eAAAA,GAEJ,MAAM1M,EAAMgM,EACRlT,KAAKmU,aACLnU,KAAK2T,kBACL3T,KAAK0T,WACL1T,KAAKiU,yBAGJjU,KAAKyT,iBAAiBvM,KAEvBlH,KAAKyT,iBAAiBvM,GAAOpC,OAAOC,OAAO,OAG1C,KAAAyO,WAAaxT,KAAKyT,iBAAiBvM,EAAG,CAGxChF,OAAAA,GAEFlC,KAAKgF,UAAqB,KAC3BhF,KAAKuT,oBAAsB,MAtRtBF,GAGKlR,UAAY,CACtBxD,KAAM,CAACyD,EAAAA,GAAcgF,cACrBnI,KAAM,Y,8CC9EP,MAAMmY,GAANxS,WAAAA,GAEH,KAAOyS,SAA+B,GACtC,KAAOC,aAAgC,GAEvC,KAAOtD,YAAc,GCOlB,MAAMuD,GAKFlZ,IAAAA,CAAK4B,EAA0BuX,GAElCxX,KAAKgF,UAAY/E,EACjBD,KAAKyX,oBAAsBD,CAAA,CAGxBE,aAAAA,CACHC,EACAC,EACAC,EACA7V,EACA8V,GAGA,MAAM7X,EAAWD,KAAKgF,UAEhB+S,EAAiB/X,KAAKgY,oBACxBL,GAGEM,EAAiBhY,EAASoD,QAAQsD,aACpCiR,EAAmBtU,QAehB,OAZPrD,EAASM,QAAQyK,eAAekN,qBAC5B,CACI7U,QAAS0U,EACTI,OAAQN,GAEZ,CACIxU,QAAS4U,EACTE,OAAQL,GAEZ9V,GAGG4V,CAAA,CAGJQ,eAAAA,CACH7K,EACAkD,GAAuB,EACvB4H,EACA7M,GAGA,MAAMgM,EAAqBxX,KAAKyX,oBAE1BtM,EAAkBqM,EAAmBc,mBAAmB/K,GAExDhH,EAAavG,KAAKyN,cAAcF,EAAckD,EAAO4H,GAE3DlN,EAAgB5E,WAAaA,EAIxB,KAAAvB,UAAUX,SAAS0P,gBAAgB5I,GACnC,KAAAnG,UAAUzE,QAAQ2K,gBAAgBC,GAClC,KAAAnG,UAAUzE,QAAQgL,YAAYC,EAAQ,CAGxC0B,gBAAAA,GAEE,KAAAlI,UAAUzE,QAAQ6K,eAAc,CASjC4M,mBAAAA,CAAoBzK,GAExB,MAAMpC,EAAkBnL,KAAKyX,oBAAoBa,mBAAmB/K,GAEhE,OAAApC,EAAgBkM,SAAS,GAElBlM,EAAgBkM,SAAS,GAAGkB,oBAGhCvY,KAAKgF,UAAU3B,QAAQsD,aAC1B4G,EAAaiL,cAAc,GAAGlV,OAClC,CAGGmK,aAAAA,CACHF,EACAkD,EACAgI,GAGqB,mBAAVhI,IAECA,EAAAA,EAAQiI,GAAAA,EAAMC,IAAMD,GAAAA,EAAME,MAGtC,MAAMpB,EAAqBxX,KAAKyX,oBAE1BtM,EAAkBqM,EAAmBc,mBAAmB/K,GAExDsL,EAAmBtL,EAAaiL,cAAcnJ,KAChD,CAAChM,EAASjC,KAEA,MAAAtB,EAAUqL,EAAgBkM,SAASjW,GAErC,IAAA0X,EACAC,EAEJ,GAAIjZ,EACJ,CACU,MAAAkZ,EAAiBlZ,EAAQyY,oBAEzBU,EAAoBD,EAAepS,aAElCkS,EAAAG,CAAA,MAIPH,EAAO9Y,KAAKgF,UAAU3B,QAAQsD,aAAatD,GAASuD,WAAW,CAC3DsS,cAAe,IAInB/N,EAAgBmM,aAAalW,KAEb2X,EAAAD,EACTA,EAAA9Y,KAAKgF,UAAU3B,QAAQ8V,eAC1BhO,EAAgBmM,aAAalW,KAIrC,MAAMgY,EAAW3I,EAAkBiI,GAAAA,EAAMW,MAAQ,QAAU,OAIpD,OAFPZ,IAAAA,EAAejB,EAAmB8B,mBAE3B,CACHR,OACAC,gBACAN,aACAc,QAAS,QACTH,SACJ,IAIJ,IAAAlF,EAUJ,IANK3G,EAAaiM,UAAWjM,EAAakM,OAAWlM,EAAamM,sBAE9DnM,EAAaoM,4BACbpM,EAAamM,oBAAoBpW,OAAOsW,YAAczO,EAAgB0O,KAAO,EAAI,GAGjFtM,EAAamM,oBACjB,CACI,MAAMI,EAAiBrJ,EAAQiI,GAAAA,EAAMqB,QAAU,QAAU,OACnDC,EAAevJ,EAAQiI,GAAAA,EAAMuB,MAAQ,QAAU,OAE5B/F,EAAA,CACrB4E,KAAM9Y,KAAKgF,UAAU3B,QAChBsD,aAAa4G,EAAamM,oBAAoBpW,QAC9CsD,aACLsT,eAAgB,QAChBJ,gBACAK,gBAAiB,EACjBH,cACAI,aAAc,QAClB,CAGJ,MAAM7T,EAAsC,CACxCsS,mBACA3E,0BAGG,OAAA3N,CAAA,CAGJkK,KAAAA,CAAMlD,EAA4BkD,GAAuB,EAAM4H,EAAwB7M,GAE1F,IAAKiF,EAAO,OAEZ,MAAM,IAAEvL,EAAA,QAAK3E,GAAYP,KAAKgF,UAExBS,EAASP,EAAIO,OAEb4U,EAAwC,OAA3B9Z,EAAQyK,eAE3B,GAAIqP,EACJ,CACU,MAAArP,EAAiBvF,EAAOwF,uBACxBqP,EAAuBta,KAAKyN,cAAcF,EAAckD,EAAO4H,GAE/D/D,EAActJ,EAAeE,gBAAgBoP,GAEvChG,EAAA/I,YAAYC,EAASC,EAAGD,EAASE,EAAGF,EAASG,MAAOH,EAASI,OAAQ,EAAG,GAEpF0I,EAAYhJ,MAEN,MAAAiP,EAAcvP,EAAeqC,SAEnC5H,EAAOqC,MAAMsF,OAAO,CAACmN,GAAY,MAIjCva,KAAKoY,gBAAgB7K,EAAckD,EAAO4H,EAAY7M,EAC1D,CAGGgP,mBAAAA,CAAoBjN,GAGvBA,EAAakN,QAAS,EAEhB,MAAAtP,EAAkB,IAAIiM,GA2DrB,OAvDP7J,EAAaiL,cAAczP,SAAQ,CAAC2R,EAActZ,KAE9C,GAAIuZ,GAAAA,EAAaC,KAAKF,EAAa5U,UACnC,CACU,MAAAhG,EAAU4a,EAAa5U,SAAS+U,WAClC,UAGEC,EAAaJ,EAA8BK,YAAc,gBAAkB,SAGjF,IACIjb,EAAQkb,UAAU,CACdvV,OAAQzF,KAAKgF,UAAUE,IAAIO,OAE3B6L,MAAO2J,gBAAgBC,gBACjBD,gBAAgBxJ,SAChBwJ,gBAAgBE,kBAChBF,gBAAgBvJ,SACtBoE,OAAQ,aACRgF,aACH,OAEEM,GAEHC,QAAQC,MAAMF,EAAC,CAGHjQ,EAAAkM,SAASjW,GAAKtB,CAAA,CAK9B,GAFYqL,EAAA0O,KAAOa,EAAapX,OAAOiY,UAEvCb,EAAapX,OAAOiY,UACxB,CACU,MAAAC,EAAc,IAAIC,GAAAA,EAAc,CAClC9P,MAAO,EACPC,OAAQ,EACRgO,YAAa,IAGDzO,EAAAmM,aAAalW,GAAKoa,CAAA,KAItCrQ,EAAgB0O,OAEhB1O,EAAgB6I,YAAc,EAE1BzG,EAAamM,sBAEAnM,EAAAmM,oBAAoBpW,OAAOsW,YAAc,IAIvDzO,CAAA,CAGJwO,yBAAAA,CAA0BpM,GAG7B,MAAMpC,EAAkBnL,KAAKyX,oBAAoBa,mBAAmB/K,GAEhEA,EAAamM,qBAAuBvO,EAAgB0O,OAEvCtM,EAAAmM,oBAAoBpW,OAAOsW,YAAc,EAC1D,CAGG8B,qBAAAA,CAAsBnO,GAEzB,MAAMpC,EAAkBnL,KAAKyX,oBAAoBa,mBAAmB/K,GAEpEpC,EAAgBQ,MAAQ4B,EAAa5B,MACrCR,EAAgBS,OAAS2B,EAAa3B,OAElCT,EAAgB0O,MAEhBtM,EAAaiL,cAAczP,SAAQ,CAAC2R,EAActZ,KAExC,MAAAoa,EAAcrQ,EAAgBmM,aAAalW,GAEpCoa,GAAAG,OACTjB,EAAapX,OAAOqI,MACpB+O,EAAapX,OAAOsI,OACpB8O,EAAapX,OAAOsY,YACxB,GAER,EClUD,MAAMC,WAA8BC,GAAAA,EAUvClX,WAAAA,CAAY3E,GAER8b,MAAM9b,GAJH,KAAAuN,QAAU,IAAI+J,GAMZ,KAAA/J,QAAQnP,KAAK4B,EAAUD,KAAI,EAd3B6b,GAGK1Z,UAAY,CACtBxD,KAAM,CAACyD,EAAAA,GAAcgF,cACrBnI,KAAM,gBCAP,MAAM+c,GAANpX,WAAAA,GAYc,KAAAqX,gBAAyDnX,OAAAC,OAAO,KAAI,CAE3EE,aAAAA,CAAcC,GAEpBlF,KAAKmF,KAAOD,CAAA,CAGT6B,cAAAA,CAAe5C,GAElB,OAAOnE,KAAKic,gBAAgB9X,EAAQoQ,aAAevU,KAAKkc,sBAAsB/X,EAAO,CAGjF+X,qBAAAA,CAAsB/X,GAEpB,MAAAsB,EAASzF,KAAKmF,KAAKM,OAEnBuB,EAAa7C,EAAQgY,UAAU9M,KAAK7J,GAAUC,EAAO2W,sBAAsB,CAAExW,QAASJ,MAEtF6W,EAAqB,CAAEC,iBAAkBtV,GAcxC,OAZF,KAAAiV,gBAAgB9X,EAAQoQ,YAAc,CACvCvN,aACA3C,SAAUoB,EAAO8W,qBAAqBF,IAUnCrc,KAAKic,gBAAgB9X,EAAQoQ,WAAU,CAG3CrS,OAAAA,GAGHlC,KAAKmF,KAAO,KACXnF,KAAKic,gBAA2B,MAnD5BD,GAGK7Z,UAAY,CACtBxD,KAAM,CACFyD,EAAAA,GAAcgF,cAElBnI,KAAM,UCrBP,MAAMud,GAAmE,CAEhFA,OAA6B,CACzBC,MAAO,CACHC,UAAW,MACXC,UAAW,sBACXC,UAAW,OAEfC,MAAO,CACHH,UAAW,MACXC,UAAW,sBACXC,UAAW,QAInBJ,IAA0B,CACtBC,MAAO,CACHC,UAAW,YACXC,UAAW,sBACXC,UAAW,OAEfC,MAAO,CACHH,UAAW,MACXC,UAAW,MACXC,UAAW,QAInBJ,SAA+B,CAC3BC,MAAO,CACHC,UAAW,MACXC,UAAW,sBACXC,UAAW,OAEfC,MAAO,CACHH,UAAW,MACXC,UAAW,sBACXC,UAAW,QAInBJ,OAA6B,CACzBC,MAAO,CACHC,UAAW,MACXC,UAAW,sBACXC,UAAW,OAEfC,MAAO,CACHH,UAAW,MACXC,UAAW,gBACXC,UAAW,QAInBJ,QAA8B,CAC1BC,MAAO,CACHC,UAAW,MACXC,UAAW,sBACXC,UAAW,OAEfC,MAAO,CACHH,UAAW,MACXC,UAAW,gBACXC,UAAW,QAInBJ,KAA2B,CACvBC,MAAO,CACHC,UAAW,MACXC,UAAW,sBACXC,UAAW,OAEfC,MAAO,CACHH,UAAW,OACXC,UAAW,OACXC,UAAW,QAKnBJ,aAAoC,CAChCC,MAAO,CACHC,UAAW,MACXC,UAAW,sBACXC,UAAW,OAEfC,MAAO,CACHH,UAAW,YACXC,UAAW,sBACXC,UAAW,QAInBJ,UAAiC,CAC7BC,MAAO,CACHC,UAAW,MACXC,UAAW,MACXC,UAAW,OAEfC,MAAO,CACHH,UAAW,YACXC,UAAW,MACXC,UAAW,QAInBJ,aAAoC,CAChCC,MAAO,CACHC,UAAW,MACXC,UAAW,sBACXC,UAAW,OAEfC,MAAO,CACHH,UAAW,YACXC,UAAW,gBACXC,UAAW,QAInBJ,MAA4B,CACxBC,MAAO,CACHC,UAAW,OACXC,UAAW,sBACXC,UAAW,OAEfC,MAAO,CACHH,UAAW,OACXC,UAAW,gBACXC,UAAW,SCvHZ,MAAME,GA4CTlY,WAAAA,GAES,KAAAmY,aAAe,IAAIhZ,EAAAA,EACxB/D,KAAK+c,aAAaC,OAAQ,EAGpB/X,aAAAA,CAAcC,GAEpBlF,KAAKkF,IAAMA,CAAA,CAOR8P,eAAAA,CAAgBvU,GAEnB,MAAMuc,EAAQR,GAAoB/b,EAAM2D,YAAcoY,GAAoBS,OAEnE,OACH,CACInH,OAAQ,aACRb,UAAW,EACX+H,SAER,CAGG9a,OAAAA,GAEHlC,KAAKkF,IAAM,MA1EN4X,GAGK3a,UAAY,CACtBxD,KAAM,CACFyD,EAAAA,GAAcgF,cAElBnI,KAAM,S,yBCfP,MAAMie,GAA+B,CAExCve,KAAM,QAENwe,MAAAA,CAAO7Z,EAA2B8Z,EAAwBlY,GAEtD,MAAMY,EAAWxC,EAAOwC,SAElBuX,GAA6B,EAApB/Z,EAAOga,aAAwC,EAArBha,EAAOia,aAE1CC,EAAgB1X,EAASmC,WAAaoV,EAE5CnY,EAAIO,OAAOqC,MAAM2V,aACb,CAAEpa,QAAS+Z,GACXtX,EACA,CACIQ,OAAQ,EACRoX,aAAcpa,EAAOia,YACrBI,YAAara,EAAOia,YAAcC,GAEtC,CACI7R,MAAOrI,EAAOga,WACd1R,OAAQtI,EAAOia,YACfK,mBAAoB,GAE5B,GCzBKC,GAA8F,CACvG,iBAAkB,CAAEC,WAAY,EAAGC,WAAY,EAAGC,YAAa,GAC/D,iBAAkB,CAAEF,WAAY,GAAIC,WAAY,EAAGC,YAAa,GAChE,iBAAkB,CAAEF,WAAY,GAAIC,WAAY,EAAGC,YAAa,GAChE,iBAAkB,CAAEF,WAAY,GAAIC,WAAY,EAAGC,YAAa,GAChE,iBAAkB,CAAEF,WAAY,EAAGC,WAAY,EAAGC,YAAa,GAC/D,kBAAmB,CAAEF,WAAY,GAAIC,WAAY,EAAGC,YAAa,GACjE,iBAAkB,CAAEF,WAAY,GAAIC,WAAY,EAAGC,YAAa,IAG9DC,GAAmB,CAAEH,WAAY,EAAGC,WAAY,EAAGC,YAAa,GAEzDE,GAAqC,CAE9Cvf,KAAM,aAENwe,MAAAA,CAAO7Z,EAA0B8Z,EAAwBlY,GAErD,IAAIiZ,EAAW7a,EAAOga,WAClBc,EAAY9a,EAAOia,YAEvB,MAAMc,EAAYR,GAAava,EAAOwS,SAAWmI,GAEjD,IAAK,IAAI7c,EAAI,EAAGA,EAAIkC,EAAOwC,SAASkH,OAAQ5L,IAC5C,CACU,MAAAkd,EAAchb,EAAOwC,SAAS1E,GAE9Buc,EAAcnO,KAAKE,KAAKyO,EAAWE,EAAUN,YAAcM,EAAUP,WAE3E5Y,EAAIO,OAAOqC,MAAM2V,aACb,CACIpa,QAAS+Z,EACTmB,SAAUnd,GAEdkd,EACA,CACIhY,OAAQ,EACRqX,eAEJ,CACIhS,MAAO6D,KAAKE,KAAKyO,EAAWE,EAAUN,YAAcM,EAAUN,WAC9DnS,OAAQ4D,KAAKE,KAAK0O,EAAYC,EAAUL,aAAeK,EAAUL,YACjEJ,mBAAoB,IAI5BO,EAAW3O,KAAKC,IAAI0O,GAAY,EAAG,GACnCC,EAAY5O,KAAKC,IAAI2O,GAAa,EAAG,EAAC,CAC1C,GChDKI,GAAyB,CAElC7f,KAAM,QAENwe,MAAAA,CAAO7Z,EAAuB8Z,EAAwBlY,GAElD,MAAMY,EAAWxC,EAAOwC,SAExB,IAAKA,EAAU,OAET,MAAA6F,EAAQ6D,KAAKiP,IAAIrB,EAAWzR,MAAOrI,EAAOob,eAAiBpb,EAAOga,YAClE1R,EAAS4D,KAAKiP,IAAIrB,EAAWxR,OAAQtI,EAAOqb,gBAAkBrb,EAAOia,aAErEqB,EAA0C,gCAArBtb,EAAOwX,UAElC5V,EAAIO,OAAOqC,MAAM+W,2BACb,CAAEvb,OAAQwC,GACV,CAAEzC,QAAS+Z,EAAYwB,sBACvB,CACIjT,QACAC,UAER,GCpBKkT,GAAyB,CAElCngB,KAAM,QAENwe,MAAAA,CAAO7Z,EAAqB8Z,EAAwBlY,GAEzBsZ,GAAArB,OAAO7Z,EAAQ8Z,EAAYlY,EAAG,GCLtD,MAAM6Z,GAQTna,WAAAA,CAAYa,GAERzF,KAAKyF,OAASA,EACdzF,KAAKyG,QAAUhB,EAAOuZ,cAAc,CAAEC,UAAW,WAEjDjf,KAAKkf,UAAY,CAAC,EAGdC,kBAAAA,CAAmBrJ,GAEnB,IAAAzR,EAAWrE,KAAKkf,UAAUpJ,GAoDvB,OAlDFzR,IAGIrE,KAAKof,qBAED,KAAAA,mBAAqBpf,KAAKyF,OAAO4Q,mBAAmB,CACrDF,KAAiB,stCA4Bd9R,EAAArE,KAAKyF,OAAOyQ,qBAAqB,CACxCvQ,OAAQ,OACRwP,OAAQ,CACJC,OAAQpV,KAAKof,mBACb9J,WAAY,cAEhBC,SAAU,CACNH,OAAQpV,KAAKof,mBACb9J,WAAY,eACZE,QAAS,CAAC,CAAEM,cAIf,KAAAoJ,UAAUpJ,GAAUzR,GAGtBA,CAAA,CAQJgb,cAAAA,CAAehc,GAElB,MAAMgB,EAAWrE,KAAKmf,mBAAmB9b,EAAQyS,QAEjD,GAA0B,OAAtBzS,EAAQic,WAA4C,OAAtBjc,EAAQic,UAEhC,UAAI/P,MAAM,oEAGpB,IAAIgQ,EAAalc,EACX,MAAAmc,EAAkBnc,EAAQua,oBAAsB,EAGhD6B,EAAiBpc,EAAQiO,MAAQ2J,gBAAgBE,kBAEvD,IAAKsE,EACL,CAGI,MAAMC,EAAuB,CACzB1d,KAAM,CACF2J,MAAO6D,KAAKE,KAAKrM,EAAQsI,MAAQ,GACjCC,OAAQ4D,KAAKE,KAAKrM,EAAQuI,OAAS,GACnCgS,mBAAoB4B,GAExB1J,OAAQzS,EAAQyS,OAChBxE,MAAO2J,gBAAgBC,gBAAkBD,gBAAgBvJ,SAAWuJ,gBAAgBE,kBACpFjC,cAAe7V,EAAQ6V,cAAgB,GAG9BqG,EAAAvf,KAAKyF,OAAOka,cAAcD,EAAoB,CAG/D,MAAM1U,EAAiBhL,KAAKyF,OAAOwF,qBAAqB,CAAC,GAEnD2U,EAAkBvb,EAASwb,mBAAmB,GAEpD,IAAK,IAAIC,EAAa,EAAGA,EAAaN,IAAmBM,EACzD,CACQ,IAAAC,EAAU1c,EAAQuD,WAAW,CAC7BoZ,aAAc,EACd9G,cAAe,EACfoG,UAAW,KACXW,eAAgBH,EAChBN,gBAAiB,IAGjBU,EAAcT,EAAiB,EAAI,EAEvC,IAAK,IAAIre,EAAI,EAAGA,EAAIiC,EAAQ6V,gBAAiB9X,EAC7C,CACU,MAAA+e,EAAUZ,EAAW3Y,WAAW,CAClCoZ,aAAcE,IACdhH,cAAe,EACfoG,UAAW,KACXW,eAAgBH,EAChBN,gBAAiB,IAGflL,EAActJ,EAAeE,gBAAgB,CAC/C2N,iBAAkB,CAAC,CACfC,KAAMqH,EACN5G,QAAS,QACTH,OAAQ,QACRX,WAAY,CAAE2H,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,EAAG,OAIrC1f,EAAYb,KAAKyF,OAAOwB,gBAAgB,CAC1CtB,OAAQia,EACRha,QAAS,CAAC,CACNkB,QAAS,EACThB,SAAU9F,KAAKyG,SAChB,CACCK,QAAS,EACThB,SAAUia,MAIlBzL,EAAY5P,YAAYL,GACZiQ,EAAAxT,aAAa,EAAGD,GAC5ByT,EAAY1Q,KAAK,EAAG,EAAG,EAAG,GAE1B0Q,EAAYhJ,MAEFyU,EAAAI,CAAA,CACd,CAKJ,IAAKV,EACL,CACI,MAAMe,EAAe,CACjB7U,MAAO6D,KAAKE,KAAKrM,EAAQsI,MAAQ,GACjCC,OAAQ4D,KAAKE,KAAKrM,EAAQuI,OAAS,GACnCgS,mBAAoB4B,GAGxB,IAAK,IAAIpe,EAAI,EAAGA,EAAIiC,EAAQ6V,gBAAiB9X,EAEzC4J,EAAekN,qBAAqB,CAChC7U,QAASkc,EACThB,SAAUnd,EAAI,GACf,CACCiC,UACAkb,SAAUnd,GACXof,GAEHA,EAAa7U,MAAQ6D,KAAKE,KAAK8Q,EAAa7U,MAAQ,GACpD6U,EAAa5U,OAAS4D,KAAKE,KAAK8Q,EAAa5U,OAAS,EAC1D,CAUG,OAPP5L,KAAKyF,OAAOqC,MAAMsF,OAAO,CAACpC,EAAeqC,WAEpCoS,GAEDF,EAAWrd,UAGRmB,CAAA,ECtLR,MAAMod,GA8BT7b,WAAAA,CAAY3E,GApBZ,KAAgBygB,gBAAmC,GAG3C,KAAAC,YAAiD7b,OAAAC,OAAO,MACxD,KAAA6b,aAAkD9b,OAAAC,OAAO,MACzD,KAAAiM,eAAmDlM,OAAAC,OAAO,MAC1D,KAAA8b,iBAA0D/b,OAAAC,OAAO,MAEzE,KAAiB+b,SAA+C,CAC5DC,MAAOvC,GACPpY,OAAQ8W,GACR8D,MAAOlC,GACPmC,WAAY/C,IAUZle,KAAKgF,UAAY/E,CAAA,CAGXgF,aAAAA,CAAcC,GAEpBlF,KAAKmF,KAAOD,CAAA,CAGTgc,UAAAA,CAAW5d,GAEd,GAAIA,EAAO6d,oBACX,CACI,MAAMC,EAAmB5R,KAAKC,IAAInM,EAAOga,WAAYha,EAAOia,aAE5Dja,EAAO4V,cAAgB1J,KAAK6R,MAAM7R,KAAK8R,KAAKF,IAAqB,EAGjE,IAAA9P,EAAQ2J,gBAAgBC,gBAAkBD,gBAAgBxJ,SAEhC,eAA1BnO,EAAOie,iBAEPjQ,GAAS2J,gBAAgBE,kBACzB7J,GAAS2J,gBAAgBvJ,UAGvB,MAAA2M,EAAYR,GAAava,EAAOwS,SAAW,CAAEgI,WAAY,EAAGC,WAAY,EAAGC,YAAa,GAExFrS,EAAQ6D,KAAKE,KAAKpM,EAAOga,WAAae,EAAUN,YAAcM,EAAUN,WACxEnS,EAAS4D,KAAKE,KAAKpM,EAAOia,YAAcc,EAAUL,aAAeK,EAAUL,YAE3EwD,EAA0C,CAC5C5L,MAAOtS,EAAOsS,MACd5T,KAAM,CAAE2J,QAAOC,UACfkK,OAAQxS,EAAOwS,OACf8D,YAAatW,EAAOsW,YACpBV,cAAe5V,EAAO4V,cACtBoG,UAAWhc,EAAOgc,UAClBhO,SAGE8L,EAAapd,KAAKmF,KAAKM,OAAOka,cAAc6B,GAiB3C,OAfF,KAAAb,YAAYrd,EAAOkE,KAAO4V,EAE1Bpd,KAAK0gB,gBAAgBe,SAASne,KAE/BA,EAAO8E,GAAG,SAAUpI,KAAK0hB,eAAgB1hB,MACzCsD,EAAO8E,GAAG,SAAUpI,KAAK2hB,eAAgB3hB,MACzCsD,EAAO8E,GAAG,UAAWpI,KAAK4hB,gBAAiB5hB,MAC3CsD,EAAO8E,GAAG,SAAUpI,KAAK6hB,eAAgB7hB,MACzCsD,EAAO8E,GAAG,gBAAiBpI,KAAK8hB,gBAAiB9hB,MAE5C,KAAA0gB,gBAAgB7Z,KAAKvD,IAG9BtD,KAAK0hB,eAAepe,GAEb8Z,CAAA,CAGDsE,cAAAA,CAAepe,GAEf,MAAA8Z,EAAapd,KAAK2G,aAAarD,GAGhC8Z,IAEDpd,KAAK8gB,SAASxd,EAAOie,iBAEhB,KAAAT,SAASxd,EAAOie,gBAAgBpE,OAAO7Z,EAAQ8Z,EAAYpd,KAAKmF,MAGrE7B,EAAO6d,qBAAuB7d,EAAO4V,cAAgB,GAErDlZ,KAAK8hB,gBAAgBxe,GACzB,CAGMue,cAAAA,CAAeve,GAErB,MAAM8Z,EAAapd,KAAK2gB,YAAYrd,EAAOkE,KAEvC4V,IAEK,KAAAuD,YAAYrd,EAAOkE,KAAO,KAE/B4V,EAAWlb,UACf,CAGM4f,eAAAA,CAAgBxe,GAEjBtD,KAAK+hB,mBAEN/hB,KAAK+hB,iBAAmB,IAAIhD,GAAmB/e,KAAKmF,KAAKM,SAGvD,MAAA2X,EAAapd,KAAK2G,aAAarD,GAEhC,KAAAye,iBAAiB1C,eAAejC,EAAU,CAGzCwE,eAAAA,CAAgBte,GAEtBA,EAAOuF,IAAI,SAAU7I,KAAK0hB,eAAgB1hB,MAC1CsD,EAAOuF,IAAI,SAAU7I,KAAK6hB,eAAgB7hB,MAC1CsD,EAAOuF,IAAI,UAAW7I,KAAK4hB,gBAAiB5hB,MAC5CsD,EAAOuF,IAAI,SAAU7I,KAAK2hB,eAAgB3hB,MAC1CsD,EAAOuF,IAAI,gBAAiB7I,KAAK8hB,gBAAiB9hB,MAElDA,KAAK0gB,gBAAgB/X,OAAO3I,KAAK0gB,gBAAgB9X,QAAQtF,GAAS,GAElEtD,KAAK6hB,eAAeve,EAAM,CAGpBqe,cAAAA,CAAere,GAErB,MAAM8Z,EAAapd,KAAK2gB,YAAYrd,EAAOkE,KAEtC4V,EAIIA,EAAWzR,QAAUrI,EAAOga,YAAcF,EAAWxR,SAAWtI,EAAOia,cAEvE,KAAAsD,iBAAiBvd,EAAOkE,KAAO,KAC/B,KAAAwJ,eAAe1N,EAAOkE,KAAO,KAElCxH,KAAK6hB,eAAeve,GACpBtD,KAAKkhB,WAAW5d,IARhBtD,KAAKkhB,WAAW5d,EASpB,CAGI0e,YAAAA,CAAavb,GAIV,OAFF,KAAAma,aAAana,EAAQwb,aAAejiB,KAAKmF,KAAKM,OAAOuZ,cAAcvY,GAEjEzG,KAAK4gB,aAAana,EAAQwb,YAAW,CAGzCvb,aAAAA,CAAcD,GAEjB,OAAOzG,KAAK4gB,aAAana,EAAQwb,cAAgBjiB,KAAKgiB,aAAavb,EAAO,CAGvEE,YAAAA,CAAarD,GAEhB,OAAOtD,KAAK2gB,YAAYrd,EAAOkE,MAAQxH,KAAKkhB,WAAW5d,EAAM,CAG1D4e,mBAAAA,CAAoB7e,GAEvB,OAAOrD,KAAKgR,eAAe3N,EAAQmE,MAAQxH,KAAKmiB,wBAAwB9e,EAAO,CAG3E8e,uBAAAA,CAAwB9e,GAE5B,MAAMC,EAASD,EAAQC,OAEjB8e,EAAc9e,EAAOkE,IAOpB,OALPxH,KAAKgR,eAAeoR,GAAe,IAAI5P,EAAAA,EAAU,CAC7C,EAAGlP,EACH,EAAGA,EAAOP,QAGP/C,KAAKgR,eAAeoR,EAAW,CAGnCjJ,cAAAA,CAAe9V,GAElB,MAAMC,EAASD,EAAQC,OAEvB,OAAOtD,KAAK6gB,iBAAiBvd,EAAOkE,MAAQxH,KAAKqiB,mBAAmB/e,EAAM,CAGtE+e,kBAAAA,CAAmBhf,GAIhB,OAFF,KAAAwd,iBAAiBxd,EAAQmE,KAAOxH,KAAK2G,aAAatD,GAASuD,aAEzD5G,KAAK6gB,iBAAiBxd,EAAQmE,IAAG,CAGrC8a,cAAAA,CAAejf,GAElB,MAAMpD,EAAWD,KAAKgF,UAEhBgG,EAAiB/K,EAASiF,IAAIO,OAAOwF,uBAGrCsX,EAASC,GAAAA,EAAWC,MAAMC,eAEzBH,EAAA5W,MAAQtI,EAAQC,OAAOga,WACvBiF,EAAA3W,OAASvI,EAAQC,OAAOia,YAEzB,MAAAzd,EAAUyiB,EAAO1H,WAAW,UAyB3B,OAvBP/a,EAAQkb,UAAU,CACdvV,OAAQxF,EAASiF,IAAIO,OAErB6L,MAAO2J,gBAAgBxJ,SAAWwJ,gBAAgBvJ,SAClDoE,OAAQjM,UAAU3E,IAAIyd,2BACtB7H,UAAW,kBAGf9P,EAAekN,qBAAqB,CAChC7U,QAASpD,EAASoD,QAAQsD,aAAatD,EAAQC,QAC/C6U,OAAQ,CACJ1M,EAAG,EACHC,EAAG,IAER,CACCrI,QAASvD,EAAQyY,qBAClB,CACC5M,MAAO4W,EAAO5W,MACdC,OAAQ2W,EAAO3W,SAGV3L,EAAAiF,IAAIO,OAAOqC,MAAMsF,OAAO,CAACpC,EAAeqC,WAE1CkV,CAAA,CAGJK,SAAAA,CAAUvf,GAEP,MAAAwf,EAAe7iB,KAAKsiB,eAAejf,GAEnCyf,EAAmBC,GAAAA,EAAWC,2BAA2BH,EAAalX,MAAOkX,EAAajX,QAE1F9L,EAAUgjB,EAAiBhjB,QAEzBA,EAAAmjB,UAAUJ,EAAc,EAAG,GAE7B,YAAElX,EAAOC,OAAAA,GAAWiX,EAEpBK,EAAYpjB,EAAQqjB,aAAa,EAAG,EAAGxX,EAAOC,GAE9CwX,EAAS,IAAIC,kBAAkBH,EAAUtb,KAAKxB,QAI7C,OAFP2c,GAAAA,EAAWO,uBAAuBR,GAE3B,CAAEM,SAAQzX,QAAOC,SAAO,CAG5B1J,OAAAA,GAIE,KAAAwe,gBACA5X,QACAC,SAASzF,GAAWtD,KAAK4hB,gBAAgBte,KAE7CtD,KAAK0gB,gBAA2B,KAEjC,IAAK,MAAM6C,KAAKze,OAAOqC,KAAKnH,KAAKgR,gBACjC,CACU,MAAA9J,EAAMsc,OAAOD,GACb1iB,EAAYb,KAAKgR,eAAe9J,GAEtCrG,GAAWqB,UACN,KAAA8O,eAAe9J,GAAO,KAG/BlH,KAAKmF,KAAO,KACZnF,KAAK+hB,iBAAmB,KACxB/hB,KAAK2gB,YAAc,KACnB3gB,KAAKgR,eAAiB,KACtBhR,KAAK6gB,iBAAmB,KACxB7gB,KAAK4gB,aAAe,MA5SfH,GAGKte,UAAY,CACtBxD,KAAM,CACFyD,EAAAA,GAAcgF,cAElBnI,KAAM,WCJd,MAAMwkB,GAAuB,IACtBC,EAAAA,EACHzT,EACAzF,EACAnB,EACAhC,EACAoZ,GACA5E,GACAG,GACAc,GACAzJ,GACArK,EACA+E,EACApJ,GAEEgf,GAAqB,IAAIC,EAAAA,EAAmB7S,GAC5C8S,GAAwB,CAAC5f,EAAiB3B,EAAgBlE,GAG1D0lB,GAAwD,GACxD9iB,GAA0D,GAC1D+iB,GAAqD,GAE3DC,EAAAA,GAAWC,kBAAkB7hB,EAAAA,GAAcgF,aAAc0c,IACzDE,EAAAA,GAAWC,kBAAkB7hB,EAAAA,GAAcyQ,YAAa7R,IACxDgjB,EAAAA,GAAWC,kBAAkB7hB,EAAAA,GAAcC,mBAAoB0hB,IAG/DC,EAAAA,GAAW9V,OAAOuV,MAAyBE,MAAuBE,IAkF3D,MAAMK,WACDC,EAAAA,EAMRvf,WAAAA,GAEI,MAAMwf,EAAe,CACjBnlB,KAAM,SACNN,KAAM0lB,EAAAA,EAAaC,OACnBR,WACA9iB,eACA+iB,uBAGJhI,MAAMqI,EAAY,E,sFCpInB,MAAMG,EAaT3f,WAAAA,CAAY4f,GAEH,KAAAC,YAAqB3f,OAAAC,OAAO,MAC5B,KAAAyf,cAAgBA,GAAiB,CAAC,EACvCxkB,KAAK0kB,kBAAmB,EAQpBC,uBAAAA,CAAwBrH,EAAoBC,GAEhD,MAAMgF,EAASC,EAAAA,EAAWC,MAAMC,eAEhCH,EAAO5W,MAAQ2R,EACfiF,EAAO3W,OAAS2R,EAEV,MAAAzd,EAAUyiB,EAAO1H,WAAW,MAE3B,OAAE0H,SAAQziB,UAAQ,CAUtBkjB,0BAAAA,CAA2B4B,EAAkBC,EAAmBC,EAAa,GAEhFF,EAAWpV,KAAKE,KAAMkV,EAAWE,EAAc,MAC/CD,EAAYrV,KAAKE,KAAMmV,EAAYC,EAAc,MACjDF,GAAWG,EAAAA,EAAAA,IAASH,GACpBC,GAAYE,EAAAA,EAAAA,IAASF,GAEf,MAAA3d,GAAO0d,GAAY,KAAOC,GAAa,GAExC7kB,KAAKykB,YAAYvd,KAEb,KAAAud,YAAYvd,GAAO,IAG5B,IAAI4b,EAAmB9iB,KAAKykB,YAAYvd,GAAK8d,MAOtC,OALFlC,IAEkBA,EAAA9iB,KAAK2kB,wBAAwBC,EAAUC,IAGvD/B,CAAA,CAOJQ,sBAAAA,CAAuBR,GAE1B,MAAM,MAAEnX,EAAA,OAAOC,GAAWkX,EAAiBP,OAErCrb,GAAOyE,GAAS,KAAOC,GAAU,GAEvC5L,KAAKykB,YAAYvd,GAAKL,KAAKic,EAAgB,CAGxCrS,KAAAA,GAEHzQ,KAAKykB,YAAc,CAAC,GAIf,MAAA1B,EAAa,IAAIwB,C","sources":["webpack://astar/../../../../src/scene/graphics/gpu/GpuGraphicsAdaptor.ts","webpack://astar/../../../../src/scene/mesh/gpu/GpuMeshAdapter.ts","webpack://astar/../../../../src/rendering/batcher/gpu/GpuBatchAdaptor.ts","webpack://astar/../../../../src/rendering/renderers/gpu/BindGroupSystem.ts","webpack://astar/../../../../../src/rendering/renderers/gpu/buffer/GpuBufferSystem.ts","webpack://astar/../../../../src/rendering/renderers/gpu/GpuColorMaskSystem.ts","webpack://astar/../../../../src/rendering/renderers/gpu/GpuDeviceSystem.ts","webpack://astar/../../../../src/rendering/renderers/gpu/GpuEncoderSystem.ts","webpack://astar/../../../../src/rendering/renderers/gpu/GpuStencilSystem.ts","webpack://astar/../../../../../../src/rendering/renderers/gpu/shader/utils/createUboElementsWGSL.ts","webpack://astar/../../../../../../src/rendering/renderers/gpu/shader/utils/generateArraySyncWGSL.ts","webpack://astar/../../../../../../src/rendering/renderers/gpu/shader/utils/createUboSyncFunctionWGSL.ts","webpack://astar/../../../../src/rendering/renderers/gpu/GpuUboSystem.ts","webpack://astar/../../../../../src/rendering/renderers/gpu/buffer/UboBatch.ts","webpack://astar/../../../../src/rendering/renderers/gpu/GpuUniformBatchPipe.ts","webpack://astar/../../../../../src/rendering/renderers/gpu/pipeline/PipelineSystem.ts","webpack://astar/../../../../../src/rendering/renderers/gpu/renderTarget/GpuRenderTarget.ts","webpack://astar/../../../../../src/rendering/renderers/gpu/renderTarget/GpuRenderTargetAdaptor.ts","webpack://astar/../../../../../src/rendering/renderers/gpu/renderTarget/GpuRenderTargetSystem.ts","webpack://astar/../../../../../src/rendering/renderers/gpu/shader/GpuShaderSystem.ts","webpack://astar/../../../../../src/rendering/renderers/gpu/state/GpuBlendModesToPixi.ts","webpack://astar/../../../../../src/rendering/renderers/gpu/state/GpuStateSystem.ts","webpack://astar/../../../../../../src/rendering/renderers/gpu/texture/uploaders/gpuUploadBufferImageResource.ts","webpack://astar/../../../../../../src/rendering/renderers/gpu/texture/uploaders/gpuUploadCompressedTextureResource.ts","webpack://astar/../../../../../../src/rendering/renderers/gpu/texture/uploaders/gpuUploadImageSource.ts","webpack://astar/../../../../../../src/rendering/renderers/gpu/texture/uploaders/gpuUploadVideoSource.ts","webpack://astar/../../../../../../src/rendering/renderers/gpu/texture/utils/GpuMipmapGenerator.ts","webpack://astar/../../../../../src/rendering/renderers/gpu/texture/GpuTextureSystem.ts","webpack://astar/../../../../src/rendering/renderers/gpu/WebGPURenderer.ts","webpack://astar/../../../../../src/rendering/renderers/shared/texture/CanvasPool.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { Matrix } from '../../../maths/matrix/Matrix';\nimport { getTextureBatchBindGroup } from '../../../rendering/batcher/gpu/getTextureBatchBindGroup';\nimport { MAX_TEXTURES } from '../../../rendering/batcher/shared/const';\nimport { compileHighShaderGpuProgram } from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { colorBit } from '../../../rendering/high-shader/shader-bits/colorBit';\nimport { generateTextureBatchBit } from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit';\nimport { localUniformBitGroup2 } from '../../../rendering/high-shader/shader-bits/localUniformBit';\nimport { roundPixelsBit } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\n\nimport type { Batch } from '../../../rendering/batcher/shared/Batcher';\nimport type { GpuEncoderSystem } from '../../../rendering/renderers/gpu/GpuEncoderSystem';\nimport type { WebGPURenderer } from '../../../rendering/renderers/gpu/WebGPURenderer';\nimport type { Graphics } from '../shared/Graphics';\nimport type { GraphicsAdaptor, GraphicsPipe } from '../shared/GraphicsPipe';\n\n/**\n * A GraphicsAdaptor that uses the GPU to render graphics.\n * @memberof rendering\n * @ignore\n */\nexport class GpuGraphicsAdaptor implements GraphicsAdaptor\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUPipesAdaptor,\n        ],\n        name: 'graphics',\n    } as const;\n\n    public shader: Shader;\n\n    public init()\n    {\n        const localUniforms = new UniformGroup({\n            uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n            uRound: { value: 0, type: 'f32' },\n        });\n\n        const gpuProgram = compileHighShaderGpuProgram({\n            name: 'graphics',\n            bits: [\n                colorBit,\n                generateTextureBatchBit(MAX_TEXTURES),\n\n                localUniformBitGroup2,\n                roundPixelsBit\n            ]\n        });\n\n        this.shader = new Shader({\n            gpuProgram,\n            resources: {\n                // added on the fly!\n                localUniforms,\n            },\n        });\n    }\n\n    public execute(graphicsPipe: GraphicsPipe, renderable: Graphics): void\n    {\n        const context = renderable.context;\n        const shader = context.customShader || this.shader;\n        const renderer = graphicsPipe.renderer as WebGPURenderer;\n        const contextSystem = renderer.graphicsContext;\n\n        const {\n            geometry, instructions\n        } = contextSystem.getContextRenderData(context);\n\n        // WebGPU specific...\n\n        // TODO perf test this a bit...\n        const encoder = renderer.encoder as GpuEncoderSystem;\n\n        encoder.setPipelineFromGeometryProgramAndState(\n            geometry,\n            shader.gpuProgram,\n            graphicsPipe.state\n        );\n\n        encoder.setGeometry(geometry);\n\n        const globalUniformsBindGroup = renderer.globalUniforms.bindGroup;\n\n        encoder.setBindGroup(0, globalUniformsBindGroup, shader.gpuProgram);\n\n        const localBindGroup = (renderer as WebGPURenderer)\n            .renderPipes.uniformBatch.getUniformBindGroup(shader.resources.localUniforms, true);\n\n        encoder.setBindGroup(2, localBindGroup, shader.gpuProgram);\n\n        const batches = instructions.instructions as Batch[];\n\n        for (let i = 0; i < instructions.instructionSize; i++)\n        {\n            const batch = batches[i];\n\n            shader.groups[1] = batch.bindGroup;\n\n            if (!batch.gpuBindGroup)\n            {\n                const textureBatch = batch.textures;\n\n                batch.bindGroup = getTextureBatchBindGroup(textureBatch.textures, textureBatch.count);\n                batch.gpuBindGroup = renderer.bindGroup.getBindGroup(\n                    batch.bindGroup, shader.gpuProgram, 1\n                );\n            }\n\n            encoder.setBindGroup(1, batch.bindGroup, shader.gpuProgram);\n\n            encoder.renderPassEncoder.drawIndexed(batch.size, 1, batch.start);\n        }\n    }\n\n    public destroy(): void\n    {\n        this.shader.destroy(true);\n        this.shader = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { Matrix } from '../../../maths/matrix/Matrix';\nimport { compileHighShaderGpuProgram } from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { localUniformBit } from '../../../rendering/high-shader/shader-bits/localUniformBit';\nimport { roundPixelsBit } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { textureBit } from '../../../rendering/high-shader/shader-bits/textureBit';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport { warn } from '../../../utils/logging/warn';\n\nimport type { WebGPURenderer } from '../../../rendering/renderers/gpu/WebGPURenderer';\nimport type { Mesh } from '../shared/Mesh';\nimport type { MeshAdaptor, MeshPipe } from '../shared/MeshPipe';\n\n/**\n * The WebGL adaptor for the mesh system. Allows the Mesh System to be used with the WebGl renderer\n * @memberof rendering\n * @ignore\n */\nexport class GpuMeshAdapter implements MeshAdaptor\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUPipesAdaptor,\n        ],\n        name: 'mesh',\n    } as const;\n\n    private _shader: Shader;\n\n    public init(): void\n    {\n        const gpuProgram = compileHighShaderGpuProgram({\n            name: 'mesh',\n            bits: [\n                localUniformBit,\n                textureBit,\n                roundPixelsBit,\n            ]\n        });\n\n        this._shader = new Shader({\n            gpuProgram,\n            resources: {\n                uTexture: Texture.EMPTY._source,\n                uSampler: Texture.EMPTY._source.style,\n                textureUniforms: {\n                    uTextureMatrix: { type: 'mat3x3<f32>', value: new Matrix() },\n                }\n            }\n        });\n    }\n\n    public execute(meshPipe: MeshPipe, mesh: Mesh)\n    {\n        const renderer = meshPipe.renderer;\n\n        let shader: Shader = mesh._shader;\n\n        if (!shader)\n        {\n            shader = this._shader;\n\n            shader.resources.uTexture = mesh.texture.source;\n            shader.resources.uSampler = mesh.texture.source.style;\n            shader.resources.textureUniforms.uniforms.uTextureMatrix = mesh.texture.textureMatrix.mapCoord;\n        }\n        else if (!shader.gpuProgram)\n        {\n            // #if _DEBUG\n            warn('Mesh shader has no gpuProgram', mesh.shader);\n            // #endif\n\n            return;\n        }\n\n        const gpuProgram = shader.gpuProgram;\n        // GPU..\n\n        if (gpuProgram.autoAssignGlobalUniforms)\n        {\n            shader.groups[0] = renderer.globalUniforms.bindGroup;\n        }\n\n        if (gpuProgram.autoAssignLocalUniforms)\n        {\n            const localUniforms = meshPipe.localUniforms;\n\n            shader.groups[1] = (renderer as WebGPURenderer)\n                .renderPipes.uniformBatch.getUniformBindGroup(localUniforms, true);\n        }\n\n        renderer.encoder.draw({\n            geometry: mesh._geometry,\n            shader,\n            state: mesh.state\n        });\n    }\n\n    public destroy(): void\n    {\n        this._shader.destroy(true);\n        this._shader = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { compileHighShaderGpuProgram } from '../../high-shader/compileHighShaderToProgram';\nimport { colorBit } from '../../high-shader/shader-bits/colorBit';\nimport { generateTextureBatchBit } from '../../high-shader/shader-bits/generateTextureBatchBit';\nimport { roundPixelsBit } from '../../high-shader/shader-bits/roundPixelsBit';\nimport { Shader } from '../../renderers/shared/shader/Shader';\nimport { State } from '../../renderers/shared/state/State';\nimport { MAX_TEXTURES } from '../shared/const';\nimport { getTextureBatchBindGroup } from './getTextureBatchBindGroup';\n\nimport type { GpuEncoderSystem } from '../../renderers/gpu/GpuEncoderSystem';\nimport type { WebGPURenderer } from '../../renderers/gpu/WebGPURenderer';\nimport type { Geometry } from '../../renderers/shared/geometry/Geometry';\nimport type { Batch } from '../shared/Batcher';\nimport type { BatcherAdaptor, BatcherPipe } from '../shared/BatcherPipe';\n\nconst tempState = State.for2d();\n\n/**\n * A BatcherAdaptor that uses the GPU to render batches.\n * @memberof rendering\n * @ignore\n */\nexport class GpuBatchAdaptor implements BatcherAdaptor\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUPipesAdaptor,\n        ],\n        name: 'batch',\n    } as const;\n\n    private _shader: Shader;\n    private _geometry: Geometry;\n\n    public init()\n    {\n        const gpuProgram = compileHighShaderGpuProgram({\n            name: 'batch',\n            bits: [\n                colorBit,\n                generateTextureBatchBit(MAX_TEXTURES),\n                roundPixelsBit,\n            ]\n        });\n\n        this._shader = new Shader({\n            gpuProgram,\n            groups: {\n                // these will be dynamically allocated\n            },\n        });\n    }\n\n    public start(batchPipe: BatcherPipe, geometry: Geometry): void\n    {\n        const renderer = batchPipe.renderer as WebGPURenderer;\n        const encoder = renderer.encoder as GpuEncoderSystem;\n        const program = this._shader.gpuProgram;\n\n        this._geometry = geometry;\n\n        encoder.setGeometry(geometry);\n\n        tempState.blendMode = 'normal';\n\n        // this just initiates the pipeline, so we can then set bind groups on it\n        renderer.pipeline.getPipeline(\n            geometry,\n            program,\n            tempState\n        );\n\n        const globalUniformsBindGroup = renderer.globalUniforms.bindGroup;\n\n        // low level - we need to reset the bind group at location 1 to null\n        // this is because we directly manipulate the bound buffer in the execture function for\n        // performance reasons.\n        // setting it to null ensures that the next bind group we set at location 1 will\n        // be the one we want.\n        encoder.resetBindGroup(1);\n\n        encoder.setBindGroup(0, globalUniformsBindGroup, program);\n    }\n\n    public execute(batchPipe: BatcherPipe, batch: Batch): void\n    {\n        const program = this._shader.gpuProgram;\n        const renderer = batchPipe.renderer as WebGPURenderer;\n        const encoder = renderer.encoder as GpuEncoderSystem;\n\n        if (!batch.bindGroup)\n        {\n            const textureBatch = batch.textures;\n\n            batch.bindGroup = getTextureBatchBindGroup(textureBatch.textures, textureBatch.count);\n        }\n\n        tempState.blendMode = batch.blendMode;\n\n        const gpuBindGroup = renderer.bindGroup.getBindGroup(\n            batch.bindGroup, program, 1\n        );\n\n        const pipeline = renderer.pipeline.getPipeline(\n            this._geometry,\n            program,\n            tempState\n        );\n\n        batch.bindGroup._touch(renderer.textureGC.count);\n\n        encoder.setPipeline(pipeline);\n\n        encoder.renderPassEncoder.setBindGroup(1, gpuBindGroup);\n        encoder.renderPassEncoder.drawIndexed(batch.size, 1, batch.start);\n    }\n\n    public destroy(): void\n    {\n        this._shader.destroy(true);\n        this._shader = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\n\nimport type { Buffer } from '../shared/buffer/Buffer';\nimport type { BufferResource } from '../shared/buffer/BufferResource';\nimport type { UniformGroup } from '../shared/shader/UniformGroup';\nimport type { System } from '../shared/system/System';\nimport type { TextureSource } from '../shared/texture/sources/TextureSource';\nimport type { TextureStyle } from '../shared/texture/TextureStyle';\nimport type { GPU } from './GpuDeviceSystem';\nimport type { BindGroup } from './shader/BindGroup';\nimport type { BindResource } from './shader/BindResource';\nimport type { GpuProgram } from './shader/GpuProgram';\nimport type { WebGPURenderer } from './WebGPURenderer';\n\n/**\n * This manages the WebGPU bind groups. this is how data is bound to a shader when rendering\n * @memberof rendering\n */\nexport class BindGroupSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'bindGroup',\n    } as const;\n\n    private readonly _renderer: WebGPURenderer;\n\n    private _hash: Record<string, GPUBindGroup> = Object.create(null);\n    private _gpu: GPU;\n\n    constructor(renderer: WebGPURenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    protected contextChange(gpu: GPU): void\n    {\n        this._gpu = gpu;\n    }\n\n    public getBindGroup(bindGroup: BindGroup, program: GpuProgram, groupIndex: number): GPUBindGroup\n    {\n        bindGroup._updateKey();\n\n        const gpuBindGroup = this._hash[bindGroup._key] || this._createBindGroup(bindGroup, program, groupIndex);\n\n        return gpuBindGroup;\n    }\n\n    private _createBindGroup(group: BindGroup, program: GpuProgram, groupIndex: number): GPUBindGroup\n    {\n        const device = this._gpu.device;\n        const groupLayout = program.layout[groupIndex];\n        const entries: GPUBindGroupEntry[] = [];\n        const renderer = this._renderer;\n\n        for (const j in groupLayout)\n        {\n            const resource: BindResource = group.resources[j] ?? group.resources[groupLayout[j]];\n            let gpuResource: GPUSampler | GPUTextureView | GPUExternalTexture | GPUBufferBinding;\n            // TODO make this dynamic..\n\n            if (resource._resourceType === 'uniformGroup')\n            {\n                const uniformGroup = resource as UniformGroup;\n\n                renderer.ubo.updateUniformGroup(uniformGroup as UniformGroup);\n\n                const buffer = uniformGroup.buffer;\n\n                gpuResource = {\n                    buffer: renderer.buffer.getGPUBuffer(buffer),\n                    offset: 0,\n                    size: buffer.descriptor.size,\n                };\n            }\n            else if (resource._resourceType === 'buffer')\n            {\n                const buffer = resource as Buffer;\n\n                gpuResource = {\n                    buffer: renderer.buffer.getGPUBuffer(buffer),\n                    offset: 0,\n                    size: buffer.descriptor.size,\n                };\n            }\n            else if (resource._resourceType === 'bufferResource')\n            {\n                const bufferResource = resource as BufferResource;\n\n                gpuResource = {\n                    buffer: renderer.buffer.getGPUBuffer(bufferResource.buffer),\n                    offset: bufferResource.offset,\n                    size: bufferResource.size,\n                };\n            }\n            else if (resource._resourceType === 'textureSampler')\n            {\n                const sampler = resource as TextureStyle;\n\n                gpuResource = renderer.texture.getGpuSampler(sampler);\n            }\n            else if (resource._resourceType === 'textureSource')\n            {\n                const texture = resource as TextureSource;\n\n                gpuResource = renderer.texture.getGpuSource(texture).createView({\n\n                });\n            }\n\n            entries.push({\n                binding: groupLayout[j],\n                resource: gpuResource,\n            });\n        }\n\n        const layout = renderer.shader.getProgramData(program).bindGroups[groupIndex];\n\n        const gpuBindGroup = device.createBindGroup({\n            layout,\n            entries,\n        });\n\n        this._hash[group._key] = gpuBindGroup;\n\n        return gpuBindGroup;\n    }\n\n    public destroy(): void\n    {\n        for (const key of Object.keys(this._hash))\n        {\n            this._hash[key] = null;\n        }\n\n        this._hash = null;\n\n        (this._renderer as null) = null;\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { fastCopy } from '../../shared/buffer/utils/fastCopy';\n\nimport type { Buffer } from '../../shared/buffer/Buffer';\nimport type { System } from '../../shared/system/System';\nimport type { GPU } from '../GpuDeviceSystem';\n\n/**\n * System plugin to the renderer to manage buffers.\n * @memberof rendering\n */\nexport class GpuBufferSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'buffer',\n    } as const;\n\n    protected CONTEXT_UID: number;\n    private _gpuBuffers: { [key: number]: GPUBuffer } = Object.create(null);\n    private readonly _managedBuffers: Buffer[] = [];\n\n    private _gpu: GPU;\n\n    protected contextChange(gpu: GPU): void\n    {\n        this._gpu = gpu;\n    }\n\n    public getGPUBuffer(buffer: Buffer): GPUBuffer\n    {\n        return this._gpuBuffers[buffer.uid] || this.createGPUBuffer(buffer);\n    }\n\n    public updateBuffer(buffer: Buffer): GPUBuffer\n    {\n        const gpuBuffer = this._gpuBuffers[buffer.uid] || this.createGPUBuffer(buffer);\n\n        const data = buffer.data;\n\n        // TODO this can be better...\n        if (buffer._updateID && data)\n        {\n            buffer._updateID = 0;\n\n            // make sure\n            this._gpu.device.queue.writeBuffer(\n                gpuBuffer, 0, data.buffer, 0,\n                // round to the nearest 4 bytes\n                ((buffer._updateSize || data.byteLength) + 3) & ~3\n            );\n        }\n\n        return gpuBuffer;\n    }\n\n    /** dispose all WebGL resources of all managed buffers */\n    public destroyAll(): void\n    {\n        for (const id in this._gpuBuffers)\n        {\n            this._gpuBuffers[id].destroy();\n        }\n\n        this._gpuBuffers = {};\n    }\n\n    public createGPUBuffer(buffer: Buffer): GPUBuffer\n    {\n        if (!this._gpuBuffers[buffer.uid])\n        {\n            buffer.on('update', this.updateBuffer, this);\n            buffer.on('change', this.onBufferChange, this);\n            buffer.on('destroy', this.onBufferDestroy, this);\n        }\n\n        const gpuBuffer = this._gpu.device.createBuffer(buffer.descriptor);\n\n        buffer._updateID = 0;\n\n        if (buffer.data)\n        {\n            // TODO if data is static, this can be mapped at creation\n            fastCopy(buffer.data.buffer, gpuBuffer.getMappedRange());\n\n            gpuBuffer.unmap();\n        }\n\n        this._gpuBuffers[buffer.uid] = gpuBuffer;\n\n        this._managedBuffers.push(buffer);\n\n        return gpuBuffer;\n    }\n\n    protected onBufferChange(buffer: Buffer)\n    {\n        const gpuBuffer = this._gpuBuffers[buffer.uid];\n\n        gpuBuffer.destroy();\n        buffer._updateID = 0;\n        this._gpuBuffers[buffer.uid] = this.createGPUBuffer(buffer);\n    }\n\n    /**\n     * Disposes buffer\n     * @param buffer - buffer with data\n     */\n    protected onBufferDestroy(buffer: Buffer): void\n    {\n        const gpuBuffer = this._gpuBuffers[buffer.uid];\n\n        gpuBuffer.destroy();\n\n        this._managedBuffers.splice(this._managedBuffers.indexOf(buffer), 1);\n\n        buffer.off('update', this.updateBuffer, this);\n        buffer.off('change', this.onBufferChange, this);\n        buffer.off('destroy', this.onBufferDestroy, this);\n\n        this._gpuBuffers[buffer.uid] = null;\n    }\n\n    public destroy(): void\n    {\n        this._managedBuffers\n            .slice()\n            .forEach((buffer) => this.onBufferDestroy(buffer));\n\n        (this._managedBuffers as null) = null;\n\n        this._gpuBuffers = null;\n    }\n}\n\n","import { ExtensionType } from '../../../extensions/Extensions';\n\nimport type { System } from '../shared/system/System';\nimport type { WebGPURenderer } from './WebGPURenderer';\n\n/**\n * The system that handles color masking for the GPU.\n * @memberof rendering\n */\nexport class GpuColorMaskSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'colorMask',\n    } as const;\n\n    private readonly _renderer: WebGPURenderer;\n\n    private _colorMaskCache = 0b1111;\n\n    constructor(renderer: WebGPURenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public setMask(colorMask: number)\n    {\n        if (this._colorMaskCache === colorMask) return;\n        this._colorMaskCache = colorMask;\n\n        this._renderer.pipeline.setColorMask(colorMask);\n    }\n\n    public destroy()\n    {\n        (this._renderer as null) = null;\n        this._colorMaskCache = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\n\nimport type { System } from '../shared/system/System';\nimport type { GpuPowerPreference } from '../types';\nimport type { WebGPURenderer } from './WebGPURenderer';\n\n/** The GPU object. */\nexport interface GPU\n{\n    /** The GPU adapter */\n    adapter: GPUAdapter;\n    /** The GPU device */\n    device: GPUDevice;\n}\n\n/**\n * Options for the WebGPU context.\n * @property {GpuPowerPreference} [powerPreference=default] - An optional hint indicating what configuration of GPU\n * is suitable for the WebGPU context, can be `'high-performance'` or `'low-power'`.\n * Setting to `'high-performance'` will prioritize rendering performance over power consumption,\n * while setting to `'low-power'` will prioritize power saving over rendering performance.\n * @property {boolean} [forceFallbackAdapter=false] - Force the use of the fallback adapter\n * @memberof rendering\n */\nexport interface GpuContextOptions\n{\n    /**\n     * An optional hint indicating what configuration of GPU is suitable for the WebGPU context,\n     * can be `'high-performance'` or `'low-power'`.\n     * Setting to `'high-performance'` will prioritize rendering performance over power consumption,\n     * while setting to `'low-power'` will prioritize power saving over rendering performance.\n     * @default undefined\n     * @memberof rendering.WebGPUOptions\n     */\n    powerPreference?: GpuPowerPreference;\n    /**\n     * Force the use of the fallback adapter\n     * @default false\n     * @memberof rendering.WebGPUOptions\n     */\n    forceFallbackAdapter: boolean;\n}\n\n/**\n * System plugin to the renderer to manage the context.\n * @class\n * @memberof rendering\n */\nexport class GpuDeviceSystem implements System<GpuContextOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'device',\n    } as const;\n\n    /** The default options for the GpuDeviceSystem. */\n    public static defaultOptions: GpuContextOptions = {\n        /**\n         * {@link WebGPUOptions.powerPreference}\n         * @default default\n         */\n        powerPreference: undefined,\n        /**\n         * Force the use of the fallback adapter\n         * @default false\n         */\n        forceFallbackAdapter: false,\n    };\n\n    /** The GPU device */\n    public gpu: GPU;\n\n    private _renderer: WebGPURenderer;\n    private _initPromise: Promise<void>;\n\n    /**\n     * @param {WebGPURenderer} renderer - The renderer this System works for.\n     */\n    constructor(renderer: WebGPURenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public async init(options: GpuContextOptions): Promise<void>\n    {\n        if (this._initPromise) return this._initPromise;\n\n        this._initPromise = this._createDeviceAndAdaptor(options)\n            .then((gpu) =>\n            {\n                this.gpu = gpu;\n\n                this._renderer.runners.contextChange.emit(this.gpu);\n            });\n\n        return this._initPromise;\n    }\n\n    /**\n     * Handle the context change event\n     * @param gpu\n     */\n    protected contextChange(gpu: GPU): void\n    {\n        this._renderer.gpu = gpu;\n    }\n\n    /**\n     * Helper class to create a WebGL Context\n     * @param {object} options - An options object that gets passed in to the canvas element containing the\n     *    context attributes\n     * @see https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/getContext\n     * @returns {WebGLRenderingContext} the WebGL context\n     */\n    private async _createDeviceAndAdaptor(options: GpuContextOptions): Promise<GPU>\n    {\n        // TODO we only need one of these..\n        const adapter = await navigator.gpu.requestAdapter({\n            powerPreference: options.powerPreference,\n            forceFallbackAdapter: options.forceFallbackAdapter,\n        });\n\n        const requiredFeatures = [\n            'texture-compression-bc',\n            'texture-compression-astc',\n            'texture-compression-etc2',\n        ].filter((feature) => adapter.features.has(feature)) as GPUFeatureName[];\n\n        // TODO and one of these!\n        const device = await adapter.requestDevice({\n            requiredFeatures\n        });\n\n        return { adapter, device };\n    }\n\n    public destroy(): void\n    {\n        this.gpu = null;\n        this._renderer = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\n\nimport type { Rectangle } from '../../../maths/shapes/Rectangle';\nimport type { Buffer } from '../shared/buffer/Buffer';\nimport type { Topology } from '../shared/geometry/const';\nimport type { Geometry } from '../shared/geometry/Geometry';\nimport type { Shader } from '../shared/shader/Shader';\nimport type { UniformGroup } from '../shared/shader/UniformGroup';\nimport type { State } from '../shared/state/State';\nimport type { System } from '../shared/system/System';\nimport type { GPU } from './GpuDeviceSystem';\nimport type { GpuRenderTarget } from './renderTarget/GpuRenderTarget';\nimport type { GpuRenderTargetAdaptor } from './renderTarget/GpuRenderTargetAdaptor';\nimport type { BindGroup } from './shader/BindGroup';\nimport type { GpuProgram } from './shader/GpuProgram';\nimport type { WebGPURenderer } from './WebGPURenderer';\n\n/**\n * The system that handles encoding commands for the GPU.\n * @memberof rendering\n */\nexport class GpuEncoderSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [ExtensionType.WebGPUSystem],\n        name: 'encoder',\n        priority: 1\n    } as const;\n\n    public commandEncoder: GPUCommandEncoder;\n    public renderPassEncoder: GPURenderPassEncoder;\n    public commandFinished: Promise<void>;\n\n    private _resolveCommandFinished: (value: void) => void;\n\n    private _gpu: GPU;\n    private _boundBindGroup: Record<number, BindGroup> = Object.create(null);\n    private _boundVertexBuffer: Record<number, Buffer> = Object.create(null);\n    private _boundIndexBuffer: Buffer;\n    private _boundPipeline: GPURenderPipeline;\n\n    private readonly _renderer: WebGPURenderer;\n\n    constructor(renderer: WebGPURenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public renderStart(): void\n    {\n        this.commandFinished = new Promise((resolve) =>\n        {\n            this._resolveCommandFinished = resolve;\n        });\n\n        // generate a render pass description..\n        // create an encoder..\n        this.commandEncoder = this._renderer.gpu.device.createCommandEncoder();\n    }\n\n    public beginRenderPass(gpuRenderTarget: GpuRenderTarget)\n    {\n        this.endRenderPass();\n\n        this._clearCache();\n\n        this.renderPassEncoder = this.commandEncoder.beginRenderPass(gpuRenderTarget.descriptor);\n    }\n\n    public endRenderPass()\n    {\n        if (this.renderPassEncoder)\n        {\n            this.renderPassEncoder.end();\n        }\n\n        this.renderPassEncoder = null;\n    }\n\n    public setViewport(viewport: Rectangle): void\n    {\n        this.renderPassEncoder.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, 0, 1);\n    }\n\n    public setPipelineFromGeometryProgramAndState(\n        geometry: Geometry,\n        program: GpuProgram,\n        state: any,\n        topology?: Topology,\n    ): void\n    {\n        const pipeline = this._renderer.pipeline.getPipeline(geometry, program, state, topology);\n\n        this.setPipeline(pipeline);\n    }\n\n    public setPipeline(pipeline: GPURenderPipeline)\n    {\n        if (this._boundPipeline === pipeline) return;\n        this._boundPipeline = pipeline;\n\n        this.renderPassEncoder.setPipeline(pipeline);\n    }\n\n    private _setVertexBuffer(index: number, buffer: Buffer)\n    {\n        if (this._boundVertexBuffer[index] === buffer) return;\n\n        this._boundVertexBuffer[index] = buffer;\n\n        this.renderPassEncoder.setVertexBuffer(index, this._renderer.buffer.updateBuffer(buffer));\n    }\n\n    private _setIndexBuffer(buffer: Buffer)\n    {\n        if (this._boundIndexBuffer === buffer) return;\n\n        this._boundIndexBuffer = buffer;\n\n        const indexFormat = buffer.data.BYTES_PER_ELEMENT === 2 ? 'uint16' : 'uint32';\n\n        this.renderPassEncoder.setIndexBuffer(this._renderer.buffer.updateBuffer(buffer), indexFormat);\n    }\n\n    public resetBindGroup(index: number)\n    {\n        this._boundBindGroup[index] = null;\n    }\n\n    public setBindGroup(index: number, bindGroup: BindGroup, program: GpuProgram)\n    {\n        if (this._boundBindGroup[index] === bindGroup) return;\n        this._boundBindGroup[index] = bindGroup;\n\n        bindGroup._touch(this._renderer.textureGC.count);\n\n        // TODO getting the bind group works as it looks at th e assets and generates a key\n        // should this just be hidden behind a dirty flag?\n        const gpuBindGroup = this._renderer.bindGroup.getBindGroup(bindGroup, program, index);\n\n        // mark each item as having been used..\n        this.renderPassEncoder.setBindGroup(index, gpuBindGroup);\n    }\n\n    public setGeometry(geometry: Geometry)\n    {\n        for (const i in geometry.attributes)\n        {\n            const attribute = geometry.attributes[i];\n\n            this._setVertexBuffer(attribute.location, attribute.buffer);\n        }\n\n        if (geometry.indexBuffer)\n        {\n            this._setIndexBuffer(geometry.indexBuffer);\n        }\n    }\n\n    private _setShaderBindGroups(shader: Shader, skipSync?: boolean)\n    {\n        for (const i in shader.groups)\n        {\n            const bindGroup = shader.groups[i] as BindGroup;\n\n            // update any uniforms?\n            if (!skipSync)\n            {\n                this._syncBindGroup(bindGroup);\n            }\n\n            this.setBindGroup(i as unknown as number, bindGroup, shader.gpuProgram);\n        }\n    }\n\n    private _syncBindGroup(bindGroup: BindGroup)\n    {\n        for (const j in bindGroup.resources)\n        {\n            const resource = bindGroup.resources[j];\n\n            if ((resource as UniformGroup).isUniformGroup)\n            {\n                this._renderer.ubo.updateUniformGroup(resource as UniformGroup);\n            }\n        }\n    }\n\n    public draw(options: {\n        geometry: Geometry;\n        shader: Shader;\n        state?: State;\n        topology?: Topology;\n        size?: number;\n        start?: number;\n        instanceCount?: number;\n        skipSync?: boolean;\n    })\n    {\n        const { geometry, shader, state, topology, size, start, instanceCount, skipSync } = options;\n\n        this.setPipelineFromGeometryProgramAndState(geometry, shader.gpuProgram, state, topology);\n        this.setGeometry(geometry);\n        this._setShaderBindGroups(shader, skipSync);\n\n        if (geometry.indexBuffer)\n        {\n            this.renderPassEncoder.drawIndexed(\n                size || geometry.indexBuffer.data.length,\n                instanceCount || geometry.instanceCount,\n                start || 0\n            );\n        }\n        else\n        {\n            this.renderPassEncoder.draw(size || geometry.getSize(), instanceCount || geometry.instanceCount, start || 0);\n        }\n    }\n\n    public finishRenderPass()\n    {\n        if (this.renderPassEncoder)\n        {\n            this.renderPassEncoder.end();\n            this.renderPassEncoder = null;\n        }\n    }\n\n    public postrender()\n    {\n        this.finishRenderPass();\n\n        this._gpu.device.queue.submit([this.commandEncoder.finish()]);\n\n        this._resolveCommandFinished();\n\n        this.commandEncoder = null;\n    }\n\n    // restores a render pass if finishRenderPass was called\n    // not optimised as really used for debugging!\n    // used when we want to stop drawing and log a texture..\n    public restoreRenderPass()\n    {\n        const descriptor = (this._renderer.renderTarget.adaptor as GpuRenderTargetAdaptor).getDescriptor(\n            this._renderer.renderTarget.renderTarget,\n            false,\n            [0, 0, 0, 1],\n        );\n\n        this.renderPassEncoder = this.commandEncoder.beginRenderPass(descriptor);\n\n        const boundPipeline = this._boundPipeline;\n        const boundVertexBuffer = { ...this._boundVertexBuffer };\n        const boundIndexBuffer = this._boundIndexBuffer;\n        const boundBindGroup = { ...this._boundBindGroup };\n\n        this._clearCache();\n\n        const viewport = this._renderer.renderTarget.viewport;\n\n        this.renderPassEncoder.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, 0, 1);\n\n        // reinstate the cache...\n\n        this.setPipeline(boundPipeline);\n\n        for (const i in boundVertexBuffer)\n        {\n            this._setVertexBuffer(i as unknown as number, boundVertexBuffer[i]);\n        }\n\n        for (const i in boundBindGroup)\n        {\n            this.setBindGroup(i as unknown as number, boundBindGroup[i], null);\n        }\n\n        this._setIndexBuffer(boundIndexBuffer);\n    }\n\n    private _clearCache()\n    {\n        for (let i = 0; i < 16; i++)\n        {\n            this._boundBindGroup[i] = null;\n            this._boundVertexBuffer[i] = null;\n        }\n\n        this._boundIndexBuffer = null;\n        this._boundPipeline = null;\n    }\n\n    public destroy()\n    {\n        (this._renderer as null) = null;\n        this._gpu = null;\n        this._boundBindGroup = null;\n        this._boundVertexBuffer = null;\n        this._boundIndexBuffer = null;\n        this._boundPipeline = null;\n    }\n\n    protected contextChange(gpu: GPU): void\n    {\n        this._gpu = gpu;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { STENCIL_MODES } from '../shared/state/const';\n\nimport type { RenderTarget } from '../shared/renderTarget/RenderTarget';\nimport type { System } from '../shared/system/System';\nimport type { WebGPURenderer } from './WebGPURenderer';\n\n/**\n * This manages the stencil buffer. Used primarily for masking\n * @memberof rendering\n */\nexport class GpuStencilSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'stencil',\n    } as const;\n\n    private readonly _renderer: WebGPURenderer;\n\n    private _renderTargetStencilState: Record<number, {\n        stencilMode: STENCIL_MODES;\n        stencilReference: number;\n    }> = Object.create(null);\n\n    private _activeRenderTarget: RenderTarget;\n\n    constructor(renderer: WebGPURenderer)\n    {\n        this._renderer = renderer;\n\n        renderer.renderTarget.onRenderTargetChange.add(this);\n    }\n\n    protected onRenderTargetChange(renderTarget: RenderTarget)\n    {\n        let stencilState = this._renderTargetStencilState[renderTarget.uid];\n\n        if (!stencilState)\n        {\n            stencilState = this._renderTargetStencilState[renderTarget.uid] = {\n                stencilMode: STENCIL_MODES.DISABLED,\n                stencilReference: 0,\n            };\n        }\n\n        this._activeRenderTarget = renderTarget;\n\n        this.setStencilMode(stencilState.stencilMode, stencilState.stencilReference);\n    }\n\n    public setStencilMode(stencilMode: STENCIL_MODES, stencilReference: number)\n    {\n        const stencilState = this._renderTargetStencilState[this._activeRenderTarget.uid];\n\n        stencilState.stencilMode = stencilMode;\n        stencilState.stencilReference = stencilReference;\n\n        const renderer = this._renderer;\n\n        renderer.pipeline.setStencilMode(stencilMode);\n        renderer.encoder.renderPassEncoder.setStencilReference(stencilReference);\n    }\n\n    public destroy()\n    {\n        this._renderer.renderTarget.onRenderTargetChange.remove(this);\n\n        (this._renderer as null) = null;\n\n        this._activeRenderTarget = null;\n        this._renderTargetStencilState = null;\n    }\n}\n","import type { UboElement, UboLayout, UNIFORM_TYPES, UniformData } from '../../../shared/shader/types';\n\nexport const WGSL_ALIGN_SIZE_DATA: Record<UNIFORM_TYPES | string, {align: number, size: number}> = {\n    i32: { align: 4, size: 4 },\n    u32: { align: 4, size: 4 },\n    f32: { align: 4, size: 4 },\n    f16: { align: 2, size: 2 },\n    'vec2<i32>': { align: 8, size: 8 },\n    'vec2<u32>': { align: 8, size: 8 },\n    'vec2<f32>': { align: 8, size: 8 },\n    'vec2<f16>': { align: 4, size: 4 },\n    'vec3<i32>': { align: 16, size: 12 },\n    'vec3<u32>': { align: 16, size: 12 },\n    'vec3<f32>': { align: 16, size: 12 },\n    'vec3<f16>': { align: 8, size: 6 },\n    'vec4<i32>': { align: 16, size: 16 },\n    'vec4<u32>': { align: 16, size: 16 },\n    'vec4<f32>': { align: 16, size: 16 },\n    'vec4<f16>': { align: 8, size: 8 },\n    'mat2x2<f32>': { align: 8, size: 16 },\n    'mat2x2<f16>': { align: 4, size: 8 },\n    'mat3x2<f32>': { align: 8, size: 24 },\n    'mat3x2<f16>': { align: 4, size: 12 },\n    'mat4x2<f32>': { align: 8, size: 32 },\n    'mat4x2<f16>': { align: 4, size: 16 },\n    'mat2x3<f32>': { align: 16, size: 32 },\n    'mat2x3<f16>': { align: 8, size: 16 },\n    'mat3x3<f32>': { align: 16, size: 48 },\n    'mat3x3<f16>': { align: 8, size: 24 },\n    'mat4x3<f32>': { align: 16, size: 64 },\n    'mat4x3<f16>': { align: 8, size: 32 },\n    'mat2x4<f32>': { align: 16, size: 32 },\n    'mat2x4<f16>': { align: 8, size: 16 },\n    'mat3x4<f32>': { align: 16, size: 48 },\n    'mat3x4<f16>': { align: 8, size: 24 },\n    'mat4x4<f32>': { align: 16, size: 64 },\n    'mat4x4<f16>': { align: 8, size: 32 },\n};\n\nexport function createUboElementsWGSL(uniformData: UniformData[]): UboLayout\n{\n    const uboElements: UboElement[] = uniformData.map((data: UniformData) =>\n        ({\n            data,\n            offset: 0,\n            size: 0,\n        }));\n\n    let offset = 0;\n\n    for (let i = 0; i < uboElements.length; i++)\n    {\n        const uboElement = uboElements[i];\n\n        let size = WGSL_ALIGN_SIZE_DATA[uboElement.data.type].size;\n        const align = WGSL_ALIGN_SIZE_DATA[uboElement.data.type].align;\n\n        if (!WGSL_ALIGN_SIZE_DATA[uboElement.data.type])\n        {\n            throw new Error(`[Pixi.js] WebGPU UniformBuffer: Unknown type ${uboElement.data.type}`);\n        }\n\n        if (uboElement.data.size > 1)\n        {\n            size = Math.max(size, align) * uboElement.data.size;\n        }\n\n        offset = Math.ceil((offset) / align) * align;\n\n        // TODO deal with Arrays\n        uboElement.size = size;\n\n        uboElement.offset = offset;\n\n        offset += size;\n    }\n\n    // must align to 16 bits!\n    offset = Math.ceil(offset / 16) * 16;\n\n    return { uboElements, size: offset };\n}\n\n","import { WGSL_ALIGN_SIZE_DATA } from './createUboElementsWGSL';\n\nimport type { UboElement } from '../../../shared/shader/types';\n\n/**\n * This generates a function that will sync an array to the uniform buffer\n * following the wgsl layout\n * @param uboElement - the element to generate the array sync for\n * @param offsetToAdd - the offset to append at the start of the code\n * @returns - the generated code\n */\nexport function generateArraySyncWGSL(uboElement: UboElement, offsetToAdd: number): string\n{\n    // this is in byte..\n    const { size, align } = WGSL_ALIGN_SIZE_DATA[uboElement.data.type];\n\n    const remainder = (align - size) / 4;\n\n    return `\n         v = uv.${uboElement.data.name};\n         ${offsetToAdd !== 0 ? `offset += ${offsetToAdd};` : ''}\n\n         arrayOffset = offset;\n\n         t = 0;\n\n         for(var i=0; i < ${uboElement.data.size * (size / 4)}; i++)\n         {\n             for(var j = 0; j < ${size / 4}; j++)\n             {\n                 data[arrayOffset++] = v[t++];\n             }\n             ${remainder !== 0 ? `arrayOffset += ${remainder};` : ''}\n         }\n     `;\n}\n","/* eslint-disable quote-props */\nimport { createUboSyncFunction } from '../../../shared/shader/utils/createUboSyncFunction';\nimport { uboSyncFunctionsWGSL } from '../../../shared/shader/utils/uboSyncFunctions';\nimport { generateArraySyncWGSL } from './generateArraySyncWGSL';\n\nimport type { UboElement, UniformsSyncCallback } from '../../../shared/shader/types';\n\nexport function createUboSyncFunctionWGSL(\n    uboElements: UboElement[],\n): UniformsSyncCallback\n{\n    return createUboSyncFunction(\n        uboElements,\n        'uboWgsl',\n        generateArraySyncWGSL,\n        uboSyncFunctionsWGSL,\n    );\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { UboSystem } from '../shared/shader/UboSystem';\nimport { createUboElementsWGSL } from './shader/utils/createUboElementsWGSL';\nimport { createUboSyncFunctionWGSL } from './shader/utils/createUboSyncFunctionWGSL';\n\n/**\n * System plugin to the renderer to manage uniform buffers. With a WGSL twist!\n * @memberof rendering\n */\nexport class GpuUboSystem extends UboSystem\n{\n    /** @ignore */\n    public static extension = {\n        type: [ExtensionType.WebGPUSystem],\n        name: 'ubo',\n    } as const;\n\n    constructor()\n    {\n        super({\n            createUboElements: createUboElementsWGSL,\n            generateUboSync: createUboSyncFunctionWGSL,\n        });\n    }\n}\n","import type { Buffer } from '../../shared/buffer/Buffer';\n\nexport class UboBatch\n{\n    private _buffer: Buffer;\n    public data: Float32Array;\n    private readonly _minUniformOffsetAlignment: number = 256;\n\n    public byteIndex = 0;\n\n    constructor({ minUniformOffsetAlignment }: {minUniformOffsetAlignment: number})\n    {\n        this._minUniformOffsetAlignment = minUniformOffsetAlignment;\n        this.data = new Float32Array(65535);\n    }\n\n    public clear(): void\n    {\n        this.byteIndex = 0;\n    }\n\n    public addEmptyGroup(size: number): number\n    {\n        // update the buffer.. only float32 for now!\n        if (size > this._minUniformOffsetAlignment / 4)\n        {\n            throw new Error(`UniformBufferBatch: array is too large: ${size * 4}`);\n        }\n\n        const start = this.byteIndex;\n\n        let newSize = start + (size * 4);\n\n        newSize = Math.ceil(newSize / this._minUniformOffsetAlignment) * this._minUniformOffsetAlignment;\n\n        if (newSize > this.data.length * 4)\n        {\n            // TODO push a new buffer\n            throw new Error('UniformBufferBatch: ubo batch got too big');\n        }\n\n        this.byteIndex = newSize;\n\n        return start;\n    }\n\n    public addGroup(array: Float32Array): number\n    {\n        const offset = this.addEmptyGroup(array.length);\n\n        for (let i = 0; i < array.length; i++)\n        {\n            this.data[(offset / 4) + i] = array[i];\n        }\n\n        return offset;\n    }\n\n    public destroy()\n    {\n        this._buffer.destroy();\n        this._buffer = null;\n\n        this.data = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { Buffer } from '../shared/buffer/Buffer';\nimport { BufferResource } from '../shared/buffer/BufferResource';\nimport { BufferUsage } from '../shared/buffer/const';\nimport { UboBatch } from './buffer/UboBatch';\nimport { BindGroup } from './shader/BindGroup';\n\nimport type { UniformGroup } from '../shared/shader/UniformGroup';\nimport type { WebGPURenderer } from './WebGPURenderer';\n\nconst minUniformOffsetAlignment = 128;// 256 / 2;\n\n// TODO renderStart and renderFinish - perhaps just make them instructions to fit the architecture of the\n// rest of the system\nexport class GpuUniformBatchPipe\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUPipes,\n        ],\n        name: 'uniformBatch',\n    } as const;\n\n    private _renderer: WebGPURenderer;\n\n    private _bindGroupHash: Record<number, BindGroup> = Object.create(null);\n    private readonly _batchBuffer: UboBatch;\n\n    // number of buffers..\n    private _buffers: Buffer[] = [];\n\n    private _bindGroups: BindGroup[] = [];\n    private _bufferResources: BufferResource[] = [];\n\n    constructor(renderer: WebGPURenderer)\n    {\n        this._renderer = renderer;\n\n        this._batchBuffer = new UboBatch({ minUniformOffsetAlignment });\n\n        const totalBuffers = (256 / minUniformOffsetAlignment);\n\n        for (let i = 0; i < totalBuffers; i++)\n        {\n            let usage = BufferUsage.UNIFORM | BufferUsage.COPY_DST;\n\n            if (i === 0) usage |= BufferUsage.COPY_SRC;\n\n            this._buffers.push(new Buffer({\n                data: this._batchBuffer.data,\n                usage\n            }));\n        }\n    }\n\n    public renderEnd()\n    {\n        this._uploadBindGroups();\n        this._resetBindGroups();\n    }\n\n    private _resetBindGroups()\n    {\n        for (const i in this._bindGroupHash)\n        {\n            this._bindGroupHash[i] = null;\n        }\n\n        this._batchBuffer.clear();\n    }\n\n    // just works for single bind groups for now\n    public getUniformBindGroup(group: UniformGroup<any>, duplicate: boolean): BindGroup\n    {\n        if (!duplicate && this._bindGroupHash[group.uid])\n        {\n            return this._bindGroupHash[group.uid];\n        }\n\n        this._renderer.ubo.ensureUniformGroup(group);\n\n        const data = group.buffer.data as Float32Array;\n\n        const offset = this._batchBuffer.addEmptyGroup(data.length);\n\n        this._renderer.ubo.syncUniformGroup(group, this._batchBuffer.data, offset / 4);\n\n        this._bindGroupHash[group.uid] = this._getBindGroup(offset / minUniformOffsetAlignment);\n\n        return this._bindGroupHash[group.uid];\n    }\n\n    public getUboResource(group: UniformGroup<any>): BufferResource\n    {\n        this._renderer.ubo.updateUniformGroup(group);\n\n        const data = group.buffer.data as Float32Array;\n\n        const offset = this._batchBuffer.addGroup(data);\n\n        return this._getBufferResource(offset / minUniformOffsetAlignment);\n    }\n\n    public getArrayBindGroup(data: Float32Array): BindGroup\n    {\n        const offset = this._batchBuffer.addGroup(data);\n\n        return this._getBindGroup(offset / minUniformOffsetAlignment);\n    }\n\n    public getArrayBufferResource(data: Float32Array): BufferResource\n    {\n        const offset = this._batchBuffer.addGroup(data);\n\n        const index = offset / minUniformOffsetAlignment;\n\n        return this._getBufferResource(index);\n    }\n\n    private _getBufferResource(index: number): BufferResource\n    {\n        if (!this._bufferResources[index])\n        {\n            const buffer = this._buffers[index % 2];\n\n            this._bufferResources[index] = new BufferResource({\n                buffer,\n                offset: ((index / 2) | 0) * 256,\n                size: minUniformOffsetAlignment\n            });\n        }\n\n        return this._bufferResources[index];\n    }\n\n    private _getBindGroup(index: number): BindGroup\n    {\n        if (!this._bindGroups[index])\n        {\n            // even!\n            const bindGroup = new BindGroup({\n                0: this._getBufferResource(index),\n            });\n\n            this._bindGroups[index] = bindGroup;\n        }\n\n        return this._bindGroups[index];\n    }\n\n    private _uploadBindGroups()\n    {\n        const bufferSystem = this._renderer.buffer;\n\n        const firstBuffer = this._buffers[0];\n\n        firstBuffer.update(this._batchBuffer.byteIndex);\n\n        bufferSystem.updateBuffer(firstBuffer);\n\n        const commandEncoder = this._renderer.gpu.device.createCommandEncoder();\n\n        for (let i = 1; i < this._buffers.length; i++)\n        {\n            const buffer = this._buffers[i];\n\n            commandEncoder.copyBufferToBuffer(\n                bufferSystem.getGPUBuffer(firstBuffer),\n                minUniformOffsetAlignment,\n                bufferSystem.getGPUBuffer(buffer),\n                0,\n                this._batchBuffer.byteIndex\n            );\n        }\n\n        // TODO make a system that will que up all commands in to one array?\n        this._renderer.gpu.device.queue.submit([commandEncoder.finish()]);\n    }\n\n    public destroy()\n    {\n        for (let i = 0; i < this._bindGroups.length; i++)\n        {\n            this._bindGroups[i].destroy();\n        }\n\n        this._bindGroups = null;\n        this._bindGroupHash = null;\n\n        for (let i = 0; i < this._buffers.length; i++)\n        {\n            this._buffers[i].destroy();\n        }\n        this._buffers = null;\n\n        for (let i = 0; i < this._bufferResources.length; i++)\n        {\n            this._bufferResources[i].destroy();\n        }\n\n        this._bufferResources = null;\n\n        this._batchBuffer.destroy();\n        this._bindGroupHash = null;\n\n        this._renderer = null;\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { ensureAttributes } from '../../gl/shader/program/ensureAttributes';\nimport { STENCIL_MODES } from '../../shared/state/const';\nimport { createIdFromString } from '../../shared/utils/createIdFromString';\nimport { GpuStencilModesToPixi } from '../state/GpuStencilModesToPixi';\n\nimport type { Topology } from '../../shared/geometry/const';\nimport type { Geometry } from '../../shared/geometry/Geometry';\nimport type { State } from '../../shared/state/State';\nimport type { System } from '../../shared/system/System';\nimport type { GPU } from '../GpuDeviceSystem';\nimport type { GpuRenderTarget } from '../renderTarget/GpuRenderTarget';\nimport type { GpuProgram } from '../shader/GpuProgram';\nimport type { StencilState } from '../state/GpuStencilModesToPixi';\nimport type { WebGPURenderer } from '../WebGPURenderer';\n\nconst topologyStringToId = {\n    'point-list': 0,\n    'line-list': 1,\n    'line-strip': 2,\n    'triangle-list': 3,\n    'triangle-strip': 4,\n};\n\n// geometryLayouts = 256; // 8 bits // 256 states // value 0-255;\n// shaderKeys = 256; // 8 bits // 256 states // value 0-255;\n// state = 64; // 6 bits // 64 states // value 0-63;\n// blendMode = 32; // 5 bits // 32 states // value 0-31;\n// topology = 8; // 3 bits // 8 states // value 0-7;\nfunction getGraphicsStateKey(\n    geometryLayout: number,\n    shaderKey: number,\n    state: number,\n    blendMode: number,\n    topology: number,\n): number\n{\n    return (geometryLayout << 24) // Allocate the 8 bits for geometryLayouts at the top\n         | (shaderKey << 16) // Next 8 bits for shaderKeys\n         | (state << 10) // 6 bits for state\n         | (blendMode << 5) // 5 bits for blendMode\n         | topology; // And 3 bits for topology at the least significant position\n}\n\n// colorMask = 16;// 4 bits // 16 states // value 0-15;\n// stencilState = 8; // 3 bits // 8 states // value 0-7;\n// renderTarget = 1; // 2 bit // 3 states // value 0-3; // none, stencil, depth, depth-stencil\n// multiSampleCount = 1; // 1 bit // 2 states // value 0-1;\nfunction getGlobalStateKey(\n    stencilStateId: number,\n    multiSampleCount: number,\n    colorMask: number,\n    renderTarget: number,\n): number\n{\n    return (colorMask << 6) // Allocate the 4 bits for colorMask at the top\n         | (stencilStateId << 3) // Next 3 bits for stencilStateId\n         | (renderTarget << 1) // 2 bits for renderTarget\n         | multiSampleCount; // And 1 bit for multiSampleCount at the least significant position\n}\n\ntype PipeHash = Record<number, GPURenderPipeline>;\n\n/**\n * A system that creates and manages the GPU pipelines.\n *\n * Caching Mechanism: At its core, the system employs a two-tiered caching strategy to minimize\n * the redundant creation of GPU pipelines (or \"pipes\"). This strategy is based on generating unique\n * keys that represent the state of the graphics settings and the specific requirements of the\n * item being rendered. By caching these pipelines, subsequent draw calls with identical configurations\n * can reuse existing pipelines instead of generating new ones.\n *\n * State Management: The system differentiates between \"global\" state properties (like color masks\n * and stencil masks, which do not change frequently) and properties that may vary between draw calls\n * (such as geometry, shaders, and blend modes). Unique keys are generated for both these categories\n * using getStateKey for global state and getGraphicsStateKey for draw-specific settings. These keys are\n * then then used to caching the pipe. The next time we need a pipe we can check\n * the cache by first looking at the state cache and then the pipe cache.\n * @memberof rendering\n */\nexport class PipelineSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [ExtensionType.WebGPUSystem],\n        name: 'pipeline',\n    } as const;\n    private readonly _renderer: WebGPURenderer;\n\n    protected CONTEXT_UID: number;\n\n    private _moduleCache: Record<string, GPUShaderModule> = Object.create(null);\n    private _bufferLayoutsCache: Record<number, GPUVertexBufferLayout[]> = Object.create(null);\n\n    private _pipeCache: PipeHash = Object.create(null);\n    private readonly _pipeStateCaches: Record<number, PipeHash> = Object.create(null);\n\n    private _gpu: GPU;\n    private _stencilState: StencilState;\n\n    private _stencilMode: STENCIL_MODES;\n    private _colorMask = 0b1111;\n    private _multisampleCount = 1;\n    private _depthStencilAttachment: 0 | 1;\n\n    constructor(renderer: WebGPURenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    protected contextChange(gpu: GPU): void\n    {\n        this._gpu = gpu;\n        this.setStencilMode(STENCIL_MODES.DISABLED);\n\n        this._updatePipeHash();\n    }\n\n    public setMultisampleCount(multisampleCount: number): void\n    {\n        if (this._multisampleCount === multisampleCount) return;\n\n        this._multisampleCount = multisampleCount;\n\n        this._updatePipeHash();\n    }\n\n    public setRenderTarget(renderTarget: GpuRenderTarget)\n    {\n        this._multisampleCount = renderTarget.msaaSamples;\n        this._depthStencilAttachment = renderTarget.descriptor.depthStencilAttachment ? 1 : 0;\n\n        this._updatePipeHash();\n    }\n\n    public setColorMask(colorMask: number): void\n    {\n        if (this._colorMask === colorMask) return;\n\n        this._colorMask = colorMask;\n\n        this._updatePipeHash();\n    }\n\n    public setStencilMode(stencilMode: STENCIL_MODES): void\n    {\n        if (this._stencilMode === stencilMode) return;\n\n        this._stencilMode = stencilMode;\n        this._stencilState = GpuStencilModesToPixi[stencilMode];\n\n        this._updatePipeHash();\n    }\n\n    public setPipeline(geometry: Geometry, program: GpuProgram, state: State, passEncoder: GPURenderPassEncoder): void\n    {\n        const pipeline = this.getPipeline(geometry, program, state);\n\n        passEncoder.setPipeline(pipeline);\n    }\n\n    public getPipeline(\n        geometry: Geometry,\n        program: GpuProgram,\n        state: State,\n        topology?: Topology,\n    ): GPURenderPipeline\n    {\n        if (!geometry._layoutKey)\n        {\n            ensureAttributes(geometry, program.attributeData);\n\n            // prepare the geometry for the pipeline\n            this._generateBufferKey(geometry);\n        }\n\n        topology = topology || geometry.topology;\n\n        // now we have set the Ids - the key is different...\n        // eslint-disable-next-line max-len\n        const key = getGraphicsStateKey(\n            geometry._layoutKey,\n            program._layoutKey,\n            state.data,\n            state._blendModeId,\n            topologyStringToId[topology],\n        );\n\n        if (this._pipeCache[key]) return this._pipeCache[key];\n\n        this._pipeCache[key] = this._createPipeline(geometry, program, state, topology);\n\n        return this._pipeCache[key];\n    }\n\n    private _createPipeline(geometry: Geometry, program: GpuProgram, state: State, topology: Topology): GPURenderPipeline\n    {\n        const device = this._gpu.device;\n\n        const buffers = this._createVertexBufferLayouts(geometry);\n\n        const blendModes = this._renderer.state.getColorTargets(state);\n\n        blendModes[0].writeMask = this._stencilMode === STENCIL_MODES.RENDERING_MASK_ADD ? 0 : this._colorMask;\n\n        const layout = this._renderer.shader.getProgramData(program).pipeline;\n\n        const descriptor: GPURenderPipelineDescriptor = {\n            // TODO later check if its helpful to create..\n            // layout,\n            vertex: {\n                module: this._getModule(program.vertex.source),\n                entryPoint: program.vertex.entryPoint,\n                // geometry..\n                buffers,\n            },\n            fragment: {\n                module: this._getModule(program.fragment.source),\n                entryPoint: program.fragment.entryPoint,\n                targets: blendModes,\n            },\n            primitive: {\n                topology,\n                cullMode: state.cullMode,\n            },\n            layout,\n            multisample: {\n                count: this._multisampleCount,\n            },\n            // depthStencil,\n            label: `PIXI Pipeline`,\n        };\n\n        // only apply if the texture has stencil or depth\n        if (this._depthStencilAttachment)\n        {\n            // mask states..\n            descriptor.depthStencil = {\n                ...this._stencilState,\n                format: 'depth24plus-stencil8',\n                depthWriteEnabled: state.depthTest,\n                depthCompare: state.depthTest ? 'less' : 'always',\n            };\n        }\n\n        const pipeline = device.createRenderPipeline(descriptor);\n\n        return pipeline;\n    }\n\n    private _getModule(code: string): GPUShaderModule\n    {\n        return this._moduleCache[code] || this._createModule(code);\n    }\n\n    private _createModule(code: string): GPUShaderModule\n    {\n        const device = this._gpu.device;\n\n        this._moduleCache[code] = device.createShaderModule({\n            code,\n        });\n\n        return this._moduleCache[code];\n    }\n\n    private _generateBufferKey(geometry: Geometry): number\n    {\n        const keyGen = [];\n        let index = 0;\n        // generate a key..\n\n        const attributeKeys = Object.keys(geometry.attributes).sort();\n\n        for (let i = 0; i < attributeKeys.length; i++)\n        {\n            const attribute = geometry.attributes[attributeKeys[i]];\n\n            keyGen[index++] = attribute.location;\n            keyGen[index++] = attribute.offset;\n            keyGen[index++] = attribute.format;\n            keyGen[index++] = attribute.stride;\n        }\n\n        const stringKey = keyGen.join('');\n\n        geometry._layoutKey = createIdFromString(stringKey, 'geometry');\n\n        return geometry._layoutKey;\n    }\n\n    private _createVertexBufferLayouts(geometry: Geometry): GPUVertexBufferLayout[]\n    {\n        if (this._bufferLayoutsCache[geometry._layoutKey])\n        {\n            return this._bufferLayoutsCache[geometry._layoutKey];\n        }\n\n        const vertexBuffersLayout: GPUVertexBufferLayout[] = [];\n\n        geometry.buffers.forEach((buffer) =>\n        {\n            const bufferEntry: GPUVertexBufferLayout = {\n                arrayStride: 0,\n                stepMode: 'vertex',\n                attributes: [],\n            };\n\n            const bufferEntryAttributes = bufferEntry.attributes as GPUVertexAttribute[];\n\n            for (const i in geometry.attributes)\n            {\n                const attribute = geometry.attributes[i];\n\n                if (attribute.buffer === buffer)\n                {\n                    bufferEntry.arrayStride = attribute.stride;\n                    bufferEntry.stepMode = attribute.instance ? 'instance' : 'vertex';\n\n                    bufferEntryAttributes.push({\n                        shaderLocation: attribute.location,\n                        offset: attribute.offset,\n                        format: attribute.format,\n                    });\n                }\n            }\n\n            if (bufferEntryAttributes.length)\n            {\n                vertexBuffersLayout.push(bufferEntry);\n            }\n        });\n\n        this._bufferLayoutsCache[geometry._layoutKey] = vertexBuffersLayout;\n\n        return vertexBuffersLayout;\n    }\n\n    private _updatePipeHash(): void\n    {\n        const key = getGlobalStateKey(\n            this._stencilMode,\n            this._multisampleCount,\n            this._colorMask,\n            this._depthStencilAttachment\n        );\n\n        if (!this._pipeStateCaches[key])\n        {\n            this._pipeStateCaches[key] = Object.create(null);\n        }\n\n        this._pipeCache = this._pipeStateCaches[key];\n    }\n\n    public destroy(): void\n    {\n        (this._renderer as null) = null;\n        this._bufferLayoutsCache = null;\n    }\n}\n","import type { TextureSource } from '../../shared/texture/sources/TextureSource';\n\n/**\n * A class which holds the canvas contexts and textures for a render target.\n * @memberof rendering\n * @ignore\n */\nexport class GpuRenderTarget\n{\n    public contexts: GPUCanvasContext[] = [];\n    public msaaTextures: TextureSource[] = [];\n    public msaa: boolean;\n    public msaaSamples = 1;\n    public width: number;\n    public height: number;\n    public descriptor: GPURenderPassDescriptor;\n}\n","import { CLEAR } from '../../gl/const';\nimport { CanvasSource } from '../../shared/texture/sources/CanvasSource';\nimport { TextureSource } from '../../shared/texture/sources/TextureSource';\nimport { GpuRenderTarget } from './GpuRenderTarget';\n\nimport type { RgbaArray } from '../../../../color/Color';\nimport type { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport type { CLEAR_OR_BOOL } from '../../gl/const';\nimport type { RenderTarget } from '../../shared/renderTarget/RenderTarget';\nimport type { RenderTargetAdaptor, RenderTargetSystem } from '../../shared/renderTarget/RenderTargetSystem';\nimport type { Texture } from '../../shared/texture/Texture';\nimport type { WebGPURenderer } from '../WebGPURenderer';\n\n/**\n * The WebGPU adaptor for the render target system. Allows the Render Target System to\n * be used with the WebGPU renderer\n * @memberof rendering\n * @ignore\n */\nexport class GpuRenderTargetAdaptor implements RenderTargetAdaptor<GpuRenderTarget>\n{\n    private _renderTargetSystem: RenderTargetSystem<GpuRenderTarget>;\n    private _renderer: WebGPURenderer<HTMLCanvasElement>;\n\n    public init(renderer: WebGPURenderer, renderTargetSystem: RenderTargetSystem<GpuRenderTarget>): void\n    {\n        this._renderer = renderer;\n        this._renderTargetSystem = renderTargetSystem;\n    }\n\n    public copyToTexture(\n        sourceRenderSurfaceTexture: RenderTarget,\n        destinationTexture: Texture,\n        originSrc: { x: number; y: number; },\n        size: { width: number; height: number; },\n        originDest: { x: number; y: number; },\n    )\n    {\n        const renderer = this._renderer;\n\n        const baseGpuTexture = this._getGpuColorTexture(\n            sourceRenderSurfaceTexture\n        );\n\n        const backGpuTexture = renderer.texture.getGpuSource(\n            destinationTexture.source\n        );\n\n        renderer.encoder.commandEncoder.copyTextureToTexture(\n            {\n                texture: baseGpuTexture,\n                origin: originSrc,\n            },\n            {\n                texture: backGpuTexture,\n                origin: originDest,\n            },\n            size\n        );\n\n        return destinationTexture;\n    }\n\n    public startRenderPass(\n        renderTarget: RenderTarget,\n        clear: CLEAR_OR_BOOL = true,\n        clearColor?: RgbaArray,\n        viewport?: Rectangle\n    )\n    {\n        const renderTargetSystem = this._renderTargetSystem;\n\n        const gpuRenderTarget = renderTargetSystem.getGpuRenderTarget(renderTarget);\n\n        const descriptor = this.getDescriptor(renderTarget, clear, clearColor);\n\n        gpuRenderTarget.descriptor = descriptor;\n\n        // TODO we should not finish a render pass each time we bind\n        // for example filters - we would want to push / pop render targets\n        this._renderer.pipeline.setRenderTarget(gpuRenderTarget);\n        this._renderer.encoder.beginRenderPass(gpuRenderTarget);\n        this._renderer.encoder.setViewport(viewport);\n    }\n\n    public finishRenderPass()\n    {\n        this._renderer.encoder.endRenderPass();\n    }\n\n    /**\n     * returns the gpu texture for the first color texture in the render target\n     * mainly used by the filter manager to get copy the texture for blending\n     * @param renderTarget\n     * @returns a gpu texture\n     */\n    private _getGpuColorTexture(renderTarget: RenderTarget): GPUTexture\n    {\n        const gpuRenderTarget = this._renderTargetSystem.getGpuRenderTarget(renderTarget);\n\n        if (gpuRenderTarget.contexts[0])\n        {\n            return gpuRenderTarget.contexts[0].getCurrentTexture();\n        }\n\n        return this._renderer.texture.getGpuSource(\n            renderTarget.colorTextures[0].source\n        );\n    }\n\n    public getDescriptor(\n        renderTarget: RenderTarget,\n        clear: CLEAR_OR_BOOL,\n        clearValue: RgbaArray\n    ): GPURenderPassDescriptor\n    {\n        if (typeof clear === 'boolean')\n        {\n            clear = clear ? CLEAR.ALL : CLEAR.NONE;\n        }\n\n        const renderTargetSystem = this._renderTargetSystem;\n\n        const gpuRenderTarget = renderTargetSystem.getGpuRenderTarget(renderTarget);\n\n        const colorAttachments = renderTarget.colorTextures.map(\n            (texture, i) =>\n            {\n                const context = gpuRenderTarget.contexts[i];\n\n                let view: GPUTextureView;\n                let resolveTarget: GPUTextureView;\n\n                if (context)\n                {\n                    const currentTexture = context.getCurrentTexture();\n\n                    const canvasTextureView = currentTexture.createView();\n\n                    view = canvasTextureView;\n                }\n                else\n                {\n                    view = this._renderer.texture.getGpuSource(texture).createView({\n                        mipLevelCount: 1,\n                    });\n                }\n\n                if (gpuRenderTarget.msaaTextures[i])\n                {\n                    resolveTarget = view;\n                    view = this._renderer.texture.getTextureView(\n                        gpuRenderTarget.msaaTextures[i]\n                    );\n                }\n\n                const loadOp = ((clear as CLEAR) & CLEAR.COLOR ? 'clear' : 'load') as GPULoadOp;\n\n                clearValue ??= renderTargetSystem.defaultClearColor;\n\n                return {\n                    view,\n                    resolveTarget,\n                    clearValue,\n                    storeOp: 'store',\n                    loadOp\n                };\n            }\n        ) as GPURenderPassColorAttachment[];\n\n        let depthStencilAttachment: GPURenderPassDepthStencilAttachment;\n\n        // if we have a depth or stencil buffer, we need to ensure we have a texture for it\n        // this is WebGPU specific - as WebGL does not require textures to run a depth / stencil buffer\n        if ((renderTarget.stencil || renderTarget.depth) && !renderTarget.depthStencilTexture)\n        {\n            renderTarget.ensureDepthStencilTexture();\n            renderTarget.depthStencilTexture.source.sampleCount = gpuRenderTarget.msaa ? 4 : 1;\n        }\n\n        if (renderTarget.depthStencilTexture)\n        {\n            const stencilLoadOp = (clear & CLEAR.STENCIL ? 'clear' : 'load') as GPULoadOp;\n            const depthLoadOp = (clear & CLEAR.DEPTH ? 'clear' : 'load') as GPULoadOp;\n\n            depthStencilAttachment = {\n                view: this._renderer.texture\n                    .getGpuSource(renderTarget.depthStencilTexture.source)\n                    .createView(),\n                stencilStoreOp: 'store',\n                stencilLoadOp,\n                depthClearValue: 1.0,\n                depthLoadOp,\n                depthStoreOp: 'store',\n            };\n        }\n\n        const descriptor: GPURenderPassDescriptor = {\n            colorAttachments,\n            depthStencilAttachment,\n        };\n\n        return descriptor;\n    }\n\n    public clear(renderTarget: RenderTarget, clear: CLEAR_OR_BOOL = true, clearColor?: RgbaArray, viewport?: Rectangle)\n    {\n        if (!clear) return;\n\n        const { gpu, encoder } = this._renderer;\n\n        const device = gpu.device;\n\n        const standAlone = encoder.commandEncoder === null;\n\n        if (standAlone)\n        {\n            const commandEncoder = device.createCommandEncoder();\n            const renderPassDescriptor = this.getDescriptor(renderTarget, clear, clearColor);\n\n            const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n\n            passEncoder.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, 0, 1);\n\n            passEncoder.end();\n\n            const gpuCommands = commandEncoder.finish();\n\n            device.queue.submit([gpuCommands]);\n        }\n        else\n        {\n            this.startRenderPass(renderTarget, clear, clearColor, viewport);\n        }\n    }\n\n    public initGpuRenderTarget(renderTarget: RenderTarget): GpuRenderTarget\n    {\n        // always false for WebGPU\n        renderTarget.isRoot = true;\n\n        const gpuRenderTarget = new GpuRenderTarget();\n\n        // create a context...\n        // is a canvas...\n        renderTarget.colorTextures.forEach((colorTexture, i) =>\n        {\n            if (CanvasSource.test(colorTexture.resource))\n            {\n                const context = colorTexture.resource.getContext(\n                    'webgpu'\n                ) as unknown as GPUCanvasContext;\n\n                const alphaMode = (colorTexture as CanvasSource).transparent ? 'premultiplied' : 'opaque';\n\n                try\n                {\n                    context.configure({\n                        device: this._renderer.gpu.device,\n                        // eslint-disable-next-line max-len\n                        usage: GPUTextureUsage.TEXTURE_BINDING\n                            | GPUTextureUsage.COPY_DST\n                            | GPUTextureUsage.RENDER_ATTACHMENT\n                            | GPUTextureUsage.COPY_SRC,\n                        format: 'bgra8unorm',\n                        alphaMode,\n                    });\n                }\n                catch (e)\n                {\n                    console.error(e);\n                }\n\n                gpuRenderTarget.contexts[i] = context;\n            }\n\n            gpuRenderTarget.msaa = colorTexture.source.antialias;\n\n            if (colorTexture.source.antialias)\n            {\n                const msaaTexture = new TextureSource({\n                    width: 0,\n                    height: 0,\n                    sampleCount: 4,\n                });\n\n                gpuRenderTarget.msaaTextures[i] = msaaTexture;\n            }\n        });\n\n        if (gpuRenderTarget.msaa)\n        {\n            gpuRenderTarget.msaaSamples = 4;\n\n            if (renderTarget.depthStencilTexture)\n            {\n                renderTarget.depthStencilTexture.source.sampleCount = 4;\n            }\n        }\n\n        return gpuRenderTarget;\n    }\n\n    public ensureDepthStencilTexture(renderTarget: RenderTarget)\n    {\n        // TODO This function will be more useful once we cache the descriptors\n        const gpuRenderTarget = this._renderTargetSystem.getGpuRenderTarget(renderTarget);\n\n        if (renderTarget.depthStencilTexture && gpuRenderTarget.msaa)\n        {\n            renderTarget.depthStencilTexture.source.sampleCount = 4;\n        }\n    }\n\n    public resizeGpuRenderTarget(renderTarget: RenderTarget)\n    {\n        const gpuRenderTarget = this._renderTargetSystem.getGpuRenderTarget(renderTarget);\n\n        gpuRenderTarget.width = renderTarget.width;\n        gpuRenderTarget.height = renderTarget.height;\n\n        if (gpuRenderTarget.msaa)\n        {\n            renderTarget.colorTextures.forEach((colorTexture, i) =>\n            {\n                const msaaTexture = gpuRenderTarget.msaaTextures[i];\n\n                msaaTexture?.resize(\n                    colorTexture.source.width,\n                    colorTexture.source.height,\n                    colorTexture.source._resolution\n                );\n            });\n        }\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { RenderTargetSystem } from '../../shared/renderTarget/RenderTargetSystem';\nimport { GpuRenderTargetAdaptor } from './GpuRenderTargetAdaptor';\n\nimport type { WebGPURenderer } from '../WebGPURenderer';\nimport type { GpuRenderTarget } from './GpuRenderTarget';\n\n/**\n * The WebGL adaptor for the render target system. Allows the Render Target System to be used with the WebGl renderer\n * @memberof rendering\n */\nexport class GpuRenderTargetSystem extends RenderTargetSystem<GpuRenderTarget>\n{\n    /** @ignore */\n    public static extension = {\n        type: [ExtensionType.WebGPUSystem],\n        name: 'renderTarget',\n    } as const;\n\n    public adaptor = new GpuRenderTargetAdaptor();\n\n    constructor(renderer: WebGPURenderer)\n    {\n        super(renderer);\n\n        this.adaptor.init(renderer, this);\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\n\nimport type { System } from '../../shared/system/System';\nimport type { GPU } from '../GpuDeviceSystem';\nimport type { GpuProgram } from './GpuProgram';\n\nexport interface GPUProgramData\n{\n    bindGroups: GPUBindGroupLayout[]\n    pipeline: GPUPipelineLayout\n}\n\n/**\n * A system that manages the rendering of GpuPrograms.\n * @memberof rendering\n */\nexport class GpuShaderSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'shader',\n    } as const;\n\n    private _gpu: GPU;\n\n    private readonly _gpuProgramData: Record<number, GPUProgramData> = Object.create(null);\n\n    protected contextChange(gpu: GPU): void\n    {\n        this._gpu = gpu;\n    }\n\n    public getProgramData(program: GpuProgram)\n    {\n        return this._gpuProgramData[program._layoutKey] || this._createGPUProgramData(program);\n    }\n\n    private _createGPUProgramData(program: GpuProgram)\n    {\n        const device = this._gpu.device;\n\n        const bindGroups = program.gpuLayout.map((group) => device.createBindGroupLayout({ entries: group }));\n\n        const pipelineLayoutDesc = { bindGroupLayouts: bindGroups };\n\n        this._gpuProgramData[program._layoutKey] = {\n            bindGroups,\n            pipeline: device.createPipelineLayout(pipelineLayoutDesc),\n        };\n\n        // generally we avoid having to make this automatically\n        // keeping this for a reminder, if any issues popup\n        // program._gpuLayout = {\n        //     bindGroups: null,\n        //     pipeline: 'auto',\n        // };\n\n        return this._gpuProgramData[program._layoutKey];\n    }\n\n    public destroy(): void\n    {\n        // TODO destroy the _gpuProgramData\n        this._gpu = null;\n        (this._gpuProgramData as null) = null;\n    }\n}\n","import type { BLEND_MODES } from '../../shared/state/const';\n\nexport const GpuBlendModesToPixi: Partial<Record<BLEND_MODES, GPUBlendState>> = {};\n\nGpuBlendModesToPixi.normal = {\n    alpha: {\n        srcFactor: 'one',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n    },\n    color: {\n        srcFactor: 'one',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n    },\n};\n\nGpuBlendModesToPixi.add = {\n    alpha: {\n        srcFactor: 'src-alpha',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n    },\n    color: {\n        srcFactor: 'one',\n        dstFactor: 'one',\n        operation: 'add',\n    },\n};\n\nGpuBlendModesToPixi.multiply = {\n    alpha: {\n        srcFactor: 'one',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n    },\n    color: {\n        srcFactor: 'dst',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n    },\n};\n\nGpuBlendModesToPixi.screen = {\n    alpha: {\n        srcFactor: 'one',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n    },\n    color: {\n        srcFactor: 'one',\n        dstFactor: 'one-minus-src',\n        operation: 'add',\n    },\n};\n\nGpuBlendModesToPixi.overlay = {\n    alpha: {\n        srcFactor: 'one',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n    },\n    color: {\n        srcFactor: 'one',\n        dstFactor: 'one-minus-src',\n        operation: 'add',\n    },\n};\n\nGpuBlendModesToPixi.none = {\n    alpha: {\n        srcFactor: 'one',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n    },\n    color: {\n        srcFactor: 'zero',\n        dstFactor: 'zero',\n        operation: 'add',\n    },\n};\n\n// not-premultiplied blend modes\nGpuBlendModesToPixi['normal-npm'] = {\n    alpha: {\n        srcFactor: 'one',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n    },\n    color: {\n        srcFactor: 'src-alpha',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n    },\n};\n\nGpuBlendModesToPixi['add-npm'] = {\n    alpha: {\n        srcFactor: 'one',\n        dstFactor: 'one',\n        operation: 'add',\n    },\n    color: {\n        srcFactor: 'src-alpha',\n        dstFactor: 'one',\n        operation: 'add',\n    },\n};\n\nGpuBlendModesToPixi['screen-npm'] = {\n    alpha: {\n        srcFactor: 'one',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n    },\n    color: {\n        srcFactor: 'src-alpha',\n        dstFactor: 'one-minus-src',\n        operation: 'add',\n    },\n};\n\nGpuBlendModesToPixi.erase = {\n    alpha: {\n        srcFactor: 'zero',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n    },\n    color: {\n        srcFactor: 'zero',\n        dstFactor: 'one-minus-src',\n        operation: 'add',\n    },\n};\n\n// composite operations\n// GpuBlendModesToPixi[BLEND_MODES.SRC_IN] = {\n//     alpha: {\n//         srcFactor: 'src-alpha',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n//     color: {\n//         srcFactor: 'dst-alpha',\n//         dstFactor: 'zero',\n//         operation: 'add',\n//     },\n// };\n\n// GpuBlendModesToPixi[BLEND_MODES.SRC_OUT] = {\n//     alpha: {\n//         srcFactor: 'src-alpha',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n//     color: {\n//         srcFactor: 'one-minus-dst-alpha',\n//         dstFactor: 'zero',\n//         operation: 'add',\n//     },\n// };\n\n// GpuBlendModesToPixi[BLEND_MODES.SRC_ATOP] = {\n//     alpha: {\n//         srcFactor: 'src-alpha',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n//     color: {\n//         srcFactor: 'dst-alpha',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n// };\n\n// GpuBlendModesToPixi[BLEND_MODES.DST_OVER] = {\n//     alpha: {\n//         srcFactor: 'src-alpha',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n//     color: {\n//         srcFactor: 'one-minus-dst-alpha',\n//         dstFactor: 'one',\n//         operation: 'add',\n//     },\n// };\n\n// GpuBlendModesToPixi[BLEND_MODES.DST_IN] = {\n//     alpha: {\n//         srcFactor: 'src-alpha',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n//     color: {\n//         srcFactor: 'zero',\n//         dstFactor: 'src-alpha',\n//         operation: 'add',\n//     },\n// };\n\n// GpuBlendModesToPixi[BLEND_MODES.DST_OUT] = {\n//     alpha: {\n//         srcFactor: 'src-alpha',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n//     color: {\n//         srcFactor: 'zero',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n// };\n\n// GpuBlendModesToPixi[BLEND_MODES.DST_ATOP] = {\n//     alpha: {\n//         srcFactor: 'src-alpha',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n//     color: {\n//         srcFactor: 'one-minus-dst-alpha',\n//         dstFactor: 'src-alpha',\n//         operation: 'add',\n//     },\n// };\n\n// GpuBlendModesToPixi[BLEND_MODES.XOR] = {\n//     alpha: {\n//         srcFactor: 'src-alpha',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n//     color: {\n//         srcFactor: 'one-minus-dst-alpha',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n// };\n\n// TODO - fix me\n// GLBlendModesToPixi[BLEND_MODES.SUBTRACT] = {\n//     alpha: {\n//         srcFactor: 'one',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n//     color: {\n//         srcFactor: 'one-minus-dst-alpha',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n// };\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { State } from '../../shared/state/State';\nimport { GpuBlendModesToPixi } from './GpuBlendModesToPixi';\n\nimport type { BLEND_MODES } from '../../shared/state/const';\nimport type { System } from '../../shared/system/System';\nimport type { GPU } from '../GpuDeviceSystem';\n\n/**\n * System plugin to the renderer to manage WebGL state machines.\n * @memberof rendering\n */\nexport class GpuStateSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'state',\n    } as const;\n    /**\n     * State ID\n     * @readonly\n     */\n    public stateId: number;\n\n    /**\n     * Polygon offset\n     * @readonly\n     */\n    public polygonOffset: number;\n\n    /**\n     * Blend mode\n     * @default 'none'\n     * @readonly\n     */\n    public blendMode: BLEND_MODES;\n\n    /** Whether current blend equation is different */\n    protected _blendEq: boolean;\n\n    /**\n     * GL context\n     * @member {WebGLRenderingContext}\n     * @readonly\n     */\n    protected gpu: GPU;\n\n    /**\n     * Default WebGL State\n     * @readonly\n     */\n    protected defaultState: State;\n\n    constructor()\n    {\n        this.defaultState = new State();\n        this.defaultState.blend = true;\n    }\n\n    protected contextChange(gpu: GPU): void\n    {\n        this.gpu = gpu;\n    }\n\n    /**\n     * Gets the blend mode data for the current state\n     * @param state - The state to get the blend mode from\n     */\n    public getColorTargets(state: State): GPUColorTargetState[]\n    {\n        const blend = GpuBlendModesToPixi[state.blendMode] || GpuBlendModesToPixi.normal;\n\n        return [\n            {\n                format: 'bgra8unorm',\n                writeMask: 0,\n                blend,\n            },\n        ];\n    }\n\n    public destroy(): void\n    {\n        this.gpu = null;\n    }\n}\n","import type { BufferImageSource } from '../../../shared/texture/sources/BufferSource';\nimport type { GPU } from '../../GpuDeviceSystem';\nimport type { GpuTextureUploader } from './GpuTextureUploader';\n\nexport const gpuUploadBufferImageResource = {\n\n    type: 'image',\n\n    upload(source: BufferImageSource, gpuTexture: GPUTexture, gpu: GPU)\n    {\n        const resource = source.resource;\n\n        const total = (source.pixelWidth | 0) * (source.pixelHeight | 0);\n\n        const bytesPerPixel = resource.byteLength / total;\n\n        gpu.device.queue.writeTexture(\n            { texture: gpuTexture },\n            resource,\n            {\n                offset: 0,\n                rowsPerImage: source.pixelHeight,\n                bytesPerRow: source.pixelHeight * bytesPerPixel,\n            },\n            {\n                width: source.pixelWidth,\n                height: source.pixelHeight,\n                depthOrArrayLayers: 1,\n            }\n        );\n    }\n} as GpuTextureUploader<BufferImageSource>;\n\n","import type { CompressedSource } from '../../../shared/texture/sources/CompressedSource';\nimport type { GPU } from '../../GpuDeviceSystem';\nimport type { GpuTextureUploader } from './GpuTextureUploader';\n\nexport const blockDataMap: Record<string, {blockBytes: number, blockWidth: number, blockHeight: number}> = {\n    'bc1-rgba-unorm': { blockBytes: 8, blockWidth: 4, blockHeight: 4 },\n    'bc2-rgba-unorm': { blockBytes: 16, blockWidth: 4, blockHeight: 4 },\n    'bc3-rgba-unorm': { blockBytes: 16, blockWidth: 4, blockHeight: 4 },\n    'bc7-rgba-unorm': { blockBytes: 16, blockWidth: 4, blockHeight: 4 },\n    'etc1-rgb-unorm': { blockBytes: 8, blockWidth: 4, blockHeight: 4 },\n    'etc2-rgba8unorm': { blockBytes: 16, blockWidth: 4, blockHeight: 4 },\n    'astc-4x4-unorm': { blockBytes: 16, blockWidth: 4, blockHeight: 4 },\n};\n\nconst defaultBlockData = { blockBytes: 4, blockWidth: 1, blockHeight: 1 };\n\nexport const gpuUploadCompressedTextureResource = {\n\n    type: 'compressed',\n\n    upload(source: CompressedSource, gpuTexture: GPUTexture, gpu: GPU)\n    {\n        let mipWidth = source.pixelWidth;\n        let mipHeight = source.pixelHeight;\n\n        const blockData = blockDataMap[source.format] || defaultBlockData;\n\n        for (let i = 0; i < source.resource.length; i++)\n        {\n            const levelBuffer = source.resource[i];\n\n            const bytesPerRow = Math.ceil(mipWidth / blockData.blockWidth) * blockData.blockBytes;\n\n            gpu.device.queue.writeTexture(\n                {\n                    texture: gpuTexture,\n                    mipLevel: i\n                },\n                levelBuffer,\n                {\n                    offset: 0,\n                    bytesPerRow,\n                },\n                {\n                    width: Math.ceil(mipWidth / blockData.blockWidth) * blockData.blockWidth,\n                    height: Math.ceil(mipHeight / blockData.blockHeight) * blockData.blockHeight,\n                    depthOrArrayLayers: 1,\n                }\n            );\n\n            mipWidth = Math.max(mipWidth >> 1, 1);\n            mipHeight = Math.max(mipHeight >> 1, 1);\n        }\n    }\n} as GpuTextureUploader<CompressedSource>;\n\n","import type { TextureSource } from '../../../shared/texture/sources/TextureSource';\nimport type { GPU } from '../../GpuDeviceSystem';\nimport type { GpuTextureUploader } from './GpuTextureUploader';\n\nexport const gpuUploadImageResource = {\n\n    type: 'image',\n\n    upload(source: TextureSource, gpuTexture: GPUTexture, gpu: GPU)\n    {\n        const resource = source.resource as ImageBitmap | HTMLCanvasElement | OffscreenCanvas;\n\n        if (!resource) return;\n\n        const width = Math.min(gpuTexture.width, source.resourceWidth || source.pixelWidth);\n        const height = Math.min(gpuTexture.height, source.resourceHeight || source.pixelHeight);\n\n        const premultipliedAlpha = source.alphaMode === 'premultiply-alpha-on-upload';\n\n        gpu.device.queue.copyExternalImageToTexture(\n            { source: resource },\n            { texture: gpuTexture, premultipliedAlpha },\n            {\n                width,\n                height,\n            }\n        );\n    }\n} as GpuTextureUploader<TextureSource>;\n\n","import { gpuUploadImageResource } from './gpuUploadImageSource';\n\nimport type { VideoSource } from '../../../shared/texture/sources/VideoSource';\nimport type { GPU } from '../../GpuDeviceSystem';\nimport type { GpuTextureUploader } from './GpuTextureUploader';\n\nexport const gpuUploadVideoResource = {\n\n    type: 'video',\n\n    upload(source: VideoSource, gpuTexture: GPUTexture, gpu: GPU)\n    {\n        gpuUploadImageResource.upload(source, gpuTexture, gpu);\n    }\n} as GpuTextureUploader<VideoSource>;\n\n","/**\n * A class which generates mipmaps for a GPUTexture.\n * Thanks to @toji for the original implementation\n * https://github.com/toji/web-texture-tool/blob/main/src/webgpu-mipmap-generator.js\n * @memberof rendering\n * @ignore\n */\nexport class GpuMipmapGenerator\n{\n    public device: GPUDevice;\n    public sampler: GPUSampler;\n    public pipelines: Record<string, GPURenderPipeline>;\n\n    public mipmapShaderModule: any;\n\n    constructor(device: GPUDevice)\n    {\n        this.device = device;\n        this.sampler = device.createSampler({ minFilter: 'linear' });\n        // We'll need a new pipeline for every texture format used.\n        this.pipelines = {};\n    }\n\n    private _getMipmapPipeline(format: GPUTextureFormat)\n    {\n        let pipeline = this.pipelines[format];\n\n        if (!pipeline)\n        {\n            // Shader modules is shared between all pipelines, so only create once.\n            if (!this.mipmapShaderModule)\n            {\n                this.mipmapShaderModule = this.device.createShaderModule({\n                    code: /* wgsl */ `\n                        var<private> pos : array<vec2<f32>, 3> = array<vec2<f32>, 3>(\n                        vec2<f32>(-1.0, -1.0), vec2<f32>(-1.0, 3.0), vec2<f32>(3.0, -1.0));\n\n                        struct VertexOutput {\n                        @builtin(position) position : vec4<f32>,\n                        @location(0) texCoord : vec2<f32>,\n                        };\n\n                        @vertex\n                        fn vertexMain(@builtin(vertex_index) vertexIndex : u32) -> VertexOutput {\n                        var output : VertexOutput;\n                        output.texCoord = pos[vertexIndex] * vec2<f32>(0.5, -0.5) + vec2<f32>(0.5);\n                        output.position = vec4<f32>(pos[vertexIndex], 0.0, 1.0);\n                        return output;\n                        }\n\n                        @group(0) @binding(0) var imgSampler : sampler;\n                        @group(0) @binding(1) var img : texture_2d<f32>;\n\n                        @fragment\n                        fn fragmentMain(@location(0) texCoord : vec2<f32>) -> @location(0) vec4<f32> {\n                        return textureSample(img, imgSampler, texCoord);\n                        }\n                    `,\n                });\n            }\n\n            pipeline = this.device.createRenderPipeline({\n                layout: 'auto',\n                vertex: {\n                    module: this.mipmapShaderModule,\n                    entryPoint: 'vertexMain',\n                },\n                fragment: {\n                    module: this.mipmapShaderModule,\n                    entryPoint: 'fragmentMain',\n                    targets: [{ format }],\n                }\n            });\n\n            this.pipelines[format] = pipeline;\n        }\n\n        return pipeline;\n    }\n\n    /**\n     * Generates mipmaps for the given GPUTexture from the data in level 0.\n     * @param {module:External.GPUTexture} texture - Texture to generate mipmaps for.\n     * @returns {module:External.GPUTexture} - The originally passed texture\n     */\n    public generateMipmap(texture: GPUTexture)\n    {\n        const pipeline = this._getMipmapPipeline(texture.format);\n\n        if (texture.dimension === '3d' || texture.dimension === '1d')\n        {\n            throw new Error('Generating mipmaps for non-2d textures is currently unsupported!');\n        }\n\n        let mipTexture = texture;\n        const arrayLayerCount = texture.depthOrArrayLayers || 1; // Only valid for 2D textures.\n\n        // If the texture was created with RENDER_ATTACHMENT usage we can render directly between mip levels.\n        const renderToSource = texture.usage & GPUTextureUsage.RENDER_ATTACHMENT;\n\n        if (!renderToSource)\n        {\n            // Otherwise we have to use a separate texture to render into. It can be one mip level smaller than the source\n            // texture, since we already have the top level.\n            const mipTextureDescriptor = {\n                size: {\n                    width: Math.ceil(texture.width / 2),\n                    height: Math.ceil(texture.height / 2),\n                    depthOrArrayLayers: arrayLayerCount,\n                },\n                format: texture.format,\n                usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n                mipLevelCount: texture.mipLevelCount - 1,\n            };\n\n            mipTexture = this.device.createTexture(mipTextureDescriptor);\n        }\n\n        const commandEncoder = this.device.createCommandEncoder({});\n        // TODO: Consider making this static.\n        const bindGroupLayout = pipeline.getBindGroupLayout(0);\n\n        for (let arrayLayer = 0; arrayLayer < arrayLayerCount; ++arrayLayer)\n        {\n            let srcView = texture.createView({\n                baseMipLevel: 0,\n                mipLevelCount: 1,\n                dimension: '2d',\n                baseArrayLayer: arrayLayer,\n                arrayLayerCount: 1,\n            });\n\n            let dstMipLevel = renderToSource ? 1 : 0;\n\n            for (let i = 1; i < texture.mipLevelCount; ++i)\n            {\n                const dstView = mipTexture.createView({\n                    baseMipLevel: dstMipLevel++,\n                    mipLevelCount: 1,\n                    dimension: '2d',\n                    baseArrayLayer: arrayLayer,\n                    arrayLayerCount: 1,\n                });\n\n                const passEncoder = commandEncoder.beginRenderPass({\n                    colorAttachments: [{\n                        view: dstView,\n                        storeOp: 'store',\n                        loadOp: 'clear',\n                        clearValue: { r: 0, g: 0, b: 0, a: 0 },\n                    }],\n                });\n\n                const bindGroup = this.device.createBindGroup({\n                    layout: bindGroupLayout,\n                    entries: [{\n                        binding: 0,\n                        resource: this.sampler,\n                    }, {\n                        binding: 1,\n                        resource: srcView,\n                    }],\n                });\n\n                passEncoder.setPipeline(pipeline);\n                passEncoder.setBindGroup(0, bindGroup);\n                passEncoder.draw(3, 1, 0, 0);\n\n                passEncoder.end();\n\n                srcView = dstView;\n            }\n        }\n\n        // If we didn't render to the source texture, finish by copying the mip results from the temporary mipmap texture\n        // to the source.\n        if (!renderToSource)\n        {\n            const mipLevelSize = {\n                width: Math.ceil(texture.width / 2),\n                height: Math.ceil(texture.height / 2),\n                depthOrArrayLayers: arrayLayerCount,\n            };\n\n            for (let i = 1; i < texture.mipLevelCount; ++i)\n            {\n                commandEncoder.copyTextureToTexture({\n                    texture: mipTexture,\n                    mipLevel: i - 1,\n                }, {\n                    texture,\n                    mipLevel: i,\n                }, mipLevelSize);\n\n                mipLevelSize.width = Math.ceil(mipLevelSize.width / 2);\n                mipLevelSize.height = Math.ceil(mipLevelSize.height / 2);\n            }\n        }\n\n        this.device.queue.submit([commandEncoder.finish()]);\n\n        if (!renderToSource)\n        {\n            mipTexture.destroy();\n        }\n\n        return texture;\n    }\n}\n","import { DOMAdapter } from '../../../../environment/adapter';\nimport { ExtensionType } from '../../../../extensions/Extensions';\nimport { CanvasPool } from '../../shared/texture/CanvasPool';\nimport { BindGroup } from '../shader/BindGroup';\nimport { gpuUploadBufferImageResource } from './uploaders/gpuUploadBufferImageResource';\nimport { blockDataMap, gpuUploadCompressedTextureResource } from './uploaders/gpuUploadCompressedTextureResource';\nimport { gpuUploadImageResource } from './uploaders/gpuUploadImageSource';\nimport { gpuUploadVideoResource } from './uploaders/gpuUploadVideoSource';\nimport { GpuMipmapGenerator } from './utils/GpuMipmapGenerator';\n\nimport type { ICanvas } from '../../../../environment/canvas/ICanvas';\nimport type { System } from '../../shared/system/System';\nimport type { CanvasGenerator, GetPixelsOutput } from '../../shared/texture/GenerateCanvas';\nimport type { TextureSource } from '../../shared/texture/sources/TextureSource';\nimport type { BindableTexture, Texture } from '../../shared/texture/Texture';\nimport type { TextureStyle } from '../../shared/texture/TextureStyle';\nimport type { GPU } from '../GpuDeviceSystem';\nimport type { WebGPURenderer } from '../WebGPURenderer';\nimport type { GpuTextureUploader } from './uploaders/GpuTextureUploader';\n\n/**\n * The system that handles textures for the GPU.\n * @memberof rendering\n */\nexport class GpuTextureSystem implements System, CanvasGenerator\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'texture',\n    } as const;\n\n    public readonly managedTextures: TextureSource[] = [];\n\n    protected CONTEXT_UID: number;\n    private _gpuSources: Record<number, GPUTexture> = Object.create(null);\n    private _gpuSamplers: Record<string, GPUSampler> = Object.create(null);\n    private _bindGroupHash: Record<string, BindGroup> = Object.create(null);\n    private _textureViewHash: Record<string, GPUTextureView> = Object.create(null);\n\n    private readonly _uploads: Record<string, GpuTextureUploader> = {\n        image: gpuUploadImageResource,\n        buffer: gpuUploadBufferImageResource,\n        video: gpuUploadVideoResource,\n        compressed: gpuUploadCompressedTextureResource\n    };\n\n    private _gpu: GPU;\n    private _mipmapGenerator?: GpuMipmapGenerator;\n\n    private readonly _renderer: WebGPURenderer;\n\n    constructor(renderer: WebGPURenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    protected contextChange(gpu: GPU): void\n    {\n        this._gpu = gpu;\n    }\n\n    public initSource(source: TextureSource): GPUTexture\n    {\n        if (source.autoGenerateMipmaps)\n        {\n            const biggestDimension = Math.max(source.pixelWidth, source.pixelHeight);\n\n            source.mipLevelCount = Math.floor(Math.log2(biggestDimension)) + 1;\n        }\n\n        let usage = GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST;\n\n        if (source.uploadMethodId !== 'compressed')\n        {\n            usage |= GPUTextureUsage.RENDER_ATTACHMENT;\n            usage |= GPUTextureUsage.COPY_SRC;\n        }\n\n        const blockData = blockDataMap[source.format] || { blockBytes: 4, blockWidth: 1, blockHeight: 1 };\n\n        const width = Math.ceil(source.pixelWidth / blockData.blockWidth) * blockData.blockWidth;\n        const height = Math.ceil(source.pixelHeight / blockData.blockHeight) * blockData.blockHeight;\n\n        const textureDescriptor: GPUTextureDescriptor = {\n            label: source.label,\n            size: { width, height },\n            format: source.format,\n            sampleCount: source.sampleCount,\n            mipLevelCount: source.mipLevelCount,\n            dimension: source.dimension,\n            usage\n        };\n\n        const gpuTexture = this._gpu.device.createTexture(textureDescriptor);\n\n        this._gpuSources[source.uid] = gpuTexture;\n\n        if (!this.managedTextures.includes(source))\n        {\n            source.on('update', this.onSourceUpdate, this);\n            source.on('resize', this.onSourceResize, this);\n            source.on('destroy', this.onSourceDestroy, this);\n            source.on('unload', this.onSourceUnload, this);\n            source.on('updateMipmaps', this.onUpdateMipmaps, this);\n\n            this.managedTextures.push(source);\n        }\n\n        this.onSourceUpdate(source);\n\n        return gpuTexture;\n    }\n\n    protected onSourceUpdate(source: TextureSource): void\n    {\n        const gpuTexture = this.getGpuSource(source);\n\n        // destroyed!\n        if (!gpuTexture) return;\n\n        if (this._uploads[source.uploadMethodId])\n        {\n            this._uploads[source.uploadMethodId].upload(source, gpuTexture, this._gpu);\n        }\n\n        if (source.autoGenerateMipmaps && source.mipLevelCount > 1)\n        {\n            this.onUpdateMipmaps(source);\n        }\n    }\n\n    protected onSourceUnload(source: TextureSource): void\n    {\n        const gpuTexture = this._gpuSources[source.uid];\n\n        if (gpuTexture)\n        {\n            this._gpuSources[source.uid] = null;\n\n            gpuTexture.destroy();\n        }\n    }\n\n    protected onUpdateMipmaps(source: TextureSource): void\n    {\n        if (!this._mipmapGenerator)\n        {\n            this._mipmapGenerator = new GpuMipmapGenerator(this._gpu.device);\n        }\n\n        const gpuTexture = this.getGpuSource(source);\n\n        this._mipmapGenerator.generateMipmap(gpuTexture);\n    }\n\n    protected onSourceDestroy(source: TextureSource): void\n    {\n        source.off('update', this.onSourceUpdate, this);\n        source.off('unload', this.onSourceUnload, this);\n        source.off('destroy', this.onSourceDestroy, this);\n        source.off('resize', this.onSourceResize, this);\n        source.off('updateMipmaps', this.onUpdateMipmaps, this);\n\n        this.managedTextures.splice(this.managedTextures.indexOf(source), 1);\n\n        this.onSourceUnload(source);\n    }\n\n    protected onSourceResize(source: TextureSource): void\n    {\n        const gpuTexture = this._gpuSources[source.uid];\n\n        if (!gpuTexture)\n        {\n            this.initSource(source);\n        }\n        else if (gpuTexture.width !== source.pixelWidth || gpuTexture.height !== source.pixelHeight)\n        {\n            this._textureViewHash[source.uid] = null;\n            this._bindGroupHash[source.uid] = null;\n\n            this.onSourceUnload(source);\n            this.initSource(source);\n        }\n    }\n\n    private _initSampler(sampler: TextureStyle): GPUSampler\n    {\n        this._gpuSamplers[sampler._resourceId] = this._gpu.device.createSampler(sampler);\n\n        return this._gpuSamplers[sampler._resourceId];\n    }\n\n    public getGpuSampler(sampler: TextureStyle): GPUSampler\n    {\n        return this._gpuSamplers[sampler._resourceId] || this._initSampler(sampler);\n    }\n\n    public getGpuSource(source: TextureSource): GPUTexture\n    {\n        return this._gpuSources[source.uid] || this.initSource(source);\n    }\n\n    public getTextureBindGroup(texture: Texture)\n    {\n        return this._bindGroupHash[texture.uid] ?? this._createTextureBindGroup(texture);\n    }\n\n    private _createTextureBindGroup(texture: BindableTexture)\n    {\n        const source = texture.source;\n\n        const bindGroupId = source.uid;\n\n        this._bindGroupHash[bindGroupId] = new BindGroup({\n            0: source,\n            1: source.style,\n        });\n\n        return this._bindGroupHash[bindGroupId];\n    }\n\n    public getTextureView(texture: BindableTexture)\n    {\n        const source = texture.source;\n\n        return this._textureViewHash[source.uid] ?? this._createTextureView(source);\n    }\n\n    private _createTextureView(texture: TextureSource)\n    {\n        this._textureViewHash[texture.uid] = this.getGpuSource(texture).createView();\n\n        return this._textureViewHash[texture.uid];\n    }\n\n    public generateCanvas(texture: Texture): ICanvas\n    {\n        const renderer = this._renderer;\n\n        const commandEncoder = renderer.gpu.device.createCommandEncoder();\n\n        // create canvas\n        const canvas = DOMAdapter.get().createCanvas();\n\n        canvas.width = texture.source.pixelWidth;\n        canvas.height = texture.source.pixelHeight;\n\n        const context = canvas.getContext('webgpu') as unknown as GPUCanvasContext;\n\n        context.configure({\n            device: renderer.gpu.device,\n            // eslint-disable-next-line max-len\n            usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC,\n            format: navigator.gpu.getPreferredCanvasFormat(),\n            alphaMode: 'premultiplied',\n        });\n\n        commandEncoder.copyTextureToTexture({\n            texture: renderer.texture.getGpuSource(texture.source),\n            origin: {\n                x: 0,\n                y: 0,\n            },\n        }, {\n            texture: context.getCurrentTexture(),\n        }, {\n            width: canvas.width,\n            height: canvas.height,\n        });\n\n        renderer.gpu.device.queue.submit([commandEncoder.finish()]);\n\n        return canvas;\n    }\n\n    public getPixels(texture: Texture): GetPixelsOutput\n    {\n        const webGPUCanvas = this.generateCanvas(texture);\n\n        const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(webGPUCanvas.width, webGPUCanvas.height);\n\n        const context = canvasAndContext.context;\n\n        context.drawImage(webGPUCanvas, 0, 0);\n\n        const { width, height } = webGPUCanvas;\n\n        const imageData = context.getImageData(0, 0, width, height);\n\n        const pixels = new Uint8ClampedArray(imageData.data.buffer);\n\n        CanvasPool.returnCanvasAndContext(canvasAndContext);\n\n        return { pixels, width, height };\n    }\n\n    public destroy(): void\n    {\n        // we copy the array as the aarry with a slice as onSourceDestroy\n        // will remove the source from the real managedTextures array\n        this.managedTextures\n            .slice()\n            .forEach((source) => this.onSourceDestroy(source));\n\n        (this.managedTextures as null) = null;\n\n        for (const k of Object.keys(this._bindGroupHash))\n        {\n            const key = Number(k);\n            const bindGroup = this._bindGroupHash[key];\n\n            bindGroup?.destroy();\n            this._bindGroupHash[key] = null;\n        }\n\n        this._gpu = null;\n        this._mipmapGenerator = null;\n        this._gpuSources = null;\n        this._bindGroupHash = null;\n        this._textureViewHash = null;\n        this._gpuSamplers = null;\n    }\n}\n","import { extensions, ExtensionType } from '../../../extensions/Extensions';\nimport { GpuGraphicsAdaptor } from '../../../scene/graphics/gpu/GpuGraphicsAdaptor';\nimport { GpuMeshAdapter } from '../../../scene/mesh/gpu/GpuMeshAdapter';\nimport { GpuBatchAdaptor } from '../../batcher/gpu/GpuBatchAdaptor';\nimport { AbstractRenderer } from '../shared/system/AbstractRenderer';\nimport { SharedRenderPipes, SharedSystems } from '../shared/system/SharedSystems';\nimport { RendererType } from '../types';\nimport { BindGroupSystem } from './BindGroupSystem';\nimport { GpuBufferSystem } from './buffer/GpuBufferSystem';\nimport { GpuColorMaskSystem } from './GpuColorMaskSystem';\nimport { type GPU, GpuDeviceSystem } from './GpuDeviceSystem';\nimport { GpuEncoderSystem } from './GpuEncoderSystem';\nimport { GpuStencilSystem } from './GpuStencilSystem';\nimport { GpuUboSystem } from './GpuUboSystem';\nimport { GpuUniformBatchPipe } from './GpuUniformBatchPipe';\nimport { PipelineSystem } from './pipeline/PipelineSystem';\nimport { GpuRenderTargetSystem } from './renderTarget/GpuRenderTargetSystem';\nimport { GpuShaderSystem } from './shader/GpuShaderSystem';\nimport { GpuStateSystem } from './state/GpuStateSystem';\nimport { GpuTextureSystem } from './texture/GpuTextureSystem';\n\nimport type { ICanvas } from '../../../environment/canvas/ICanvas';\nimport type { PipeConstructor } from '../shared/instructions/RenderPipe';\nimport type { SharedRendererOptions } from '../shared/system/SharedSystems';\nimport type { SystemConstructor } from '../shared/system/System';\nimport type { ExtractRendererOptions, ExtractSystemTypes } from '../shared/system/utils/typeUtils';\n\nconst DefaultWebGPUSystems = [\n    ...SharedSystems,\n    GpuUboSystem,\n    GpuEncoderSystem,\n    GpuDeviceSystem,\n    GpuBufferSystem,\n    GpuTextureSystem,\n    GpuRenderTargetSystem,\n    GpuShaderSystem,\n    GpuStateSystem,\n    PipelineSystem,\n    GpuColorMaskSystem,\n    GpuStencilSystem,\n    BindGroupSystem,\n];\nconst DefaultWebGPUPipes = [...SharedRenderPipes, GpuUniformBatchPipe];\nconst DefaultWebGPUAdapters = [GpuBatchAdaptor, GpuMeshAdapter, GpuGraphicsAdaptor];\n\n// installed systems will bbe added to this array by the extensions manager..\nconst systems: { name: string; value: SystemConstructor }[] = [];\nconst renderPipes: { name: string; value: PipeConstructor }[] = [];\nconst renderPipeAdaptors: { name: string; value: any }[] = [];\n\nextensions.handleByNamedList(ExtensionType.WebGPUSystem, systems);\nextensions.handleByNamedList(ExtensionType.WebGPUPipes, renderPipes);\nextensions.handleByNamedList(ExtensionType.WebGPUPipesAdaptor, renderPipeAdaptors);\n\n// add all the default systems as well as any user defined ones from the extensions\nextensions.add(...DefaultWebGPUSystems, ...DefaultWebGPUPipes, ...DefaultWebGPUAdapters);\n\ntype WebGPUSystems = ExtractSystemTypes<typeof DefaultWebGPUSystems> &\nPixiMixins.RendererSystems &\nPixiMixins.WebGPUSystems;\n\nexport type WebGPUPipes = ExtractSystemTypes<typeof DefaultWebGPUPipes> &\nPixiMixins.RendererPipes &\nPixiMixins.WebGPUPipes;\n\n/**\n * Options for WebGPURenderer.\n * @memberof rendering\n */\nexport interface WebGPUOptions extends\n    SharedRendererOptions,\n    ExtractRendererOptions<typeof DefaultWebGPUSystems>,\n    PixiMixins.WebGPUOptions{}\n\nexport interface WebGPURenderer<T extends ICanvas = HTMLCanvasElement>\n    extends AbstractRenderer<WebGPUPipes, WebGPUOptions, T>,\n    WebGPUSystems {}\n\n/* eslint-disable max-len */\n/**\n * The WebGPU PixiJS Renderer. This renderer allows you to use the next-generation graphics API, WebGPU.\n * ```ts\n * // Create a new renderer\n * const renderer = new WebGPURenderer();\n * await renderer.init();\n *\n * // Add the renderer to the stage\n * document.body.appendChild(renderer.canvas);\n *\n * // Create a new stage\n * const stage = new Container();\n *\n * // Render the stage\n * renderer.render(stage);\n * ```\n *\n * You can use {@link rendering.autoDetectRenderer} to create a renderer that will automatically detect the best\n * renderer for the environment.\n * ```ts\n * // Create a new renderer\n * const renderer = await rendering.autoDetectRenderer();\n * ```\n *\n * The renderer is composed of systems that manage specific tasks. The following systems are added by default\n * whenever you create a WebGPU renderer:\n *\n * | WebGPU Core Systems                      | Systems that are specific to the WebGL renderer                               |\n * | ---------------------------------------- | ----------------------------------------------------------------------------- |\n * | {@link rendering.GpuUboSystem}           | This manages WebGPU uniform buffer objects feature for shaders                |\n * | {@link rendering.GpuEncoderSystem}       | This manages the WebGPU command encoder                                       |\n * | {@link rendering.GpuDeviceSystem}        | This manages the WebGPU Device and its extensions                             |\n * | {@link rendering.GpuBufferSystem}        | This manages buffers and their GPU resources, keeps everything in sync        |\n * | {@link rendering.GpuTextureSystem}       | This manages textures and their GPU resources, keeps everything in sync       |\n * | {@link rendering.GpuRenderTargetSystem}  | This manages what we render too. For example the screen, or another texture   |\n * | {@link rendering.GpuShaderSystem}        | This manages shaders, programs that run on the GPU to output lovely pixels    |\n * | {@link rendering.GpuStateSystem}         | This manages the state of the WebGPU Pipelines. eg the various flags that can be set blend modes / depthTesting etc |\n * | {@link rendering.PipelineSystem}         | This manages the WebGPU pipelines, used for rendering                         |\n * | {@link rendering.GpuColorMaskSystem}     | This manages the color mask. Used for color masking                           |\n * | {@link rendering.GpuStencilSystem}       | This manages the stencil buffer. Used primarily for masking                   |\n * | {@link rendering.BindGroupSystem}        | This manages the WebGPU bind groups. this is how data is bound to a shader when rendering |\n *\n * The breadth of the API surface provided by the renderer is contained within these systems.\n * @memberof rendering\n * @property {rendering.GpuUboSystem} ubo - UboSystem instance.\n * @property {rendering.GpuEncoderSystem} encoder - EncoderSystem instance.\n * @property {rendering.GpuDeviceSystem} device - DeviceSystem instance.\n * @property {rendering.GpuBufferSystem} buffer - BufferSystem instance.\n * @property {rendering.GpuTextureSystem} texture - TextureSystem instance.\n * @property {rendering.GpuRenderTargetSystem} renderTarget - RenderTargetSystem instance.\n * @property {rendering.GpuShaderSystem} shader - ShaderSystem instance.\n * @property {rendering.GpuStateSystem} state - StateSystem instance.\n * @property {rendering.PipelineSystem} pipeline - PipelineSystem instance.\n * @property {rendering.GpuColorMaskSystem} colorMask - ColorMaskSystem instance.\n * @property {rendering.GpuStencilSystem} stencil - StencilSystem instance.\n * @property {rendering.BindGroupSystem} bindGroup - BindGroupSystem instance.\n * @extends rendering.AbstractRenderer\n */\nexport class WebGPURenderer<T extends ICanvas = HTMLCanvasElement>\n    extends AbstractRenderer<WebGPUPipes, WebGPUOptions, T>\n    implements WebGPUSystems\n{\n    /** The WebGPU Device. */\n    public gpu: GPU;\n\n    constructor()\n    {\n        const systemConfig = {\n            name: 'webgpu',\n            type: RendererType.WEBGPU,\n            systems,\n            renderPipes,\n            renderPipeAdaptors,\n        };\n\n        super(systemConfig);\n    }\n}\n","import { DOMAdapter } from '../../../../environment/adapter';\nimport { nextPow2 } from '../../../../maths/misc/pow2';\n\nimport type { ICanvas, ICanvasRenderingContext2DSettings } from '../../../../environment/canvas/ICanvas';\nimport type { ICanvasRenderingContext2D } from '../../../../environment/canvas/ICanvasRenderingContext2D';\n\nexport interface CanvasAndContext\n{\n    canvas: ICanvas;\n    context: ICanvasRenderingContext2D;\n}\n\n/**\n * Texture pool, used by FilterSystem and plugins.\n *\n * Stores collection of temporary pow2 or screen-sized renderTextures\n *\n * If you use custom RenderTexturePool for your filters, you can use methods\n * `getFilterTexture` and `returnFilterTexture` same as in\n * @name CanvasPool\n * @memberof rendering\n */\nexport class CanvasPoolClass\n{\n    public canvasOptions: ICanvasRenderingContext2DSettings;\n\n    /**\n     * Allow renderTextures of the same size as screen, not just pow2\n     *\n     * Automatically sets to true after `setScreenSize`\n     * @default false\n     */\n    public enableFullScreen: boolean;\n    private _canvasPool: {[x in string | number]: CanvasAndContext[]};\n\n    constructor(canvasOptions?: ICanvasRenderingContext2DSettings)\n    {\n        this._canvasPool = Object.create(null);\n        this.canvasOptions = canvasOptions || {};\n        this.enableFullScreen = false;\n    }\n\n    /**\n     * Creates texture with params that were specified in pool constructor.\n     * @param pixelWidth - Width of texture in pixels.\n     * @param pixelHeight - Height of texture in pixels.\n     */\n    private _createCanvasAndContext(pixelWidth: number, pixelHeight: number): CanvasAndContext\n    {\n        const canvas = DOMAdapter.get().createCanvas();\n\n        canvas.width = pixelWidth;\n        canvas.height = pixelHeight;\n\n        const context = canvas.getContext('2d');\n\n        return { canvas, context };\n    }\n\n    /**\n     * Gets a Power-of-Two render texture or fullScreen texture\n     * @param minWidth - The minimum width of the render texture.\n     * @param minHeight - The minimum height of the render texture.\n     * @param resolution - The resolution of the render texture.\n     * @returns The new render texture.\n     */\n    public getOptimalCanvasAndContext(minWidth: number, minHeight: number, resolution = 1): CanvasAndContext\n    {\n        minWidth = Math.ceil((minWidth * resolution) - 1e-6);\n        minHeight = Math.ceil((minHeight * resolution) - 1e-6);\n        minWidth = nextPow2(minWidth);\n        minHeight = nextPow2(minHeight);\n\n        const key = (minWidth << 17) + (minHeight << 1);\n\n        if (!this._canvasPool[key])\n        {\n            this._canvasPool[key] = [];\n        }\n\n        let canvasAndContext = this._canvasPool[key].pop();\n\n        if (!canvasAndContext)\n        {\n            canvasAndContext = this._createCanvasAndContext(minWidth, minHeight);\n        }\n\n        return canvasAndContext;\n    }\n\n    /**\n     * Place a render texture back into the pool.\n     * @param canvasAndContext\n     */\n    public returnCanvasAndContext(canvasAndContext: CanvasAndContext): void\n    {\n        const { width, height } = canvasAndContext.canvas;\n\n        const key = (width << 17) + (height << 1);\n\n        this._canvasPool[key].push(canvasAndContext);\n    }\n\n    public clear(): void\n    {\n        this._canvasPool = {};\n    }\n}\n\nexport const CanvasPool = new CanvasPoolClass();\n"],"names":["GpuGraphicsAdaptor","init","localUniforms","UniformGroup","uTransformMatrix","value","Matrix","type","uColor","Float32Array","uRound","gpuProgram","compileHighShaderGpuProgram","name","bits","colorBit","generateTextureBatchBit","MAX_TEXTURES","localUniformBitGroup2","roundPixelsBit","shader","Shader","resources","execute","graphicsPipe","renderable","context","customShader","this","renderer","contextSystem","graphicsContext","geometry","instructions","getContextRenderData","encoder","setPipelineFromGeometryProgramAndState","state","setGeometry","globalUniformsBindGroup","globalUniforms","bindGroup","setBindGroup","localBindGroup","renderPipes","uniformBatch","getUniformBindGroup","batches","i","instructionSize","batch","groups","gpuBindGroup","textureBatch","textures","getTextureBatchBindGroup","count","getBindGroup","renderPassEncoder","drawIndexed","size","start","destroy","extension","ExtensionType","WebGPUPipesAdaptor","GpuMeshAdapter","localUniformBit","textureBit","_shader","uTexture","Texture","EMPTY","_source","uSampler","style","textureUniforms","uTextureMatrix","meshPipe","mesh","warn","texture","source","uniforms","textureMatrix","mapCoord","autoAssignGlobalUniforms","autoAssignLocalUniforms","draw","_geometry","tempState","State","for2d","GpuBatchAdaptor","batchPipe","program","blendMode","pipeline","getPipeline","resetBindGroup","_touch","textureGC","setPipeline","BindGroupSystem","constructor","_hash","Object","create","_renderer","contextChange","gpu","_gpu","groupIndex","_updateKey","_key","_createBindGroup","group","device","groupLayout","layout","entries","j","resource","gpuResource","_resourceType","uniformGroup","ubo","updateUniformGroup","buffer","getGPUBuffer","offset","descriptor","bufferResource","sampler","getGpuSampler","getGpuSource","createView","push","binding","getProgramData","bindGroups","createBindGroup","key","keys","WebGPUSystem","GpuBufferSystem","_gpuBuffers","_managedBuffers","uid","createGPUBuffer","updateBuffer","gpuBuffer","data","_updateID","queue","writeBuffer","_updateSize","byteLength","destroyAll","id","on","onBufferChange","onBufferDestroy","createBuffer","fastCopy","getMappedRange","unmap","splice","indexOf","off","slice","forEach","GpuColorMaskSystem","_colorMaskCache","setMask","colorMask","setColorMask","GpuDeviceSystem","options","_initPromise","_createDeviceAndAdaptor","then","runners","emit","adapter","navigator","requestAdapter","powerPreference","forceFallbackAdapter","requiredFeatures","filter","feature","features","has","requestDevice","defaultOptions","GpuEncoderSystem","_boundBindGroup","_boundVertexBuffer","renderStart","commandFinished","Promise","resolve","_resolveCommandFinished","commandEncoder","createCommandEncoder","beginRenderPass","gpuRenderTarget","endRenderPass","_clearCache","end","setViewport","viewport","x","y","width","height","topology","_boundPipeline","_setVertexBuffer","index","setVertexBuffer","_setIndexBuffer","_boundIndexBuffer","indexFormat","BYTES_PER_ELEMENT","setIndexBuffer","attributes","attribute","location","indexBuffer","_setShaderBindGroups","skipSync","_syncBindGroup","isUniformGroup","instanceCount","length","getSize","finishRenderPass","postrender","submit","finish","restoreRenderPass","renderTarget","adaptor","getDescriptor","boundPipeline","boundVertexBuffer","boundIndexBuffer","boundBindGroup","priority","GpuStencilSystem","_renderTargetStencilState","onRenderTargetChange","add","stencilState","stencilMode","STENCIL_MODES","DISABLED","stencilReference","_activeRenderTarget","setStencilMode","setStencilReference","remove","WGSL_ALIGN_SIZE_DATA","i32","align","u32","f32","f16","createUboElementsWGSL","uniformData","uboElements","map","uboElement","Error","Math","max","ceil","generateArraySyncWGSL","offsetToAdd","remainder","createUboSyncFunctionWGSL","createUboSyncFunction","uboSyncFunctionsWGSL","GpuUboSystem","UboSystem","createUboElements","generateUboSync","UboBatch","minUniformOffsetAlignment","_minUniformOffsetAlignment","byteIndex","clear","addEmptyGroup","newSize","addGroup","array","_buffer","GpuUniformBatchPipe","_bindGroupHash","_buffers","_bindGroups","_bufferResources","_batchBuffer","totalBuffers","usage","BufferUsage","UNIFORM","COPY_DST","COPY_SRC","Buffer","renderEnd","_uploadBindGroups","_resetBindGroups","duplicate","ensureUniformGroup","syncUniformGroup","_getBindGroup","getUboResource","_getBufferResource","getArrayBindGroup","getArrayBufferResource","BufferResource","BindGroup","bufferSystem","firstBuffer","update","copyBufferToBuffer","WebGPUPipes","topologyStringToId","getGraphicsStateKey","geometryLayout","shaderKey","getGlobalStateKey","stencilStateId","multiSampleCount","PipelineSystem","_moduleCache","_bufferLayoutsCache","_pipeCache","_pipeStateCaches","_colorMask","_multisampleCount","_updatePipeHash","setMultisampleCount","multisampleCount","setRenderTarget","msaaSamples","_depthStencilAttachment","depthStencilAttachment","_stencilMode","_stencilState","GpuStencilModesToPixi","passEncoder","_layoutKey","ensureAttributes","attributeData","_generateBufferKey","_blendModeId","_createPipeline","buffers","_createVertexBufferLayouts","blendModes","getColorTargets","writeMask","RENDERING_MASK_ADD","vertex","module","_getModule","entryPoint","fragment","targets","primitive","cullMode","multisample","label","depthStencil","format","depthWriteEnabled","depthTest","depthCompare","createRenderPipeline","code","_createModule","createShaderModule","keyGen","attributeKeys","sort","stride","stringKey","join","createIdFromString","vertexBuffersLayout","bufferEntry","arrayStride","stepMode","bufferEntryAttributes","instance","shaderLocation","GpuRenderTarget","contexts","msaaTextures","GpuRenderTargetAdaptor","renderTargetSystem","_renderTargetSystem","copyToTexture","sourceRenderSurfaceTexture","destinationTexture","originSrc","originDest","baseGpuTexture","_getGpuColorTexture","backGpuTexture","copyTextureToTexture","origin","startRenderPass","clearColor","getGpuRenderTarget","getCurrentTexture","colorTextures","clearValue","CLEAR","ALL","NONE","colorAttachments","view","resolveTarget","currentTexture","canvasTextureView","mipLevelCount","getTextureView","loadOp","COLOR","defaultClearColor","storeOp","stencil","depth","depthStencilTexture","ensureDepthStencilTexture","sampleCount","msaa","stencilLoadOp","STENCIL","depthLoadOp","DEPTH","stencilStoreOp","depthClearValue","depthStoreOp","standAlone","renderPassDescriptor","gpuCommands","initGpuRenderTarget","isRoot","colorTexture","CanvasSource","test","getContext","alphaMode","transparent","configure","GPUTextureUsage","TEXTURE_BINDING","RENDER_ATTACHMENT","e","console","error","antialias","msaaTexture","TextureSource","resizeGpuRenderTarget","resize","_resolution","GpuRenderTargetSystem","RenderTargetSystem","super","GpuShaderSystem","_gpuProgramData","_createGPUProgramData","gpuLayout","createBindGroupLayout","pipelineLayoutDesc","bindGroupLayouts","createPipelineLayout","GpuBlendModesToPixi","alpha","srcFactor","dstFactor","operation","color","GpuStateSystem","defaultState","blend","normal","gpuUploadBufferImageResource","upload","gpuTexture","total","pixelWidth","pixelHeight","bytesPerPixel","writeTexture","rowsPerImage","bytesPerRow","depthOrArrayLayers","blockDataMap","blockBytes","blockWidth","blockHeight","defaultBlockData","gpuUploadCompressedTextureResource","mipWidth","mipHeight","blockData","levelBuffer","mipLevel","gpuUploadImageResource","min","resourceWidth","resourceHeight","premultipliedAlpha","copyExternalImageToTexture","gpuUploadVideoResource","GpuMipmapGenerator","createSampler","minFilter","pipelines","_getMipmapPipeline","mipmapShaderModule","generateMipmap","dimension","mipTexture","arrayLayerCount","renderToSource","mipTextureDescriptor","createTexture","bindGroupLayout","getBindGroupLayout","arrayLayer","srcView","baseMipLevel","baseArrayLayer","dstMipLevel","dstView","r","g","b","a","mipLevelSize","GpuTextureSystem","managedTextures","_gpuSources","_gpuSamplers","_textureViewHash","_uploads","image","video","compressed","initSource","autoGenerateMipmaps","biggestDimension","floor","log2","uploadMethodId","textureDescriptor","includes","onSourceUpdate","onSourceResize","onSourceDestroy","onSourceUnload","onUpdateMipmaps","_mipmapGenerator","_initSampler","_resourceId","getTextureBindGroup","_createTextureBindGroup","bindGroupId","_createTextureView","generateCanvas","canvas","DOMAdapter","get","createCanvas","getPreferredCanvasFormat","getPixels","webGPUCanvas","canvasAndContext","CanvasPool","getOptimalCanvasAndContext","drawImage","imageData","getImageData","pixels","Uint8ClampedArray","returnCanvasAndContext","k","Number","DefaultWebGPUSystems","SharedSystems","DefaultWebGPUPipes","SharedRenderPipes","DefaultWebGPUAdapters","systems","renderPipeAdaptors","extensions","handleByNamedList","WebGPURenderer","AbstractRenderer","systemConfig","RendererType","WEBGPU","CanvasPoolClass","canvasOptions","_canvasPool","enableFullScreen","_createCanvasAndContext","minWidth","minHeight","resolution","nextPow2","pop"],"sourceRoot":""}